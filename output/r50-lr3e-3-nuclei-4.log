Found Detectron ops lib: /var/storage/shared/pnrsy/sys/jobs/application_1520801018426_4469/.conda/envs/detectron/lib/libcaffe2_detectron_ops_gpu.so
Found Detectron ops lib: /var/storage/shared/pnrsy/sys/jobs/application_1520801018426_4469/.conda/envs/detectron/lib/libcaffe2_detectron_ops_gpu.so
INFO train_net.py: 104: Called with args:
INFO train_net.py: 105: Namespace(cfg_file='configs/nuclei/e2e_mask_rcnn_R-50-FPN_1x-lr3e-3-nulei-4.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/tmp/detectron-output-nuclei-r50-4'], skip_test=False)
INFO train_net.py: 111: Training with config:
INFO train_net.py: 112: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'MLP_HEAD_DIM': 1024,
               'ROI_BOX_HEAD': 'fast_rcnn_heads.add_roi_2mlp_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 7,
               'ROI_XFORM_SAMPLING_RATIO': 2},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': True,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 8,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'ZERO_INIT_LATERAL': False},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet50_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': True,
           'NUM_CLASSES': 2,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'MSRAFill',
           'DILATION': 1,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': 'mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 2,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/tmp/detectron-output-nuclei-r50-4',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/var/storage/shared/pnrsy/weiso/Detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.003,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASET': '',
          'DATASETS': ('dsb_2018_val',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.5,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILE': '',
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALES': (800,),
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 512,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('dsb_2018_train',),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 2000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (800,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train_net.py: 205: Building model: generalized_rcnn
WARNING cnn.py:  40: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING memonger.py:  70: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py: 112: Memonger memory optimization took 0.0207657814026 secs
INFO train_net.py: 253: Loading dataset: ('dsb_2018_train',)
loading annotations into memory...
Done (t=0.43s)
creating index...
index created!
INFO roidb.py:  49: Appending horizontally-flipped training examples...
INFO roidb.py:  51: Loaded dataset: dsb_2018_train
INFO roidb.py: 135: Filtered 0 roidb entries: 1072 -> 1072
INFO roidb.py:  67: Computing bounding-box regression targets...
INFO roidb.py:  69: done
INFO train_net.py: 257: 1072 roidb entries
INFO net.py:  57: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  86: fpn_inner_res5_2_sum_w not found
INFO net.py:  86: fpn_inner_res5_2_sum_b not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_b not found
INFO net.py:  86: fpn_res5_2_sum_w not found
INFO net.py:  86: fpn_res5_2_sum_b not found
INFO net.py:  86: fpn_res4_5_sum_w not found
INFO net.py:  86: fpn_res4_5_sum_b not found
INFO net.py:  86: fpn_res3_3_sum_w not found
INFO net.py:  86: fpn_res3_3_sum_b not found
INFO net.py:  86: fpn_res2_2_sum_w not found
INFO net.py:  86: fpn_res2_2_sum_b not found
INFO net.py:  86: conv_rpn_fpn2_w not found
INFO net.py:  86: conv_rpn_fpn2_b not found
INFO net.py:  86: rpn_cls_logits_fpn2_w not found
INFO net.py:  86: rpn_cls_logits_fpn2_b not found
INFO net.py:  86: rpn_bbox_pred_fpn2_w not found
INFO net.py:  86: rpn_bbox_pred_fpn2_b not found
INFO net.py:  86: fc6_w not found
INFO net.py:  86: fc6_b not found
INFO net.py:  86: fc7_w not found
INFO net.py:  86: fc7_b not found
INFO net.py:  86: cls_score_w not found
INFO net.py:  86: cls_score_b not found
INFO net.py:  86: bbox_pred_w not found
INFO net.py:  86: bbox_pred_b not found
INFO net.py:  86: fcn1_w not found
INFO net.py:  86: fcn1_b not found
INFO net.py:  86: fcn2_w not found
INFO net.py:  86: fcn2_b not found
INFO net.py:  86: fcn3_w not found
INFO net.py:  86: fcn3_b not found
INFO net.py:  86: fcn4_w not found
INFO net.py:  86: fcn4_b not found
INFO net.py:  86: conv5_mask_w not found
INFO net.py:  86: conv5_mask_b not found
INFO net.py:  86: mask_fcn_logits_w not found
INFO net.py:  86: mask_fcn_logits_b not found
INFO train_net.py: 241: Outputs saved to: /tmp/detectron-output-nuclei-r50-4/train/dsb_2018_train/generalized_rcnn
INFO loader.py: 227: Pre-filling mini-batch queue...
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [3/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [5/64]
INFO loader.py: 232:   [7/64]
INFO loader.py: 232:   [7/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [10/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [13/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [17/64]
INFO loader.py: 232:   [19/64]
INFO loader.py: 232:   [22/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [25/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [28/64]
INFO loader.py: 232:   [29/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [33/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [36/64]
INFO loader.py: 232:   [37/64]
INFO loader.py: 232:   [39/64]
INFO loader.py: 232:   [41/64]
INFO loader.py: 232:   [41/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [44/64]
INFO loader.py: 232:   [47/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [51/64]
INFO loader.py: 232:   [53/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [56/64]
INFO loader.py: 232:   [57/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [60/64]
INFO loader.py: 232:   [61/64]
INFO loader.py: 232:   [63/64]
INFO loader.py: 232:   [63/64]
INFO detector.py: 436: Changing learning rate 0.000000 -> 0.001000 at iter 0
INFO net.py: 210: Printing model: generalized_rcnn
INFO net.py: 240: data                        : (2, 3, 800, 800)     => conv1                       : (2, 64, 400, 400)    ------- (op: Conv)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => conv1                       : (2, 64, 400, 400)    ------- (op: AffineChannel)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => conv1                       : (2, 64, 400, 400)    ------- (op: Relu)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => pool1                       : (2, 64, 200, 200)    ------- (op: MaxPool)
INFO net.py: 240: pool1                       : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch2c             : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: pool1                       : (2, 64, 200, 200)    => res2_0_branch1              : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch1              : (2, 256, 200, 200)   => res2_0_branch1_bn           : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch1_bn           : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_1_branch2c             : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_2_branch2c             : (2, 256, 200, 200)   => res2_2_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2c_bn          : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: StopGradient)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2c             : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res3_0_branch1              : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch1              : (2, 512, 100, 100)   => res3_0_branch1_bn           : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_0_branch1_bn           : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2c             : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2c             : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2c             : (2, 512, 100, 100)   => res3_3_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2c_bn          : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch2c             : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res4_0_branch1              : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch1              : (2, 1024, 50, 50)    => res4_0_branch1_bn           : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch1_bn           : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_1_branch2c             : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_2_branch2c             : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_3_branch2c             : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_4_branch2c             : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_5_branch2c             : (2, 1024, 50, 50)    => res4_5_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch2c             : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res5_0_branch1              : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch1              : (2, 2048, 25, 25)    => res5_0_branch1_bn           : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch1_bn           : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_1_branch2c             : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_2_branch2c             : (2, 2048, 25, 25)    => res5_2_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_2_sum                  : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_2_sum                  : (2, 2048, 25, 25)    => fpn_inner_res5_2_sum        : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => fpn_inner_res4_5_sum_lateral: (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 25, 25)     => fpn_inner_res4_5_sum_topdown: (2, 256, 50, 50)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res4_5_sum_lateral: (2, 256, 50, 50)     => fpn_inner_res4_5_sum        : (2, 256, 50, 50)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res4_5_sum_topdown: (2, 256, 50, 50)     => fpn_inner_res4_5_sum        : (2, 256, 50, 50)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => fpn_inner_res3_3_sum_lateral: (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 50, 50)     => fpn_inner_res3_3_sum_topdown: (2, 256, 100, 100)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res3_3_sum_lateral: (2, 256, 100, 100)   => fpn_inner_res3_3_sum        : (2, 256, 100, 100)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res3_3_sum_topdown: (2, 256, 100, 100)   => fpn_inner_res3_3_sum        : (2, 256, 100, 100)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => fpn_inner_res2_2_sum_lateral: (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 100, 100)   => fpn_inner_res2_2_sum_topdown: (2, 256, 200, 200)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res2_2_sum_lateral: (2, 256, 200, 200)   => fpn_inner_res2_2_sum        : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res2_2_sum_topdown: (2, 256, 200, 200)   => fpn_inner_res2_2_sum        : (2, 256, 200, 200)   ------|
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 25, 25)     => fpn_res5_2_sum              : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 50, 50)     => fpn_res4_5_sum              : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 100, 100)   => fpn_res3_3_sum              : (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res2_2_sum        : (2, 256, 200, 200)   => fpn_res2_2_sum              : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => fpn_res5_2_sum_subsampled_2x: (2, 256, 13, 13)     ------- (op: MaxPool)
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 200, 200)   => conv_rpn_fpn2               : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => conv_rpn_fpn2               : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => rpn_cls_logits_fpn2         : (2, 3, 200, 200)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 200, 200)     => rpn_cls_probs_fpn2          : (2, 3, 200, 200)     ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn2          : (2, 3, 200, 200)     => rpn_rois_fpn2               : (3998, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn2,gpu_0/rpn_bbox_pred_fpn2,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_rois_fpn2               : (3998, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn2               : (3998, 5)            ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 100, 100)   => conv_rpn_fpn3               : (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => conv_rpn_fpn3               : (2, 256, 100, 100)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => rpn_cls_logits_fpn3         : (2, 3, 100, 100)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 100, 100)     => rpn_cls_probs_fpn3          : (2, 3, 100, 100)     ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn3          : (2, 3, 100, 100)     => rpn_rois_fpn3               : (3999, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn3,gpu_0/rpn_bbox_pred_fpn3,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_rois_fpn3               : (3999, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn3               : (3999, 5)            ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 50, 50)     => conv_rpn_fpn4               : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => conv_rpn_fpn4               : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => rpn_cls_logits_fpn4         : (2, 3, 50, 50)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 50, 50)       => rpn_cls_probs_fpn4          : (2, 3, 50, 50)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn4          : (2, 3, 50, 50)       => rpn_rois_fpn4               : (3997, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn4,gpu_0/rpn_bbox_pred_fpn4,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_rois_fpn4               : (3997, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn4               : (3997, 5)            ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => conv_rpn_fpn5               : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => conv_rpn_fpn5               : (2, 256, 25, 25)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => rpn_cls_logits_fpn5         : (2, 3, 25, 25)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 25, 25)       => rpn_cls_probs_fpn5          : (2, 3, 25, 25)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn5          : (2, 3, 25, 25)       => rpn_rois_fpn5               : (3745, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn5,gpu_0/rpn_bbox_pred_fpn5,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_rois_fpn5               : (3745, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn5               : (3745, 5)            ------|
INFO net.py: 240: fpn_res5_2_sum_subsampled_2x: (2, 256, 13, 13)     => conv_rpn_fpn6               : (2, 256, 13, 13)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 13, 13)     => conv_rpn_fpn6               : (2, 256, 13, 13)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 13, 13)     => rpn_cls_logits_fpn6         : (2, 3, 13, 13)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 13, 13)     => rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 13, 13)       => rpn_cls_probs_fpn6          : (2, 3, 13, 13)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn6          : (2, 3, 13, 13)       => rpn_rois_fpn6               : (1007, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn6,gpu_0/rpn_bbox_pred_fpn6,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => rpn_rois_fpn6               : (1007, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn6               : (1007, 5)            ------|
INFO net.py: 240: rpn_rois_fpn2               : (3998, 5)            => rois                        : (1024, 5)            ------- (op: Python:CollectAndDistributeFpnRpnProposalsOp:gpu_0/rpn_rois_fpn2,gpu_0/rpn_rois_fpn3,gpu_0/rpn_rois_fpn4,gpu_0/rpn_rois_fpn5,gpu_0/rpn_rois_fpn6,gpu_0/rpn_roi_probs_fpn2,gpu_0/rpn_roi_probs_fpn3,gpu_0/rpn_roi_probs_fpn4,gpu_0/rpn_roi_probs_fpn5,gpu_0/rpn_roi_probs_fpn6,gpu_0/roidb,gpu_0/im_info)
INFO net.py: 240: rpn_rois_fpn3               : (3999, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn4               : (3997, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn5               : (3745, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn6               : (1007, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn2          : (3998, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn3          : (3999, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn4          : (3997, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn5          : (3745, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn6          : (1007, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: roidb                       : (25072,)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn2  : (2, 3, 336, 336)     => rpn_labels_int32_fpn2       : (2, 3, 200, 200)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 200, 200)     => rpn_labels_int32_fpn2       : (2, 3, 200, 200)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn2  : (2, 12, 336, 336)    => rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 200, 200)     => loss_rpn_cls_fpn2           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn2       : (2, 3, 200, 200)     => loss_rpn_cls_fpn2           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn3  : (2, 3, 168, 168)     => rpn_labels_int32_fpn3       : (2, 3, 100, 100)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 100, 100)     => rpn_labels_int32_fpn3       : (2, 3, 100, 100)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn3  : (2, 12, 168, 168)    => rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 100, 100)     => loss_rpn_cls_fpn3           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn3       : (2, 3, 100, 100)     => loss_rpn_cls_fpn3           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn4  : (2, 3, 84, 84)       => rpn_labels_int32_fpn4       : (2, 3, 50, 50)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 50, 50)       => rpn_labels_int32_fpn4       : (2, 3, 50, 50)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn4  : (2, 12, 84, 84)      => rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 50, 50)       => loss_rpn_cls_fpn4           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn4       : (2, 3, 50, 50)       => loss_rpn_cls_fpn4           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn5  : (2, 3, 42, 42)       => rpn_labels_int32_fpn5       : (2, 3, 25, 25)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 25, 25)       => rpn_labels_int32_fpn5       : (2, 3, 25, 25)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn5  : (2, 12, 42, 42)      => rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 25, 25)       => loss_rpn_cls_fpn5           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn5       : (2, 3, 25, 25)       => loss_rpn_cls_fpn5           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn6  : (2, 3, 21, 21)       => rpn_labels_int32_fpn6       : (2, 3, 13, 13)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 13, 13)       => rpn_labels_int32_fpn6       : (2, 3, 13, 13)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn6  : (2, 12, 21, 21)      => rpn_bbox_targets_fpn6       : (2, 12, 13, 13)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => rpn_bbox_targets_fpn6       : (2, 12, 13, 13)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn6: (2, 12, 21, 21)      => rpn_bbox_inside_weights_fpn6: (2, 12, 13, 13)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => rpn_bbox_inside_weights_fpn6: (2, 12, 13, 13)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn6: (2, 12, 21, 21)      => rpn_bbox_outside_weights_fpn6: (2, 12, 13, 13)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => rpn_bbox_outside_weights_fpn6: (2, 12, 13, 13)      ------|
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 13, 13)       => loss_rpn_cls_fpn6           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn6       : (2, 3, 13, 13)       => loss_rpn_cls_fpn6           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => loss_rpn_bbox_fpn6          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn6       : (2, 12, 13, 13)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn6: (2, 12, 13, 13)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn6: (2, 12, 13, 13)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 200, 200)   => roi_feat_fpn2               : (1021, 256, 7, 7)    ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn2                   : (1021, 5)            => roi_feat_fpn2               : (1021, 256, 7, 7)    ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 100, 100)   => roi_feat_fpn3               : (3, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn3                   : (3, 5)               => roi_feat_fpn3               : (3, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 50, 50)     => roi_feat_fpn4               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn4                   : (0, 5)               => roi_feat_fpn4               : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => roi_feat_fpn5               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn5                   : (0, 5)               => roi_feat_fpn5               : (0, 256, 7, 7)       ------|
INFO net.py: 240: roi_feat_fpn2               : (1021, 256, 7, 7)    => roi_feat_shuffled           : (1024, 256, 7, 7)    ------- (op: Concat)
INFO net.py: 240: roi_feat_fpn3               : (3, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn4               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn5               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_shuffled           : (1024, 256, 7, 7)    => roi_feat                    : (1024, 256, 7, 7)    ------- (op: BatchPermutation)
INFO net.py: 240: rois_idx_restore_int32      : (1024,)              => roi_feat                    : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat                    : (1024, 256, 7, 7)    => fc6                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc6                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc7                         : (1024, 1024)         => cls_score                   : (1024, 2)            ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => bbox_pred                   : (1024, 8)            ------- (op: FC)
INFO net.py: 240: cls_score                   : (1024, 2)            => cls_prob                    : (1024, 2)            ------- (op: SoftmaxWithLoss)
INFO net.py: 240: labels_int32                : (1024,)              => cls_prob                    : (1024, 2)            ------|
INFO net.py: 240: bbox_pred                   : (1024, 8)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: bbox_targets                : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_inside_weights         : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_outside_weights        : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: cls_prob                    : (1024, 2)            => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 240: labels_int32                : (1024,)              => accuracy_cls                : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 200, 200)   => _[mask]_roi_feat_fpn2       : (38, 256, 7, 7)      ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn2              : (38, 5)              => _[mask]_roi_feat_fpn2       : (38, 256, 7, 7)      ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 100, 100)   => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn3              : (0, 5)               => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 50, 50)     => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn4              : (0, 5)               => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn5              : (0, 5)               => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------|
INFO net.py: 240: _[mask]_roi_feat_fpn2       : (38, 256, 7, 7)      => _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      ------- (op: Concat)
INFO net.py: 240: _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      => _[mask]_roi_feat            : (38, 256, 7, 7)      ------- (op: BatchPermutation)
INFO net.py: 240: mask_rois_idx_restore_int32 : (38,)                => _[mask]_roi_feat            : (38, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat            : (38, 256, 7, 7)      => _[mask]_fcn1                : (38, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn1                : (38, 256, 7, 7)      => _[mask]_fcn1                : (38, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn1                : (38, 256, 7, 7)      => _[mask]_fcn2                : (38, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn2                : (38, 256, 7, 7)      => _[mask]_fcn2                : (38, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn2                : (38, 256, 7, 7)      => _[mask]_fcn3                : (38, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn3                : (38, 256, 7, 7)      => _[mask]_fcn3                : (38, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn3                : (38, 256, 7, 7)      => _[mask]_fcn4                : (38, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn4                : (38, 256, 7, 7)      => _[mask]_fcn4                : (38, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn4                : (38, 256, 7, 7)      => conv5_mask                  : (38, 256, 14, 14)    ------- (op: ConvTranspose)
INFO net.py: 240: conv5_mask                  : (38, 256, 14, 14)    => conv5_mask                  : (38, 256, 14, 14)    ------- (op: Relu)
INFO net.py: 240: conv5_mask                  : (38, 256, 14, 14)    => mask_fcn_logits             : (38, 2, 14, 14)      ------- (op: Conv)
INFO net.py: 240: mask_fcn_logits             : (38, 2, 14, 14)      => loss_mask                   : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: masks_int32                 : (38, 392)            => loss_mask                   : ()                   ------|
INFO net.py: 244: End of model: generalized_rcnn
json_stats: {"accuracy_cls": 0.372070, "eta": "6 days, 3:33:27", "iter": 0, "loss": 5.636578, "loss_bbox": 0.002865, "loss_cls": 0.707377, "loss_mask": 4.202147, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007733, "loss_rpn_bbox_fpn4": 0.023925, "loss_rpn_bbox_fpn5": 0.012890, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.479240, "loss_rpn_cls_fpn3": 0.116917, "loss_rpn_cls_fpn4": 0.057726, "loss_rpn_cls_fpn5": 0.024502, "loss_rpn_cls_fpn6": 0.001255, "lr": 0.001000, "mb_qsize": 64, "mem": 4985, "time": 5.902302}
json_stats: {"accuracy_cls": 0.903351, "eta": "20:02:30", "iter": 20, "loss": 1.935890, "loss_bbox": 0.009371, "loss_cls": 0.274339, "loss_mask": 0.734692, "loss_rpn_bbox_fpn2": 0.002871, "loss_rpn_bbox_fpn3": 0.015764, "loss_rpn_bbox_fpn4": 0.048016, "loss_rpn_bbox_fpn5": 0.017542, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.263767, "loss_rpn_cls_fpn3": 0.114482, "loss_rpn_cls_fpn4": 0.085422, "loss_rpn_cls_fpn5": 0.029793, "loss_rpn_cls_fpn6": 0.002666, "lr": 0.001080, "mb_qsize": 64, "mem": 6397, "time": 0.801850}
json_stats: {"accuracy_cls": 0.928711, "eta": "11:57:28", "iter": 40, "loss": 1.087168, "loss_bbox": 0.093769, "loss_cls": 0.188559, "loss_mask": 0.443372, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007832, "loss_rpn_bbox_fpn4": 0.029634, "loss_rpn_bbox_fpn5": 0.015217, "loss_rpn_bbox_fpn6": 0.001178, "loss_rpn_cls_fpn2": 0.015546, "loss_rpn_cls_fpn3": 0.069559, "loss_rpn_cls_fpn4": 0.067393, "loss_rpn_cls_fpn5": 0.028449, "loss_rpn_cls_fpn6": 0.002588, "lr": 0.001160, "mb_qsize": 64, "mem": 6410, "time": 0.478531}
json_stats: {"accuracy_cls": 0.932617, "eta": "12:09:57", "iter": 60, "loss": 1.027217, "loss_bbox": 0.089106, "loss_cls": 0.208250, "loss_mask": 0.448825, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.008619, "loss_rpn_bbox_fpn4": 0.026349, "loss_rpn_bbox_fpn5": 0.011203, "loss_rpn_bbox_fpn6": 0.007234, "loss_rpn_cls_fpn2": 0.006460, "loss_rpn_cls_fpn3": 0.045829, "loss_rpn_cls_fpn4": 0.049471, "loss_rpn_cls_fpn5": 0.022685, "loss_rpn_cls_fpn6": 0.012918, "lr": 0.001240, "mb_qsize": 64, "mem": 6427, "time": 0.486966}
json_stats: {"accuracy_cls": 0.890308, "eta": "12:09:30", "iter": 80, "loss": 1.099443, "loss_bbox": 0.139232, "loss_cls": 0.293871, "loss_mask": 0.341026, "loss_rpn_bbox_fpn2": 0.000780, "loss_rpn_bbox_fpn3": 0.005638, "loss_rpn_bbox_fpn4": 0.018444, "loss_rpn_bbox_fpn5": 0.029915, "loss_rpn_bbox_fpn6": 0.003587, "loss_rpn_cls_fpn2": 0.009250, "loss_rpn_cls_fpn3": 0.027307, "loss_rpn_cls_fpn4": 0.047784, "loss_rpn_cls_fpn5": 0.055204, "loss_rpn_cls_fpn6": 0.005663, "lr": 0.001320, "mb_qsize": 64, "mem": 6429, "time": 0.486772}
json_stats: {"accuracy_cls": 0.907715, "eta": "12:11:43", "iter": 100, "loss": 0.988011, "loss_bbox": 0.113895, "loss_cls": 0.227628, "loss_mask": 0.316778, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007609, "loss_rpn_bbox_fpn4": 0.022706, "loss_rpn_bbox_fpn5": 0.021482, "loss_rpn_bbox_fpn6": 0.003325, "loss_rpn_cls_fpn2": 0.006263, "loss_rpn_cls_fpn3": 0.035775, "loss_rpn_cls_fpn4": 0.052012, "loss_rpn_cls_fpn5": 0.039787, "loss_rpn_cls_fpn6": 0.004141, "lr": 0.001400, "mb_qsize": 64, "mem": 6429, "time": 0.488362}
json_stats: {"accuracy_cls": 0.942383, "eta": "12:08:16", "iter": 120, "loss": 0.777486, "loss_bbox": 0.093061, "loss_cls": 0.144529, "loss_mask": 0.272501, "loss_rpn_bbox_fpn2": 0.000920, "loss_rpn_bbox_fpn3": 0.008721, "loss_rpn_bbox_fpn4": 0.015413, "loss_rpn_bbox_fpn5": 0.012409, "loss_rpn_bbox_fpn6": 0.000333, "loss_rpn_cls_fpn2": 0.009892, "loss_rpn_cls_fpn3": 0.037009, "loss_rpn_cls_fpn4": 0.044039, "loss_rpn_cls_fpn5": 0.030582, "loss_rpn_cls_fpn6": 0.003352, "lr": 0.001480, "mb_qsize": 64, "mem": 6429, "time": 0.486161}
json_stats: {"accuracy_cls": 0.932129, "eta": "12:10:04", "iter": 140, "loss": 0.822822, "loss_bbox": 0.087724, "loss_cls": 0.179856, "loss_mask": 0.313960, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.010574, "loss_rpn_bbox_fpn4": 0.025665, "loss_rpn_bbox_fpn5": 0.015485, "loss_rpn_bbox_fpn6": 0.004438, "loss_rpn_cls_fpn2": 0.004419, "loss_rpn_cls_fpn3": 0.043027, "loss_rpn_cls_fpn4": 0.053450, "loss_rpn_cls_fpn5": 0.025798, "loss_rpn_cls_fpn6": 0.005941, "lr": 0.001560, "mb_qsize": 64, "mem": 6435, "time": 0.487476}
json_stats: {"accuracy_cls": 0.914551, "eta": "12:10:02", "iter": 160, "loss": 0.901222, "loss_bbox": 0.089708, "loss_cls": 0.226785, "loss_mask": 0.303901, "loss_rpn_bbox_fpn2": 0.000556, "loss_rpn_bbox_fpn3": 0.009861, "loss_rpn_bbox_fpn4": 0.020946, "loss_rpn_bbox_fpn5": 0.032884, "loss_rpn_bbox_fpn6": 0.003244, "loss_rpn_cls_fpn2": 0.010845, "loss_rpn_cls_fpn3": 0.038693, "loss_rpn_cls_fpn4": 0.041012, "loss_rpn_cls_fpn5": 0.050727, "loss_rpn_cls_fpn6": 0.006041, "lr": 0.001640, "mb_qsize": 64, "mem": 6440, "time": 0.487563}
json_stats: {"accuracy_cls": 0.947729, "eta": "12:15:59", "iter": 180, "loss": 0.726442, "loss_bbox": 0.067183, "loss_cls": 0.140697, "loss_mask": 0.278410, "loss_rpn_bbox_fpn2": 0.000363, "loss_rpn_bbox_fpn3": 0.005179, "loss_rpn_bbox_fpn4": 0.013041, "loss_rpn_bbox_fpn5": 0.011521, "loss_rpn_bbox_fpn6": 0.008406, "loss_rpn_cls_fpn2": 0.007467, "loss_rpn_cls_fpn3": 0.024621, "loss_rpn_cls_fpn4": 0.029792, "loss_rpn_cls_fpn5": 0.020827, "loss_rpn_cls_fpn6": 0.011935, "lr": 0.001720, "mb_qsize": 64, "mem": 7579, "time": 0.491645}
json_stats: {"accuracy_cls": 0.935547, "eta": "12:12:33", "iter": 200, "loss": 0.751132, "loss_bbox": 0.127188, "loss_cls": 0.170910, "loss_mask": 0.263175, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007699, "loss_rpn_bbox_fpn4": 0.013520, "loss_rpn_bbox_fpn5": 0.017579, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005036, "loss_rpn_cls_fpn3": 0.025687, "loss_rpn_cls_fpn4": 0.029854, "loss_rpn_cls_fpn5": 0.032251, "loss_rpn_cls_fpn6": 0.004072, "lr": 0.001800, "mb_qsize": 64, "mem": 7579, "time": 0.489459}
json_stats: {"accuracy_cls": 0.942871, "eta": "12:12:02", "iter": 220, "loss": 0.694014, "loss_bbox": 0.102735, "loss_cls": 0.154394, "loss_mask": 0.245261, "loss_rpn_bbox_fpn2": 0.001004, "loss_rpn_bbox_fpn3": 0.004594, "loss_rpn_bbox_fpn4": 0.011550, "loss_rpn_bbox_fpn5": 0.013304, "loss_rpn_bbox_fpn6": 0.003485, "loss_rpn_cls_fpn2": 0.006652, "loss_rpn_cls_fpn3": 0.020072, "loss_rpn_cls_fpn4": 0.025873, "loss_rpn_cls_fpn5": 0.022530, "loss_rpn_cls_fpn6": 0.005931, "lr": 0.001880, "mb_qsize": 64, "mem": 7584, "time": 0.489220}
json_stats: {"accuracy_cls": 0.936035, "eta": "12:13:29", "iter": 240, "loss": 0.673513, "loss_bbox": 0.096097, "loss_cls": 0.155724, "loss_mask": 0.254853, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007558, "loss_rpn_bbox_fpn4": 0.011816, "loss_rpn_bbox_fpn5": 0.014362, "loss_rpn_bbox_fpn6": 0.001607, "loss_rpn_cls_fpn2": 0.008039, "loss_rpn_cls_fpn3": 0.023816, "loss_rpn_cls_fpn4": 0.022450, "loss_rpn_cls_fpn5": 0.021347, "loss_rpn_cls_fpn6": 0.004665, "lr": 0.001960, "mb_qsize": 64, "mem": 7584, "time": 0.490301}
json_stats: {"accuracy_cls": 0.901847, "eta": "12:14:07", "iter": 260, "loss": 0.834377, "loss_bbox": 0.159060, "loss_cls": 0.220472, "loss_mask": 0.280908, "loss_rpn_bbox_fpn2": 0.002269, "loss_rpn_bbox_fpn3": 0.007442, "loss_rpn_bbox_fpn4": 0.024991, "loss_rpn_bbox_fpn5": 0.013389, "loss_rpn_bbox_fpn6": 0.006313, "loss_rpn_cls_fpn2": 0.013111, "loss_rpn_cls_fpn3": 0.023708, "loss_rpn_cls_fpn4": 0.032292, "loss_rpn_cls_fpn5": 0.019309, "loss_rpn_cls_fpn6": 0.003851, "lr": 0.002040, "mb_qsize": 64, "mem": 7584, "time": 0.490834}
json_stats: {"accuracy_cls": 0.919434, "eta": "12:14:36", "iter": 280, "loss": 0.847168, "loss_bbox": 0.168748, "loss_cls": 0.213272, "loss_mask": 0.246954, "loss_rpn_bbox_fpn2": 0.000766, "loss_rpn_bbox_fpn3": 0.011990, "loss_rpn_bbox_fpn4": 0.015308, "loss_rpn_bbox_fpn5": 0.013292, "loss_rpn_bbox_fpn6": 0.000816, "loss_rpn_cls_fpn2": 0.007840, "loss_rpn_cls_fpn3": 0.024969, "loss_rpn_cls_fpn4": 0.021123, "loss_rpn_cls_fpn5": 0.016967, "loss_rpn_cls_fpn6": 0.002588, "lr": 0.002120, "mb_qsize": 64, "mem": 7584, "time": 0.491271}
json_stats: {"accuracy_cls": 0.896973, "eta": "12:14:35", "iter": 300, "loss": 0.878512, "loss_bbox": 0.186879, "loss_cls": 0.250326, "loss_mask": 0.240437, "loss_rpn_bbox_fpn2": 0.000283, "loss_rpn_bbox_fpn3": 0.008856, "loss_rpn_bbox_fpn4": 0.012560, "loss_rpn_bbox_fpn5": 0.018655, "loss_rpn_bbox_fpn6": 0.004314, "loss_rpn_cls_fpn2": 0.006628, "loss_rpn_cls_fpn3": 0.018882, "loss_rpn_cls_fpn4": 0.022107, "loss_rpn_cls_fpn5": 0.017530, "loss_rpn_cls_fpn6": 0.002615, "lr": 0.002200, "mb_qsize": 64, "mem": 7585, "time": 0.491367}
json_stats: {"accuracy_cls": 0.884554, "eta": "12:15:30", "iter": 320, "loss": 0.942511, "loss_bbox": 0.195212, "loss_cls": 0.262490, "loss_mask": 0.265877, "loss_rpn_bbox_fpn2": 0.001171, "loss_rpn_bbox_fpn3": 0.005777, "loss_rpn_bbox_fpn4": 0.011815, "loss_rpn_bbox_fpn5": 0.025325, "loss_rpn_bbox_fpn6": 0.002316, "loss_rpn_cls_fpn2": 0.008463, "loss_rpn_cls_fpn3": 0.020614, "loss_rpn_cls_fpn4": 0.019189, "loss_rpn_cls_fpn5": 0.016845, "loss_rpn_cls_fpn6": 0.002493, "lr": 0.002280, "mb_qsize": 64, "mem": 7585, "time": 0.492091}
json_stats: {"accuracy_cls": 0.865980, "eta": "12:17:51", "iter": 340, "loss": 0.940266, "loss_bbox": 0.220344, "loss_cls": 0.285126, "loss_mask": 0.248841, "loss_rpn_bbox_fpn2": 0.001004, "loss_rpn_bbox_fpn3": 0.009314, "loss_rpn_bbox_fpn4": 0.023232, "loss_rpn_bbox_fpn5": 0.031956, "loss_rpn_bbox_fpn6": 0.000736, "loss_rpn_cls_fpn2": 0.007999, "loss_rpn_cls_fpn3": 0.021379, "loss_rpn_cls_fpn4": 0.020796, "loss_rpn_cls_fpn5": 0.020712, "loss_rpn_cls_fpn6": 0.003761, "lr": 0.002360, "mb_qsize": 64, "mem": 7590, "time": 0.493770}
json_stats: {"accuracy_cls": 0.832520, "eta": "12:19:21", "iter": 360, "loss": 1.075132, "loss_bbox": 0.277065, "loss_cls": 0.361678, "loss_mask": 0.228589, "loss_rpn_bbox_fpn2": 0.001341, "loss_rpn_bbox_fpn3": 0.008567, "loss_rpn_bbox_fpn4": 0.035817, "loss_rpn_bbox_fpn5": 0.032279, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008270, "loss_rpn_cls_fpn3": 0.020973, "loss_rpn_cls_fpn4": 0.024574, "loss_rpn_cls_fpn5": 0.011435, "loss_rpn_cls_fpn6": 0.002228, "lr": 0.002440, "mb_qsize": 64, "mem": 7590, "time": 0.494884}
json_stats: {"accuracy_cls": 0.867676, "eta": "12:19:52", "iter": 380, "loss": 0.928036, "loss_bbox": 0.259975, "loss_cls": 0.293838, "loss_mask": 0.258548, "loss_rpn_bbox_fpn2": 0.000316, "loss_rpn_bbox_fpn3": 0.006636, "loss_rpn_bbox_fpn4": 0.015722, "loss_rpn_bbox_fpn5": 0.012393, "loss_rpn_bbox_fpn6": 0.003194, "loss_rpn_cls_fpn2": 0.004684, "loss_rpn_cls_fpn3": 0.016230, "loss_rpn_cls_fpn4": 0.020600, "loss_rpn_cls_fpn5": 0.010103, "loss_rpn_cls_fpn6": 0.001509, "lr": 0.002520, "mb_qsize": 64, "mem": 7595, "time": 0.495343}
json_stats: {"accuracy_cls": 0.871582, "eta": "12:20:02", "iter": 400, "loss": 0.894585, "loss_bbox": 0.215243, "loss_cls": 0.289575, "loss_mask": 0.233598, "loss_rpn_bbox_fpn2": 0.000741, "loss_rpn_bbox_fpn3": 0.008976, "loss_rpn_bbox_fpn4": 0.026217, "loss_rpn_bbox_fpn5": 0.012932, "loss_rpn_bbox_fpn6": 0.002000, "loss_rpn_cls_fpn2": 0.004887, "loss_rpn_cls_fpn3": 0.022966, "loss_rpn_cls_fpn4": 0.019325, "loss_rpn_cls_fpn5": 0.007581, "loss_rpn_cls_fpn6": 0.002883, "lr": 0.002600, "mb_qsize": 64, "mem": 7595, "time": 0.495558}
json_stats: {"accuracy_cls": 0.876953, "eta": "12:21:01", "iter": 420, "loss": 0.964367, "loss_bbox": 0.274559, "loss_cls": 0.283362, "loss_mask": 0.257860, "loss_rpn_bbox_fpn2": 0.001236, "loss_rpn_bbox_fpn3": 0.011368, "loss_rpn_bbox_fpn4": 0.032414, "loss_rpn_bbox_fpn5": 0.013957, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005365, "loss_rpn_cls_fpn3": 0.019267, "loss_rpn_cls_fpn4": 0.020686, "loss_rpn_cls_fpn5": 0.011403, "loss_rpn_cls_fpn6": 0.001586, "lr": 0.002680, "mb_qsize": 64, "mem": 7600, "time": 0.496332}
json_stats: {"accuracy_cls": 0.861816, "eta": "12:21:47", "iter": 440, "loss": 0.953854, "loss_bbox": 0.248648, "loss_cls": 0.305802, "loss_mask": 0.229955, "loss_rpn_bbox_fpn2": 0.001775, "loss_rpn_bbox_fpn3": 0.006122, "loss_rpn_bbox_fpn4": 0.017020, "loss_rpn_bbox_fpn5": 0.020094, "loss_rpn_bbox_fpn6": 0.003286, "loss_rpn_cls_fpn2": 0.009296, "loss_rpn_cls_fpn3": 0.015863, "loss_rpn_cls_fpn4": 0.019351, "loss_rpn_cls_fpn5": 0.010066, "loss_rpn_cls_fpn6": 0.002354, "lr": 0.002760, "mb_qsize": 64, "mem": 7601, "time": 0.496961}
json_stats: {"accuracy_cls": 0.861036, "eta": "12:22:24", "iter": 460, "loss": 0.923915, "loss_bbox": 0.213178, "loss_cls": 0.328301, "loss_mask": 0.239969, "loss_rpn_bbox_fpn2": 0.001071, "loss_rpn_bbox_fpn3": 0.005361, "loss_rpn_bbox_fpn4": 0.009502, "loss_rpn_bbox_fpn5": 0.027064, "loss_rpn_bbox_fpn6": 0.004132, "loss_rpn_cls_fpn2": 0.006136, "loss_rpn_cls_fpn3": 0.013626, "loss_rpn_cls_fpn4": 0.014574, "loss_rpn_cls_fpn5": 0.011437, "loss_rpn_cls_fpn6": 0.002125, "lr": 0.002840, "mb_qsize": 64, "mem": 7601, "time": 0.497481}
json_stats: {"accuracy_cls": 0.878481, "eta": "12:22:19", "iter": 480, "loss": 0.859657, "loss_bbox": 0.227016, "loss_cls": 0.280829, "loss_mask": 0.197222, "loss_rpn_bbox_fpn2": 0.001723, "loss_rpn_bbox_fpn3": 0.006463, "loss_rpn_bbox_fpn4": 0.022926, "loss_rpn_bbox_fpn5": 0.014754, "loss_rpn_bbox_fpn6": 0.004078, "loss_rpn_cls_fpn2": 0.005370, "loss_rpn_cls_fpn3": 0.014141, "loss_rpn_cls_fpn4": 0.015309, "loss_rpn_cls_fpn5": 0.011468, "loss_rpn_cls_fpn6": 0.001701, "lr": 0.002920, "mb_qsize": 64, "mem": 7602, "time": 0.497533}
json_stats: {"accuracy_cls": 0.851493, "eta": "12:22:31", "iter": 500, "loss": 0.959269, "loss_bbox": 0.257847, "loss_cls": 0.322888, "loss_mask": 0.246366, "loss_rpn_bbox_fpn2": 0.000302, "loss_rpn_bbox_fpn3": 0.006859, "loss_rpn_bbox_fpn4": 0.011519, "loss_rpn_bbox_fpn5": 0.011733, "loss_rpn_bbox_fpn6": 0.000787, "loss_rpn_cls_fpn2": 0.003383, "loss_rpn_cls_fpn3": 0.013657, "loss_rpn_cls_fpn4": 0.011739, "loss_rpn_cls_fpn5": 0.005688, "loss_rpn_cls_fpn6": 0.000693, "lr": 0.003000, "mb_qsize": 64, "mem": 7602, "time": 0.497782}
json_stats: {"accuracy_cls": 0.863718, "eta": "12:23:14", "iter": 520, "loss": 0.953340, "loss_bbox": 0.275850, "loss_cls": 0.314102, "loss_mask": 0.229652, "loss_rpn_bbox_fpn2": 0.000892, "loss_rpn_bbox_fpn3": 0.006818, "loss_rpn_bbox_fpn4": 0.016892, "loss_rpn_bbox_fpn5": 0.015528, "loss_rpn_bbox_fpn6": 0.000535, "loss_rpn_cls_fpn2": 0.004467, "loss_rpn_cls_fpn3": 0.012357, "loss_rpn_cls_fpn4": 0.013531, "loss_rpn_cls_fpn5": 0.007064, "loss_rpn_cls_fpn6": 0.001357, "lr": 0.003000, "mb_qsize": 64, "mem": 7602, "time": 0.498374}
json_stats: {"accuracy_cls": 0.865723, "eta": "12:24:00", "iter": 540, "loss": 0.898727, "loss_bbox": 0.229691, "loss_cls": 0.306860, "loss_mask": 0.214980, "loss_rpn_bbox_fpn2": 0.000950, "loss_rpn_bbox_fpn3": 0.010218, "loss_rpn_bbox_fpn4": 0.012113, "loss_rpn_bbox_fpn5": 0.011351, "loss_rpn_bbox_fpn6": 0.001278, "loss_rpn_cls_fpn2": 0.003881, "loss_rpn_cls_fpn3": 0.016442, "loss_rpn_cls_fpn4": 0.012901, "loss_rpn_cls_fpn5": 0.008621, "loss_rpn_cls_fpn6": 0.003037, "lr": 0.003000, "mb_qsize": 64, "mem": 7606, "time": 0.498994}
json_stats: {"accuracy_cls": 0.865234, "eta": "12:23:50", "iter": 560, "loss": 0.922173, "loss_bbox": 0.222777, "loss_cls": 0.312006, "loss_mask": 0.235514, "loss_rpn_bbox_fpn2": 0.000547, "loss_rpn_bbox_fpn3": 0.008362, "loss_rpn_bbox_fpn4": 0.018119, "loss_rpn_bbox_fpn5": 0.015539, "loss_rpn_bbox_fpn6": 0.001174, "loss_rpn_cls_fpn2": 0.003323, "loss_rpn_cls_fpn3": 0.023063, "loss_rpn_cls_fpn4": 0.014468, "loss_rpn_cls_fpn5": 0.010866, "loss_rpn_cls_fpn6": 0.000872, "lr": 0.003000, "mb_qsize": 64, "mem": 7606, "time": 0.498999}
json_stats: {"accuracy_cls": 0.870239, "eta": "12:23:46", "iter": 580, "loss": 0.940402, "loss_bbox": 0.247679, "loss_cls": 0.299266, "loss_mask": 0.238798, "loss_rpn_bbox_fpn2": 0.002327, "loss_rpn_bbox_fpn3": 0.007491, "loss_rpn_bbox_fpn4": 0.008731, "loss_rpn_bbox_fpn5": 0.016146, "loss_rpn_bbox_fpn6": 0.002754, "loss_rpn_cls_fpn2": 0.006158, "loss_rpn_cls_fpn3": 0.010861, "loss_rpn_cls_fpn4": 0.013988, "loss_rpn_cls_fpn5": 0.009763, "loss_rpn_cls_fpn6": 0.001898, "lr": 0.003000, "mb_qsize": 64, "mem": 7606, "time": 0.499071}
json_stats: {"accuracy_cls": 0.866374, "eta": "12:24:03", "iter": 600, "loss": 0.905389, "loss_bbox": 0.258037, "loss_cls": 0.305638, "loss_mask": 0.222209, "loss_rpn_bbox_fpn2": 0.001995, "loss_rpn_bbox_fpn3": 0.007407, "loss_rpn_bbox_fpn4": 0.019525, "loss_rpn_bbox_fpn5": 0.017185, "loss_rpn_bbox_fpn6": 0.000045, "loss_rpn_cls_fpn2": 0.006024, "loss_rpn_cls_fpn3": 0.014212, "loss_rpn_cls_fpn4": 0.013069, "loss_rpn_cls_fpn5": 0.008887, "loss_rpn_cls_fpn6": 0.000926, "lr": 0.003000, "mb_qsize": 64, "mem": 7606, "time": 0.499367}
json_stats: {"accuracy_cls": 0.872391, "eta": "12:24:42", "iter": 620, "loss": 0.870989, "loss_bbox": 0.247329, "loss_cls": 0.304673, "loss_mask": 0.220040, "loss_rpn_bbox_fpn2": 0.001103, "loss_rpn_bbox_fpn3": 0.009558, "loss_rpn_bbox_fpn4": 0.024491, "loss_rpn_bbox_fpn5": 0.009449, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003875, "loss_rpn_cls_fpn3": 0.012166, "loss_rpn_cls_fpn4": 0.012528, "loss_rpn_cls_fpn5": 0.006265, "loss_rpn_cls_fpn6": 0.000746, "lr": 0.003000, "mb_qsize": 64, "mem": 7607, "time": 0.499915}
json_stats: {"accuracy_cls": 0.878418, "eta": "12:24:31", "iter": 640, "loss": 0.834217, "loss_bbox": 0.231528, "loss_cls": 0.277546, "loss_mask": 0.212626, "loss_rpn_bbox_fpn2": 0.000073, "loss_rpn_bbox_fpn3": 0.006544, "loss_rpn_bbox_fpn4": 0.015459, "loss_rpn_bbox_fpn5": 0.018353, "loss_rpn_bbox_fpn6": 0.001872, "loss_rpn_cls_fpn2": 0.003051, "loss_rpn_cls_fpn3": 0.014967, "loss_rpn_cls_fpn4": 0.009250, "loss_rpn_cls_fpn5": 0.010673, "loss_rpn_cls_fpn6": 0.000665, "lr": 0.003000, "mb_qsize": 64, "mem": 7607, "time": 0.499903}
json_stats: {"accuracy_cls": 0.877661, "eta": "12:24:08", "iter": 660, "loss": 0.812083, "loss_bbox": 0.246810, "loss_cls": 0.282414, "loss_mask": 0.191467, "loss_rpn_bbox_fpn2": 0.000858, "loss_rpn_bbox_fpn3": 0.004764, "loss_rpn_bbox_fpn4": 0.016669, "loss_rpn_bbox_fpn5": 0.009743, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002837, "loss_rpn_cls_fpn3": 0.016613, "loss_rpn_cls_fpn4": 0.012484, "loss_rpn_cls_fpn5": 0.006007, "loss_rpn_cls_fpn6": 0.001037, "lr": 0.003000, "mb_qsize": 64, "mem": 7608, "time": 0.499764}
json_stats: {"accuracy_cls": 0.877901, "eta": "12:25:01", "iter": 680, "loss": 0.847668, "loss_bbox": 0.249753, "loss_cls": 0.285306, "loss_mask": 0.236777, "loss_rpn_bbox_fpn2": 0.000773, "loss_rpn_bbox_fpn3": 0.005445, "loss_rpn_bbox_fpn4": 0.017413, "loss_rpn_bbox_fpn5": 0.006756, "loss_rpn_bbox_fpn6": 0.000858, "loss_rpn_cls_fpn2": 0.003168, "loss_rpn_cls_fpn3": 0.010205, "loss_rpn_cls_fpn4": 0.013167, "loss_rpn_cls_fpn5": 0.007987, "loss_rpn_cls_fpn6": 0.001301, "lr": 0.003000, "mb_qsize": 64, "mem": 7608, "time": 0.500459}
json_stats: {"accuracy_cls": 0.883575, "eta": "12:25:12", "iter": 700, "loss": 0.903152, "loss_bbox": 0.247244, "loss_cls": 0.284686, "loss_mask": 0.217756, "loss_rpn_bbox_fpn2": 0.000250, "loss_rpn_bbox_fpn3": 0.004978, "loss_rpn_bbox_fpn4": 0.013902, "loss_rpn_bbox_fpn5": 0.010655, "loss_rpn_bbox_fpn6": 0.000024, "loss_rpn_cls_fpn2": 0.004227, "loss_rpn_cls_fpn3": 0.012152, "loss_rpn_cls_fpn4": 0.008567, "loss_rpn_cls_fpn5": 0.005125, "loss_rpn_cls_fpn6": 0.000350, "lr": 0.003000, "mb_qsize": 64, "mem": 7608, "time": 0.500703}
json_stats: {"accuracy_cls": 0.874086, "eta": "12:25:04", "iter": 720, "loss": 0.865563, "loss_bbox": 0.246127, "loss_cls": 0.297208, "loss_mask": 0.206626, "loss_rpn_bbox_fpn2": 0.000903, "loss_rpn_bbox_fpn3": 0.008325, "loss_rpn_bbox_fpn4": 0.016920, "loss_rpn_bbox_fpn5": 0.013286, "loss_rpn_bbox_fpn6": 0.000812, "loss_rpn_cls_fpn2": 0.001875, "loss_rpn_cls_fpn3": 0.017914, "loss_rpn_cls_fpn4": 0.008383, "loss_rpn_cls_fpn5": 0.007460, "loss_rpn_cls_fpn6": 0.000196, "lr": 0.003000, "mb_qsize": 64, "mem": 7608, "time": 0.500726}
json_stats: {"accuracy_cls": 0.871517, "eta": "12:25:17", "iter": 740, "loss": 0.802118, "loss_bbox": 0.232417, "loss_cls": 0.296270, "loss_mask": 0.204327, "loss_rpn_bbox_fpn2": 0.001216, "loss_rpn_bbox_fpn3": 0.005931, "loss_rpn_bbox_fpn4": 0.011674, "loss_rpn_bbox_fpn5": 0.013620, "loss_rpn_bbox_fpn6": 0.001294, "loss_rpn_cls_fpn2": 0.002819, "loss_rpn_cls_fpn3": 0.010775, "loss_rpn_cls_fpn4": 0.007171, "loss_rpn_cls_fpn5": 0.006043, "loss_rpn_cls_fpn6": 0.001071, "lr": 0.003000, "mb_qsize": 64, "mem": 7608, "time": 0.500985}
json_stats: {"accuracy_cls": 0.890137, "eta": "12:25:01", "iter": 760, "loss": 0.781039, "loss_bbox": 0.239151, "loss_cls": 0.275036, "loss_mask": 0.164054, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003065, "loss_rpn_bbox_fpn4": 0.011741, "loss_rpn_bbox_fpn5": 0.009338, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000911, "loss_rpn_cls_fpn3": 0.005752, "loss_rpn_cls_fpn4": 0.007529, "loss_rpn_cls_fpn5": 0.005496, "loss_rpn_cls_fpn6": 0.000353, "lr": 0.003000, "mb_qsize": 64, "mem": 7608, "time": 0.500918}
json_stats: {"accuracy_cls": 0.866699, "eta": "12:25:39", "iter": 780, "loss": 0.847810, "loss_bbox": 0.211285, "loss_cls": 0.306627, "loss_mask": 0.206389, "loss_rpn_bbox_fpn2": 0.000645, "loss_rpn_bbox_fpn3": 0.008443, "loss_rpn_bbox_fpn4": 0.019707, "loss_rpn_bbox_fpn5": 0.005728, "loss_rpn_bbox_fpn6": 0.002013, "loss_rpn_cls_fpn2": 0.002702, "loss_rpn_cls_fpn3": 0.009103, "loss_rpn_cls_fpn4": 0.012942, "loss_rpn_cls_fpn5": 0.005799, "loss_rpn_cls_fpn6": 0.000950, "lr": 0.003000, "mb_qsize": 64, "mem": 7608, "time": 0.501448}
json_stats: {"accuracy_cls": 0.851562, "eta": "12:26:25", "iter": 800, "loss": 1.003715, "loss_bbox": 0.276005, "loss_cls": 0.334971, "loss_mask": 0.258177, "loss_rpn_bbox_fpn2": 0.001071, "loss_rpn_bbox_fpn3": 0.006944, "loss_rpn_bbox_fpn4": 0.018341, "loss_rpn_bbox_fpn5": 0.023667, "loss_rpn_bbox_fpn6": 0.004306, "loss_rpn_cls_fpn2": 0.004772, "loss_rpn_cls_fpn3": 0.012038, "loss_rpn_cls_fpn4": 0.016033, "loss_rpn_cls_fpn5": 0.008525, "loss_rpn_cls_fpn6": 0.001456, "lr": 0.003000, "mb_qsize": 64, "mem": 7608, "time": 0.502083}
json_stats: {"accuracy_cls": 0.889579, "eta": "12:26:35", "iter": 820, "loss": 0.843797, "loss_bbox": 0.232540, "loss_cls": 0.257624, "loss_mask": 0.232926, "loss_rpn_bbox_fpn2": 0.000572, "loss_rpn_bbox_fpn3": 0.006351, "loss_rpn_bbox_fpn4": 0.017218, "loss_rpn_bbox_fpn5": 0.014626, "loss_rpn_bbox_fpn6": 0.006784, "loss_rpn_cls_fpn2": 0.003230, "loss_rpn_cls_fpn3": 0.008869, "loss_rpn_cls_fpn4": 0.010937, "loss_rpn_cls_fpn5": 0.007404, "loss_rpn_cls_fpn6": 0.001956, "lr": 0.003000, "mb_qsize": 64, "mem": 7609, "time": 0.502308}
json_stats: {"accuracy_cls": 0.885507, "eta": "12:26:23", "iter": 840, "loss": 0.767745, "loss_bbox": 0.215471, "loss_cls": 0.258957, "loss_mask": 0.190720, "loss_rpn_bbox_fpn2": 0.000661, "loss_rpn_bbox_fpn3": 0.005369, "loss_rpn_bbox_fpn4": 0.012316, "loss_rpn_bbox_fpn5": 0.009088, "loss_rpn_bbox_fpn6": 0.004661, "loss_rpn_cls_fpn2": 0.002495, "loss_rpn_cls_fpn3": 0.009983, "loss_rpn_cls_fpn4": 0.010996, "loss_rpn_cls_fpn5": 0.009253, "loss_rpn_cls_fpn6": 0.001403, "lr": 0.003000, "mb_qsize": 64, "mem": 7609, "time": 0.502287}
json_stats: {"accuracy_cls": 0.877754, "eta": "12:26:03", "iter": 860, "loss": 0.817972, "loss_bbox": 0.236476, "loss_cls": 0.278502, "loss_mask": 0.189583, "loss_rpn_bbox_fpn2": 0.000756, "loss_rpn_bbox_fpn3": 0.003356, "loss_rpn_bbox_fpn4": 0.010437, "loss_rpn_bbox_fpn5": 0.013161, "loss_rpn_bbox_fpn6": 0.005109, "loss_rpn_cls_fpn2": 0.002897, "loss_rpn_cls_fpn3": 0.009400, "loss_rpn_cls_fpn4": 0.009098, "loss_rpn_cls_fpn5": 0.008402, "loss_rpn_cls_fpn6": 0.001403, "lr": 0.003000, "mb_qsize": 64, "mem": 7614, "time": 0.502173}
json_stats: {"accuracy_cls": 0.872284, "eta": "12:26:27", "iter": 880, "loss": 0.785566, "loss_bbox": 0.228151, "loss_cls": 0.290133, "loss_mask": 0.182706, "loss_rpn_bbox_fpn2": 0.001861, "loss_rpn_bbox_fpn3": 0.005012, "loss_rpn_bbox_fpn4": 0.009478, "loss_rpn_bbox_fpn5": 0.007930, "loss_rpn_bbox_fpn6": 0.006066, "loss_rpn_cls_fpn2": 0.002440, "loss_rpn_cls_fpn3": 0.012057, "loss_rpn_cls_fpn4": 0.011619, "loss_rpn_cls_fpn5": 0.007164, "loss_rpn_cls_fpn6": 0.001678, "lr": 0.003000, "mb_qsize": 64, "mem": 7614, "time": 0.502548}
json_stats: {"accuracy_cls": 0.878479, "eta": "12:26:36", "iter": 900, "loss": 0.837621, "loss_bbox": 0.234291, "loss_cls": 0.275959, "loss_mask": 0.217013, "loss_rpn_bbox_fpn2": 0.000669, "loss_rpn_bbox_fpn3": 0.005060, "loss_rpn_bbox_fpn4": 0.017221, "loss_rpn_bbox_fpn5": 0.017360, "loss_rpn_bbox_fpn6": 0.003007, "loss_rpn_cls_fpn2": 0.002554, "loss_rpn_cls_fpn3": 0.009343, "loss_rpn_cls_fpn4": 0.011246, "loss_rpn_cls_fpn5": 0.008135, "loss_rpn_cls_fpn6": 0.000911, "lr": 0.003000, "mb_qsize": 64, "mem": 7614, "time": 0.502763}
json_stats: {"accuracy_cls": 0.863523, "eta": "12:27:06", "iter": 920, "loss": 0.882940, "loss_bbox": 0.230724, "loss_cls": 0.312413, "loss_mask": 0.245054, "loss_rpn_bbox_fpn2": 0.000842, "loss_rpn_bbox_fpn3": 0.008484, "loss_rpn_bbox_fpn4": 0.019094, "loss_rpn_bbox_fpn5": 0.020722, "loss_rpn_bbox_fpn6": 0.003729, "loss_rpn_cls_fpn2": 0.004039, "loss_rpn_cls_fpn3": 0.012690, "loss_rpn_cls_fpn4": 0.012161, "loss_rpn_cls_fpn5": 0.008518, "loss_rpn_cls_fpn6": 0.002515, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.503217}
json_stats: {"accuracy_cls": 0.866699, "eta": "12:27:00", "iter": 940, "loss": 0.845357, "loss_bbox": 0.242535, "loss_cls": 0.304588, "loss_mask": 0.201614, "loss_rpn_bbox_fpn2": 0.000843, "loss_rpn_bbox_fpn3": 0.004144, "loss_rpn_bbox_fpn4": 0.010226, "loss_rpn_bbox_fpn5": 0.020925, "loss_rpn_bbox_fpn6": 0.000937, "loss_rpn_cls_fpn2": 0.003929, "loss_rpn_cls_fpn3": 0.007425, "loss_rpn_cls_fpn4": 0.010226, "loss_rpn_cls_fpn5": 0.005906, "loss_rpn_cls_fpn6": 0.001234, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.503264}
json_stats: {"accuracy_cls": 0.880399, "eta": "12:26:44", "iter": 960, "loss": 0.767469, "loss_bbox": 0.218576, "loss_cls": 0.279388, "loss_mask": 0.171277, "loss_rpn_bbox_fpn2": 0.000661, "loss_rpn_bbox_fpn3": 0.007250, "loss_rpn_bbox_fpn4": 0.017773, "loss_rpn_bbox_fpn5": 0.008254, "loss_rpn_bbox_fpn6": 0.001155, "loss_rpn_cls_fpn2": 0.001345, "loss_rpn_cls_fpn3": 0.012231, "loss_rpn_cls_fpn4": 0.010113, "loss_rpn_cls_fpn5": 0.006631, "loss_rpn_cls_fpn6": 0.000553, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.503193}
json_stats: {"accuracy_cls": 0.861128, "eta": "12:26:34", "iter": 980, "loss": 0.860519, "loss_bbox": 0.243469, "loss_cls": 0.313934, "loss_mask": 0.192909, "loss_rpn_bbox_fpn2": 0.001304, "loss_rpn_bbox_fpn3": 0.008572, "loss_rpn_bbox_fpn4": 0.017241, "loss_rpn_bbox_fpn5": 0.009213, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006173, "loss_rpn_cls_fpn3": 0.013737, "loss_rpn_cls_fpn4": 0.010271, "loss_rpn_cls_fpn5": 0.004369, "loss_rpn_cls_fpn6": 0.000192, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.503199}
json_stats: {"accuracy_cls": 0.864280, "eta": "12:27:01", "iter": 1000, "loss": 0.865525, "loss_bbox": 0.228983, "loss_cls": 0.306774, "loss_mask": 0.238466, "loss_rpn_bbox_fpn2": 0.000191, "loss_rpn_bbox_fpn3": 0.005605, "loss_rpn_bbox_fpn4": 0.016359, "loss_rpn_bbox_fpn5": 0.019313, "loss_rpn_bbox_fpn6": 0.000955, "loss_rpn_cls_fpn2": 0.001232, "loss_rpn_cls_fpn3": 0.013532, "loss_rpn_cls_fpn4": 0.013613, "loss_rpn_cls_fpn5": 0.008651, "loss_rpn_cls_fpn6": 0.001995, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.503615}
json_stats: {"accuracy_cls": 0.877066, "eta": "12:27:21", "iter": 1020, "loss": 0.840108, "loss_bbox": 0.206698, "loss_cls": 0.285228, "loss_mask": 0.216407, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004608, "loss_rpn_bbox_fpn4": 0.010179, "loss_rpn_bbox_fpn5": 0.010541, "loss_rpn_bbox_fpn6": 0.002407, "loss_rpn_cls_fpn2": 0.002370, "loss_rpn_cls_fpn3": 0.013259, "loss_rpn_cls_fpn4": 0.008100, "loss_rpn_cls_fpn5": 0.007024, "loss_rpn_cls_fpn6": 0.001515, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.503952}
json_stats: {"accuracy_cls": 0.863350, "eta": "12:27:17", "iter": 1040, "loss": 0.865440, "loss_bbox": 0.251338, "loss_cls": 0.297854, "loss_mask": 0.209078, "loss_rpn_bbox_fpn2": 0.001853, "loss_rpn_bbox_fpn3": 0.004734, "loss_rpn_bbox_fpn4": 0.010200, "loss_rpn_bbox_fpn5": 0.010997, "loss_rpn_bbox_fpn6": 0.002089, "loss_rpn_cls_fpn2": 0.003125, "loss_rpn_cls_fpn3": 0.007303, "loss_rpn_cls_fpn4": 0.008877, "loss_rpn_cls_fpn5": 0.007111, "loss_rpn_cls_fpn6": 0.001503, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.504016}
json_stats: {"accuracy_cls": 0.888672, "eta": "12:27:23", "iter": 1060, "loss": 0.764705, "loss_bbox": 0.230783, "loss_cls": 0.249249, "loss_mask": 0.184530, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004285, "loss_rpn_bbox_fpn4": 0.011346, "loss_rpn_bbox_fpn5": 0.006396, "loss_rpn_bbox_fpn6": 0.001149, "loss_rpn_cls_fpn2": 0.002292, "loss_rpn_cls_fpn3": 0.006199, "loss_rpn_cls_fpn4": 0.009246, "loss_rpn_cls_fpn5": 0.002215, "loss_rpn_cls_fpn6": 0.000251, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.504202}
json_stats: {"accuracy_cls": 0.877441, "eta": "12:26:55", "iter": 1080, "loss": 0.797319, "loss_bbox": 0.223055, "loss_cls": 0.281210, "loss_mask": 0.195259, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006462, "loss_rpn_bbox_fpn4": 0.016005, "loss_rpn_bbox_fpn5": 0.012696, "loss_rpn_bbox_fpn6": 0.000945, "loss_rpn_cls_fpn2": 0.001368, "loss_rpn_cls_fpn3": 0.006221, "loss_rpn_cls_fpn4": 0.009677, "loss_rpn_cls_fpn5": 0.005423, "loss_rpn_cls_fpn6": 0.000568, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.503993}
json_stats: {"accuracy_cls": 0.870918, "eta": "12:27:03", "iter": 1100, "loss": 0.835951, "loss_bbox": 0.222649, "loss_cls": 0.293599, "loss_mask": 0.201317, "loss_rpn_bbox_fpn2": 0.000919, "loss_rpn_bbox_fpn3": 0.006602, "loss_rpn_bbox_fpn4": 0.017843, "loss_rpn_bbox_fpn5": 0.007631, "loss_rpn_bbox_fpn6": 0.003155, "loss_rpn_cls_fpn2": 0.003745, "loss_rpn_cls_fpn3": 0.010149, "loss_rpn_cls_fpn4": 0.011165, "loss_rpn_cls_fpn5": 0.007696, "loss_rpn_cls_fpn6": 0.001003, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.504206}
json_stats: {"accuracy_cls": 0.879098, "eta": "12:27:12", "iter": 1120, "loss": 0.768497, "loss_bbox": 0.226940, "loss_cls": 0.275868, "loss_mask": 0.199267, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003923, "loss_rpn_bbox_fpn4": 0.009861, "loss_rpn_bbox_fpn5": 0.010534, "loss_rpn_bbox_fpn6": 0.000718, "loss_rpn_cls_fpn2": 0.001774, "loss_rpn_cls_fpn3": 0.014983, "loss_rpn_cls_fpn4": 0.006773, "loss_rpn_cls_fpn5": 0.006520, "loss_rpn_cls_fpn6": 0.001219, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.504419}
json_stats: {"accuracy_cls": 0.872157, "eta": "12:27:22", "iter": 1140, "loss": 0.841534, "loss_bbox": 0.242821, "loss_cls": 0.303842, "loss_mask": 0.208687, "loss_rpn_bbox_fpn2": 0.000533, "loss_rpn_bbox_fpn3": 0.007782, "loss_rpn_bbox_fpn4": 0.014932, "loss_rpn_bbox_fpn5": 0.024451, "loss_rpn_bbox_fpn6": 0.001456, "loss_rpn_cls_fpn2": 0.002561, "loss_rpn_cls_fpn3": 0.010413, "loss_rpn_cls_fpn4": 0.010313, "loss_rpn_cls_fpn5": 0.007166, "loss_rpn_cls_fpn6": 0.001677, "lr": 0.003000, "mb_qsize": 64, "mem": 7619, "time": 0.504639}
json_stats: {"accuracy_cls": 0.886230, "eta": "12:27:17", "iter": 1160, "loss": 0.755716, "loss_bbox": 0.197269, "loss_cls": 0.258639, "loss_mask": 0.201763, "loss_rpn_bbox_fpn2": 0.000500, "loss_rpn_bbox_fpn3": 0.004381, "loss_rpn_bbox_fpn4": 0.011342, "loss_rpn_bbox_fpn5": 0.013323, "loss_rpn_bbox_fpn6": 0.000906, "loss_rpn_cls_fpn2": 0.003522, "loss_rpn_cls_fpn3": 0.005238, "loss_rpn_cls_fpn4": 0.007311, "loss_rpn_cls_fpn5": 0.007602, "loss_rpn_cls_fpn6": 0.000696, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.504695}
json_stats: {"accuracy_cls": 0.866090, "eta": "12:27:43", "iter": 1180, "loss": 0.833151, "loss_bbox": 0.236928, "loss_cls": 0.302384, "loss_mask": 0.224815, "loss_rpn_bbox_fpn2": 0.000533, "loss_rpn_bbox_fpn3": 0.003968, "loss_rpn_bbox_fpn4": 0.017257, "loss_rpn_bbox_fpn5": 0.005299, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001676, "loss_rpn_cls_fpn3": 0.007925, "loss_rpn_cls_fpn4": 0.010007, "loss_rpn_cls_fpn5": 0.005102, "loss_rpn_cls_fpn6": 0.000000, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.505105}
json_stats: {"accuracy_cls": 0.874023, "eta": "12:27:17", "iter": 1200, "loss": 0.805444, "loss_bbox": 0.233238, "loss_cls": 0.286008, "loss_mask": 0.198372, "loss_rpn_bbox_fpn2": 0.001048, "loss_rpn_bbox_fpn3": 0.008708, "loss_rpn_bbox_fpn4": 0.009909, "loss_rpn_bbox_fpn5": 0.007386, "loss_rpn_bbox_fpn6": 0.001981, "loss_rpn_cls_fpn2": 0.002340, "loss_rpn_cls_fpn3": 0.015057, "loss_rpn_cls_fpn4": 0.004721, "loss_rpn_cls_fpn5": 0.005397, "loss_rpn_cls_fpn6": 0.001578, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.504931}
json_stats: {"accuracy_cls": 0.895777, "eta": "12:26:57", "iter": 1220, "loss": 0.748694, "loss_bbox": 0.195552, "loss_cls": 0.249684, "loss_mask": 0.188516, "loss_rpn_bbox_fpn2": 0.000192, "loss_rpn_bbox_fpn3": 0.004357, "loss_rpn_bbox_fpn4": 0.010371, "loss_rpn_bbox_fpn5": 0.015012, "loss_rpn_bbox_fpn6": 0.001307, "loss_rpn_cls_fpn2": 0.003177, "loss_rpn_cls_fpn3": 0.013320, "loss_rpn_cls_fpn4": 0.006110, "loss_rpn_cls_fpn5": 0.004905, "loss_rpn_cls_fpn6": 0.001837, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.504818}
json_stats: {"accuracy_cls": 0.880818, "eta": "12:26:56", "iter": 1240, "loss": 0.827471, "loss_bbox": 0.248880, "loss_cls": 0.279190, "loss_mask": 0.212300, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004855, "loss_rpn_bbox_fpn4": 0.008703, "loss_rpn_bbox_fpn5": 0.014667, "loss_rpn_bbox_fpn6": 0.000588, "loss_rpn_cls_fpn2": 0.002632, "loss_rpn_cls_fpn3": 0.010569, "loss_rpn_cls_fpn4": 0.007027, "loss_rpn_cls_fpn5": 0.003207, "loss_rpn_cls_fpn6": 0.000148, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.504920}
json_stats: {"accuracy_cls": 0.880008, "eta": "12:26:59", "iter": 1260, "loss": 0.828250, "loss_bbox": 0.236881, "loss_cls": 0.283089, "loss_mask": 0.221256, "loss_rpn_bbox_fpn2": 0.000046, "loss_rpn_bbox_fpn3": 0.003395, "loss_rpn_bbox_fpn4": 0.008310, "loss_rpn_bbox_fpn5": 0.019203, "loss_rpn_bbox_fpn6": 0.006782, "loss_rpn_cls_fpn2": 0.002154, "loss_rpn_cls_fpn3": 0.007577, "loss_rpn_cls_fpn4": 0.006258, "loss_rpn_cls_fpn5": 0.009058, "loss_rpn_cls_fpn6": 0.002354, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.505067}
json_stats: {"accuracy_cls": 0.873535, "eta": "12:27:19", "iter": 1280, "loss": 0.829195, "loss_bbox": 0.259588, "loss_cls": 0.281828, "loss_mask": 0.185516, "loss_rpn_bbox_fpn2": 0.002255, "loss_rpn_bbox_fpn3": 0.006724, "loss_rpn_bbox_fpn4": 0.016284, "loss_rpn_bbox_fpn5": 0.012029, "loss_rpn_bbox_fpn6": 0.004027, "loss_rpn_cls_fpn2": 0.003388, "loss_rpn_cls_fpn3": 0.008847, "loss_rpn_cls_fpn4": 0.007445, "loss_rpn_cls_fpn5": 0.008960, "loss_rpn_cls_fpn6": 0.001413, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.505404}
json_stats: {"accuracy_cls": 0.884277, "eta": "12:27:01", "iter": 1300, "loss": 0.765700, "loss_bbox": 0.227647, "loss_cls": 0.280532, "loss_mask": 0.177368, "loss_rpn_bbox_fpn2": 0.000539, "loss_rpn_bbox_fpn3": 0.003248, "loss_rpn_bbox_fpn4": 0.009106, "loss_rpn_bbox_fpn5": 0.011256, "loss_rpn_bbox_fpn6": 0.003468, "loss_rpn_cls_fpn2": 0.002425, "loss_rpn_cls_fpn3": 0.007510, "loss_rpn_cls_fpn4": 0.007324, "loss_rpn_cls_fpn5": 0.006814, "loss_rpn_cls_fpn6": 0.001830, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.505312}
json_stats: {"accuracy_cls": 0.892090, "eta": "12:26:42", "iter": 1320, "loss": 0.711883, "loss_bbox": 0.204269, "loss_cls": 0.248582, "loss_mask": 0.173711, "loss_rpn_bbox_fpn2": 0.000825, "loss_rpn_bbox_fpn3": 0.002863, "loss_rpn_bbox_fpn4": 0.009544, "loss_rpn_bbox_fpn5": 0.011372, "loss_rpn_bbox_fpn6": 0.001904, "loss_rpn_cls_fpn2": 0.001984, "loss_rpn_cls_fpn3": 0.007559, "loss_rpn_cls_fpn4": 0.005033, "loss_rpn_cls_fpn5": 0.004878, "loss_rpn_cls_fpn6": 0.001196, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.505214}
json_stats: {"accuracy_cls": 0.889967, "eta": "12:26:13", "iter": 1340, "loss": 0.759954, "loss_bbox": 0.207716, "loss_cls": 0.261844, "loss_mask": 0.195743, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005912, "loss_rpn_bbox_fpn4": 0.014077, "loss_rpn_bbox_fpn5": 0.005029, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000804, "loss_rpn_cls_fpn3": 0.007883, "loss_rpn_cls_fpn4": 0.006022, "loss_rpn_cls_fpn5": 0.003641, "loss_rpn_cls_fpn6": 0.000462, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.505001}
json_stats: {"accuracy_cls": 0.870605, "eta": "12:26:14", "iter": 1360, "loss": 0.858007, "loss_bbox": 0.223741, "loss_cls": 0.299979, "loss_mask": 0.214745, "loss_rpn_bbox_fpn2": 0.001262, "loss_rpn_bbox_fpn3": 0.006265, "loss_rpn_bbox_fpn4": 0.014434, "loss_rpn_bbox_fpn5": 0.020180, "loss_rpn_bbox_fpn6": 0.004582, "loss_rpn_cls_fpn2": 0.003377, "loss_rpn_cls_fpn3": 0.012065, "loss_rpn_cls_fpn4": 0.010848, "loss_rpn_cls_fpn5": 0.007066, "loss_rpn_cls_fpn6": 0.001364, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.505123}
json_stats: {"accuracy_cls": 0.884766, "eta": "12:25:46", "iter": 1380, "loss": 0.755249, "loss_bbox": 0.219993, "loss_cls": 0.266669, "loss_mask": 0.175513, "loss_rpn_bbox_fpn2": 0.000225, "loss_rpn_bbox_fpn3": 0.005227, "loss_rpn_bbox_fpn4": 0.007916, "loss_rpn_bbox_fpn5": 0.005343, "loss_rpn_bbox_fpn6": 0.000395, "loss_rpn_cls_fpn2": 0.001800, "loss_rpn_cls_fpn3": 0.007735, "loss_rpn_cls_fpn4": 0.006206, "loss_rpn_cls_fpn5": 0.002151, "loss_rpn_cls_fpn6": 0.000678, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.504924}
json_stats: {"accuracy_cls": 0.873704, "eta": "12:25:33", "iter": 1400, "loss": 0.778643, "loss_bbox": 0.224478, "loss_cls": 0.284038, "loss_mask": 0.193204, "loss_rpn_bbox_fpn2": 0.000199, "loss_rpn_bbox_fpn3": 0.007225, "loss_rpn_bbox_fpn4": 0.014610, "loss_rpn_bbox_fpn5": 0.009600, "loss_rpn_bbox_fpn6": 0.001779, "loss_rpn_cls_fpn2": 0.002824, "loss_rpn_cls_fpn3": 0.008794, "loss_rpn_cls_fpn4": 0.007569, "loss_rpn_cls_fpn5": 0.005503, "loss_rpn_cls_fpn6": 0.000829, "lr": 0.003000, "mb_qsize": 64, "mem": 7628, "time": 0.504894}
json_stats: {"accuracy_cls": 0.900441, "eta": "12:25:08", "iter": 1420, "loss": 0.758795, "loss_bbox": 0.211823, "loss_cls": 0.242322, "loss_mask": 0.180714, "loss_rpn_bbox_fpn2": 0.000652, "loss_rpn_bbox_fpn3": 0.007818, "loss_rpn_bbox_fpn4": 0.009764, "loss_rpn_bbox_fpn5": 0.005943, "loss_rpn_bbox_fpn6": 0.002756, "loss_rpn_cls_fpn2": 0.001995, "loss_rpn_cls_fpn3": 0.010875, "loss_rpn_cls_fpn4": 0.006440, "loss_rpn_cls_fpn5": 0.005223, "loss_rpn_cls_fpn6": 0.001817, "lr": 0.003000, "mb_qsize": 64, "mem": 7633, "time": 0.504730}
json_stats: {"accuracy_cls": 0.881194, "eta": "12:25:22", "iter": 1440, "loss": 0.767354, "loss_bbox": 0.233632, "loss_cls": 0.269818, "loss_mask": 0.218404, "loss_rpn_bbox_fpn2": 0.001946, "loss_rpn_bbox_fpn3": 0.006117, "loss_rpn_bbox_fpn4": 0.020640, "loss_rpn_bbox_fpn5": 0.009898, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002262, "loss_rpn_cls_fpn3": 0.011555, "loss_rpn_cls_fpn4": 0.008306, "loss_rpn_cls_fpn5": 0.004117, "loss_rpn_cls_fpn6": 0.000018, "lr": 0.003000, "mb_qsize": 64, "mem": 7633, "time": 0.504994}
json_stats: {"accuracy_cls": 0.907413, "eta": "12:25:11", "iter": 1460, "loss": 0.617910, "loss_bbox": 0.184134, "loss_cls": 0.229402, "loss_mask": 0.190943, "loss_rpn_bbox_fpn2": 0.000764, "loss_rpn_bbox_fpn3": 0.004290, "loss_rpn_bbox_fpn4": 0.009051, "loss_rpn_bbox_fpn5": 0.010294, "loss_rpn_bbox_fpn6": 0.001342, "loss_rpn_cls_fpn2": 0.001819, "loss_rpn_cls_fpn3": 0.009917, "loss_rpn_cls_fpn4": 0.004944, "loss_rpn_cls_fpn5": 0.004485, "loss_rpn_cls_fpn6": 0.001305, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.504990}
json_stats: {"accuracy_cls": 0.875977, "eta": "12:25:22", "iter": 1480, "loss": 0.828889, "loss_bbox": 0.209419, "loss_cls": 0.297102, "loss_mask": 0.194459, "loss_rpn_bbox_fpn2": 0.001163, "loss_rpn_bbox_fpn3": 0.004865, "loss_rpn_bbox_fpn4": 0.019776, "loss_rpn_bbox_fpn5": 0.016054, "loss_rpn_bbox_fpn6": 0.002272, "loss_rpn_cls_fpn2": 0.001914, "loss_rpn_cls_fpn3": 0.011034, "loss_rpn_cls_fpn4": 0.008644, "loss_rpn_cls_fpn5": 0.005056, "loss_rpn_cls_fpn6": 0.000844, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505226}
json_stats: {"accuracy_cls": 0.880638, "eta": "12:25:03", "iter": 1500, "loss": 0.769709, "loss_bbox": 0.221207, "loss_cls": 0.285222, "loss_mask": 0.214699, "loss_rpn_bbox_fpn2": 0.000913, "loss_rpn_bbox_fpn3": 0.003067, "loss_rpn_bbox_fpn4": 0.012484, "loss_rpn_bbox_fpn5": 0.012928, "loss_rpn_bbox_fpn6": 0.003358, "loss_rpn_cls_fpn2": 0.002094, "loss_rpn_cls_fpn3": 0.008434, "loss_rpn_cls_fpn4": 0.007990, "loss_rpn_cls_fpn5": 0.003347, "loss_rpn_cls_fpn6": 0.000580, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505130}
json_stats: {"accuracy_cls": 0.876205, "eta": "12:24:47", "iter": 1520, "loss": 0.787230, "loss_bbox": 0.217330, "loss_cls": 0.271191, "loss_mask": 0.175379, "loss_rpn_bbox_fpn2": 0.000813, "loss_rpn_bbox_fpn3": 0.003487, "loss_rpn_bbox_fpn4": 0.009475, "loss_rpn_bbox_fpn5": 0.007231, "loss_rpn_bbox_fpn6": 0.003772, "loss_rpn_cls_fpn2": 0.003077, "loss_rpn_cls_fpn3": 0.007010, "loss_rpn_cls_fpn4": 0.009494, "loss_rpn_cls_fpn5": 0.004720, "loss_rpn_cls_fpn6": 0.000798, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505057}
json_stats: {"accuracy_cls": 0.878906, "eta": "12:24:32", "iter": 1540, "loss": 0.716213, "loss_bbox": 0.198815, "loss_cls": 0.266000, "loss_mask": 0.181900, "loss_rpn_bbox_fpn2": 0.000926, "loss_rpn_bbox_fpn3": 0.006885, "loss_rpn_bbox_fpn4": 0.013172, "loss_rpn_bbox_fpn5": 0.014736, "loss_rpn_bbox_fpn6": 0.002706, "loss_rpn_cls_fpn2": 0.003179, "loss_rpn_cls_fpn3": 0.007834, "loss_rpn_cls_fpn4": 0.009078, "loss_rpn_cls_fpn5": 0.003578, "loss_rpn_cls_fpn6": 0.001464, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505006}
json_stats: {"accuracy_cls": 0.884222, "eta": "12:24:34", "iter": 1560, "loss": 0.742729, "loss_bbox": 0.202809, "loss_cls": 0.271016, "loss_mask": 0.184551, "loss_rpn_bbox_fpn2": 0.000853, "loss_rpn_bbox_fpn3": 0.004540, "loss_rpn_bbox_fpn4": 0.014160, "loss_rpn_bbox_fpn5": 0.005839, "loss_rpn_bbox_fpn6": 0.000079, "loss_rpn_cls_fpn2": 0.001182, "loss_rpn_cls_fpn3": 0.007298, "loss_rpn_cls_fpn4": 0.006407, "loss_rpn_cls_fpn5": 0.001755, "loss_rpn_cls_fpn6": 0.000321, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505139}
json_stats: {"accuracy_cls": 0.893555, "eta": "12:24:26", "iter": 1580, "loss": 0.743954, "loss_bbox": 0.200774, "loss_cls": 0.242493, "loss_mask": 0.200124, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003313, "loss_rpn_bbox_fpn4": 0.010245, "loss_rpn_bbox_fpn5": 0.007860, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001043, "loss_rpn_cls_fpn3": 0.003188, "loss_rpn_cls_fpn4": 0.008169, "loss_rpn_cls_fpn5": 0.008214, "loss_rpn_cls_fpn6": 0.001251, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505169}
json_stats: {"accuracy_cls": 0.882412, "eta": "12:24:23", "iter": 1600, "loss": 0.764341, "loss_bbox": 0.218905, "loss_cls": 0.272660, "loss_mask": 0.174967, "loss_rpn_bbox_fpn2": 0.000695, "loss_rpn_bbox_fpn3": 0.005138, "loss_rpn_bbox_fpn4": 0.016237, "loss_rpn_bbox_fpn5": 0.005728, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001514, "loss_rpn_cls_fpn3": 0.007792, "loss_rpn_cls_fpn4": 0.004830, "loss_rpn_cls_fpn5": 0.006183, "loss_rpn_cls_fpn6": 0.000187, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505245}
json_stats: {"accuracy_cls": 0.890176, "eta": "12:24:05", "iter": 1620, "loss": 0.727106, "loss_bbox": 0.194661, "loss_cls": 0.256036, "loss_mask": 0.189696, "loss_rpn_bbox_fpn2": 0.000137, "loss_rpn_bbox_fpn3": 0.004566, "loss_rpn_bbox_fpn4": 0.017575, "loss_rpn_bbox_fpn5": 0.011253, "loss_rpn_bbox_fpn6": 0.000324, "loss_rpn_cls_fpn2": 0.000847, "loss_rpn_cls_fpn3": 0.008091, "loss_rpn_cls_fpn4": 0.008843, "loss_rpn_cls_fpn5": 0.002747, "loss_rpn_cls_fpn6": 0.001077, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505149}
json_stats: {"accuracy_cls": 0.875000, "eta": "12:24:20", "iter": 1640, "loss": 0.784034, "loss_bbox": 0.205710, "loss_cls": 0.280100, "loss_mask": 0.183026, "loss_rpn_bbox_fpn2": 0.002057, "loss_rpn_bbox_fpn3": 0.005453, "loss_rpn_bbox_fpn4": 0.015415, "loss_rpn_bbox_fpn5": 0.010538, "loss_rpn_bbox_fpn6": 0.003327, "loss_rpn_cls_fpn2": 0.005815, "loss_rpn_cls_fpn3": 0.006382, "loss_rpn_cls_fpn4": 0.010448, "loss_rpn_cls_fpn5": 0.006153, "loss_rpn_cls_fpn6": 0.001171, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505436}
json_stats: {"accuracy_cls": 0.877967, "eta": "12:24:17", "iter": 1660, "loss": 0.752639, "loss_bbox": 0.224511, "loss_cls": 0.287159, "loss_mask": 0.191587, "loss_rpn_bbox_fpn2": 0.000436, "loss_rpn_bbox_fpn3": 0.004982, "loss_rpn_bbox_fpn4": 0.010396, "loss_rpn_bbox_fpn5": 0.014219, "loss_rpn_bbox_fpn6": 0.001978, "loss_rpn_cls_fpn2": 0.002669, "loss_rpn_cls_fpn3": 0.005714, "loss_rpn_cls_fpn4": 0.007864, "loss_rpn_cls_fpn5": 0.003422, "loss_rpn_cls_fpn6": 0.000611, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505516}
json_stats: {"accuracy_cls": 0.897105, "eta": "12:24:10", "iter": 1680, "loss": 0.705020, "loss_bbox": 0.211542, "loss_cls": 0.241089, "loss_mask": 0.177046, "loss_rpn_bbox_fpn2": 0.000321, "loss_rpn_bbox_fpn3": 0.003884, "loss_rpn_bbox_fpn4": 0.007127, "loss_rpn_bbox_fpn5": 0.005879, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000583, "loss_rpn_cls_fpn3": 0.008438, "loss_rpn_cls_fpn4": 0.004852, "loss_rpn_cls_fpn5": 0.003072, "loss_rpn_cls_fpn6": 0.000374, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505554}
json_stats: {"accuracy_cls": 0.891680, "eta": "12:23:51", "iter": 1700, "loss": 0.712372, "loss_bbox": 0.220818, "loss_cls": 0.257409, "loss_mask": 0.176404, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003615, "loss_rpn_bbox_fpn4": 0.010379, "loss_rpn_bbox_fpn5": 0.005133, "loss_rpn_bbox_fpn6": 0.000258, "loss_rpn_cls_fpn2": 0.000957, "loss_rpn_cls_fpn3": 0.007781, "loss_rpn_cls_fpn4": 0.005025, "loss_rpn_cls_fpn5": 0.003082, "loss_rpn_cls_fpn6": 0.000655, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505458}
json_stats: {"accuracy_cls": 0.889065, "eta": "12:23:42", "iter": 1720, "loss": 0.735583, "loss_bbox": 0.209734, "loss_cls": 0.269122, "loss_mask": 0.182129, "loss_rpn_bbox_fpn2": 0.000485, "loss_rpn_bbox_fpn3": 0.007599, "loss_rpn_bbox_fpn4": 0.006928, "loss_rpn_bbox_fpn5": 0.003534, "loss_rpn_bbox_fpn6": 0.003131, "loss_rpn_cls_fpn2": 0.001053, "loss_rpn_cls_fpn3": 0.015756, "loss_rpn_cls_fpn4": 0.006961, "loss_rpn_cls_fpn5": 0.003070, "loss_rpn_cls_fpn6": 0.000600, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505464}
json_stats: {"accuracy_cls": 0.894531, "eta": "12:23:22", "iter": 1740, "loss": 0.720558, "loss_bbox": 0.211194, "loss_cls": 0.249976, "loss_mask": 0.172313, "loss_rpn_bbox_fpn2": 0.000433, "loss_rpn_bbox_fpn3": 0.003145, "loss_rpn_bbox_fpn4": 0.013338, "loss_rpn_bbox_fpn5": 0.005712, "loss_rpn_bbox_fpn6": 0.000345, "loss_rpn_cls_fpn2": 0.001581, "loss_rpn_cls_fpn3": 0.008507, "loss_rpn_cls_fpn4": 0.009220, "loss_rpn_cls_fpn5": 0.002928, "loss_rpn_cls_fpn6": 0.000233, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505357}
json_stats: {"accuracy_cls": 0.884122, "eta": "12:22:57", "iter": 1760, "loss": 0.764830, "loss_bbox": 0.214785, "loss_cls": 0.270320, "loss_mask": 0.200224, "loss_rpn_bbox_fpn2": 0.000189, "loss_rpn_bbox_fpn3": 0.005128, "loss_rpn_bbox_fpn4": 0.012027, "loss_rpn_bbox_fpn5": 0.007203, "loss_rpn_bbox_fpn6": 0.003890, "loss_rpn_cls_fpn2": 0.002326, "loss_rpn_cls_fpn3": 0.009224, "loss_rpn_cls_fpn4": 0.005162, "loss_rpn_cls_fpn5": 0.003144, "loss_rpn_cls_fpn6": 0.000734, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505188}
json_stats: {"accuracy_cls": 0.895295, "eta": "12:22:50", "iter": 1780, "loss": 0.724593, "loss_bbox": 0.216834, "loss_cls": 0.250319, "loss_mask": 0.205488, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004616, "loss_rpn_bbox_fpn4": 0.007500, "loss_rpn_bbox_fpn5": 0.010459, "loss_rpn_bbox_fpn6": 0.004947, "loss_rpn_cls_fpn2": 0.001282, "loss_rpn_cls_fpn3": 0.005336, "loss_rpn_cls_fpn4": 0.006503, "loss_rpn_cls_fpn5": 0.011103, "loss_rpn_cls_fpn6": 0.003300, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505225}
json_stats: {"accuracy_cls": 0.881287, "eta": "12:22:32", "iter": 1800, "loss": 0.740527, "loss_bbox": 0.188678, "loss_cls": 0.266532, "loss_mask": 0.183064, "loss_rpn_bbox_fpn2": 0.001472, "loss_rpn_bbox_fpn3": 0.005013, "loss_rpn_bbox_fpn4": 0.011856, "loss_rpn_bbox_fpn5": 0.008016, "loss_rpn_bbox_fpn6": 0.002477, "loss_rpn_cls_fpn2": 0.003049, "loss_rpn_cls_fpn3": 0.007118, "loss_rpn_cls_fpn4": 0.011293, "loss_rpn_cls_fpn5": 0.007816, "loss_rpn_cls_fpn6": 0.001234, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505129}
json_stats: {"accuracy_cls": 0.902832, "eta": "12:22:29", "iter": 1820, "loss": 0.663520, "loss_bbox": 0.191200, "loss_cls": 0.226003, "loss_mask": 0.188460, "loss_rpn_bbox_fpn2": 0.000650, "loss_rpn_bbox_fpn3": 0.003065, "loss_rpn_bbox_fpn4": 0.006299, "loss_rpn_bbox_fpn5": 0.009090, "loss_rpn_bbox_fpn6": 0.002674, "loss_rpn_cls_fpn2": 0.002330, "loss_rpn_cls_fpn3": 0.012133, "loss_rpn_cls_fpn4": 0.004313, "loss_rpn_cls_fpn5": 0.004999, "loss_rpn_cls_fpn6": 0.001031, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505215}
json_stats: {"accuracy_cls": 0.880243, "eta": "12:22:24", "iter": 1840, "loss": 0.770967, "loss_bbox": 0.211828, "loss_cls": 0.289143, "loss_mask": 0.178863, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006761, "loss_rpn_bbox_fpn4": 0.014742, "loss_rpn_bbox_fpn5": 0.010626, "loss_rpn_bbox_fpn6": 0.001910, "loss_rpn_cls_fpn2": 0.001684, "loss_rpn_cls_fpn3": 0.010818, "loss_rpn_cls_fpn4": 0.005480, "loss_rpn_cls_fpn5": 0.004901, "loss_rpn_cls_fpn6": 0.001450, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505265}
json_stats: {"accuracy_cls": 0.879395, "eta": "12:22:22", "iter": 1860, "loss": 0.783255, "loss_bbox": 0.211843, "loss_cls": 0.274941, "loss_mask": 0.205882, "loss_rpn_bbox_fpn2": 0.000649, "loss_rpn_bbox_fpn3": 0.006437, "loss_rpn_bbox_fpn4": 0.014877, "loss_rpn_bbox_fpn5": 0.013156, "loss_rpn_bbox_fpn6": 0.000816, "loss_rpn_cls_fpn2": 0.002137, "loss_rpn_cls_fpn3": 0.008878, "loss_rpn_cls_fpn4": 0.009963, "loss_rpn_cls_fpn5": 0.006198, "loss_rpn_cls_fpn6": 0.001429, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505361}
json_stats: {"accuracy_cls": 0.890122, "eta": "12:22:05", "iter": 1880, "loss": 0.715813, "loss_bbox": 0.221863, "loss_cls": 0.266690, "loss_mask": 0.192912, "loss_rpn_bbox_fpn2": 0.000394, "loss_rpn_bbox_fpn3": 0.005449, "loss_rpn_bbox_fpn4": 0.008331, "loss_rpn_bbox_fpn5": 0.010873, "loss_rpn_bbox_fpn6": 0.002150, "loss_rpn_cls_fpn2": 0.001843, "loss_rpn_cls_fpn3": 0.007028, "loss_rpn_cls_fpn4": 0.006611, "loss_rpn_cls_fpn5": 0.003435, "loss_rpn_cls_fpn6": 0.001639, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505282}
json_stats: {"accuracy_cls": 0.895089, "eta": "12:22:01", "iter": 1900, "loss": 0.679451, "loss_bbox": 0.189502, "loss_cls": 0.238312, "loss_mask": 0.174008, "loss_rpn_bbox_fpn2": 0.000533, "loss_rpn_bbox_fpn3": 0.004941, "loss_rpn_bbox_fpn4": 0.014097, "loss_rpn_bbox_fpn5": 0.008362, "loss_rpn_bbox_fpn6": 0.001769, "loss_rpn_cls_fpn2": 0.002979, "loss_rpn_cls_fpn3": 0.007690, "loss_rpn_cls_fpn4": 0.004645, "loss_rpn_cls_fpn5": 0.006089, "loss_rpn_cls_fpn6": 0.000527, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505350}
json_stats: {"accuracy_cls": 0.900391, "eta": "12:21:49", "iter": 1920, "loss": 0.660974, "loss_bbox": 0.192595, "loss_cls": 0.226907, "loss_mask": 0.166182, "loss_rpn_bbox_fpn2": 0.000062, "loss_rpn_bbox_fpn3": 0.002862, "loss_rpn_bbox_fpn4": 0.011906, "loss_rpn_bbox_fpn5": 0.010522, "loss_rpn_bbox_fpn6": 0.000915, "loss_rpn_cls_fpn2": 0.001213, "loss_rpn_cls_fpn3": 0.003524, "loss_rpn_cls_fpn4": 0.007044, "loss_rpn_cls_fpn5": 0.003589, "loss_rpn_cls_fpn6": 0.001241, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505334}
json_stats: {"accuracy_cls": 0.891453, "eta": "12:21:33", "iter": 1940, "loss": 0.657588, "loss_bbox": 0.176125, "loss_cls": 0.254829, "loss_mask": 0.163277, "loss_rpn_bbox_fpn2": 0.001132, "loss_rpn_bbox_fpn3": 0.005800, "loss_rpn_bbox_fpn4": 0.012407, "loss_rpn_bbox_fpn5": 0.005998, "loss_rpn_bbox_fpn6": 0.002930, "loss_rpn_cls_fpn2": 0.001402, "loss_rpn_cls_fpn3": 0.006195, "loss_rpn_cls_fpn4": 0.008058, "loss_rpn_cls_fpn5": 0.003737, "loss_rpn_cls_fpn6": 0.000577, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505265}
json_stats: {"accuracy_cls": 0.907292, "eta": "12:21:13", "iter": 1960, "loss": 0.664761, "loss_bbox": 0.183017, "loss_cls": 0.229610, "loss_mask": 0.177066, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003033, "loss_rpn_bbox_fpn4": 0.009247, "loss_rpn_bbox_fpn5": 0.010344, "loss_rpn_bbox_fpn6": 0.000472, "loss_rpn_cls_fpn2": 0.001009, "loss_rpn_cls_fpn3": 0.003251, "loss_rpn_cls_fpn4": 0.003513, "loss_rpn_cls_fpn5": 0.005172, "loss_rpn_cls_fpn6": 0.001043, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505150}
json_stats: {"accuracy_cls": 0.883301, "eta": "12:21:06", "iter": 1980, "loss": 0.745354, "loss_bbox": 0.202804, "loss_cls": 0.276972, "loss_mask": 0.188525, "loss_rpn_bbox_fpn2": 0.001111, "loss_rpn_bbox_fpn3": 0.005873, "loss_rpn_bbox_fpn4": 0.015633, "loss_rpn_bbox_fpn5": 0.014827, "loss_rpn_bbox_fpn6": 0.002544, "loss_rpn_cls_fpn2": 0.003939, "loss_rpn_cls_fpn3": 0.009040, "loss_rpn_cls_fpn4": 0.007991, "loss_rpn_cls_fpn5": 0.006344, "loss_rpn_cls_fpn6": 0.000463, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505184}
json_stats: {"accuracy_cls": 0.875977, "eta": "12:20:50", "iter": 2000, "loss": 0.724661, "loss_bbox": 0.217165, "loss_cls": 0.288537, "loss_mask": 0.196115, "loss_rpn_bbox_fpn2": 0.000323, "loss_rpn_bbox_fpn3": 0.006136, "loss_rpn_bbox_fpn4": 0.013470, "loss_rpn_bbox_fpn5": 0.007616, "loss_rpn_bbox_fpn6": 0.000344, "loss_rpn_cls_fpn2": 0.001587, "loss_rpn_cls_fpn3": 0.005083, "loss_rpn_cls_fpn4": 0.004828, "loss_rpn_cls_fpn5": 0.004110, "loss_rpn_cls_fpn6": 0.000363, "lr": 0.003000, "mb_qsize": 64, "mem": 7634, "time": 0.505121}
json_stats: {"accuracy_cls": 0.869563, "eta": "12:21:06", "iter": 2020, "loss": 0.751592, "loss_bbox": 0.217524, "loss_cls": 0.284944, "loss_mask": 0.159105, "loss_rpn_bbox_fpn2": 0.002523, "loss_rpn_bbox_fpn3": 0.005503, "loss_rpn_bbox_fpn4": 0.015285, "loss_rpn_bbox_fpn5": 0.016342, "loss_rpn_bbox_fpn6": 0.000030, "loss_rpn_cls_fpn2": 0.007016, "loss_rpn_cls_fpn3": 0.007139, "loss_rpn_cls_fpn4": 0.006270, "loss_rpn_cls_fpn5": 0.004794, "loss_rpn_cls_fpn6": 0.000832, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505417}
json_stats: {"accuracy_cls": 0.875478, "eta": "12:20:58", "iter": 2040, "loss": 0.738325, "loss_bbox": 0.219222, "loss_cls": 0.282572, "loss_mask": 0.187137, "loss_rpn_bbox_fpn2": 0.000825, "loss_rpn_bbox_fpn3": 0.004068, "loss_rpn_bbox_fpn4": 0.014337, "loss_rpn_bbox_fpn5": 0.015634, "loss_rpn_bbox_fpn6": 0.002063, "loss_rpn_cls_fpn2": 0.002223, "loss_rpn_cls_fpn3": 0.005073, "loss_rpn_cls_fpn4": 0.009700, "loss_rpn_cls_fpn5": 0.006435, "loss_rpn_cls_fpn6": 0.000926, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505443}
json_stats: {"accuracy_cls": 0.884450, "eta": "12:20:54", "iter": 2060, "loss": 0.751949, "loss_bbox": 0.212299, "loss_cls": 0.269308, "loss_mask": 0.199106, "loss_rpn_bbox_fpn2": 0.001681, "loss_rpn_bbox_fpn3": 0.004138, "loss_rpn_bbox_fpn4": 0.012036, "loss_rpn_bbox_fpn5": 0.014461, "loss_rpn_bbox_fpn6": 0.003089, "loss_rpn_cls_fpn2": 0.001847, "loss_rpn_cls_fpn3": 0.006102, "loss_rpn_cls_fpn4": 0.007017, "loss_rpn_cls_fpn5": 0.004191, "loss_rpn_cls_fpn6": 0.000693, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505512}
json_stats: {"accuracy_cls": 0.899388, "eta": "12:20:42", "iter": 2080, "loss": 0.667682, "loss_bbox": 0.186677, "loss_cls": 0.233974, "loss_mask": 0.178548, "loss_rpn_bbox_fpn2": 0.000549, "loss_rpn_bbox_fpn3": 0.004497, "loss_rpn_bbox_fpn4": 0.012628, "loss_rpn_bbox_fpn5": 0.010931, "loss_rpn_bbox_fpn6": 0.000451, "loss_rpn_cls_fpn2": 0.002058, "loss_rpn_cls_fpn3": 0.007985, "loss_rpn_cls_fpn4": 0.005962, "loss_rpn_cls_fpn5": 0.002341, "loss_rpn_cls_fpn6": 0.000349, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505491}
json_stats: {"accuracy_cls": 0.869909, "eta": "12:20:42", "iter": 2100, "loss": 0.839334, "loss_bbox": 0.215334, "loss_cls": 0.294661, "loss_mask": 0.233388, "loss_rpn_bbox_fpn2": 0.000373, "loss_rpn_bbox_fpn3": 0.004927, "loss_rpn_bbox_fpn4": 0.016981, "loss_rpn_bbox_fpn5": 0.019134, "loss_rpn_bbox_fpn6": 0.000692, "loss_rpn_cls_fpn2": 0.001467, "loss_rpn_cls_fpn3": 0.007502, "loss_rpn_cls_fpn4": 0.009811, "loss_rpn_cls_fpn5": 0.006820, "loss_rpn_cls_fpn6": 0.000794, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505601}
json_stats: {"accuracy_cls": 0.909668, "eta": "12:20:30", "iter": 2120, "loss": 0.595892, "loss_bbox": 0.161066, "loss_cls": 0.212234, "loss_mask": 0.154563, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003522, "loss_rpn_bbox_fpn4": 0.010111, "loss_rpn_bbox_fpn5": 0.002845, "loss_rpn_bbox_fpn6": 0.000123, "loss_rpn_cls_fpn2": 0.000990, "loss_rpn_cls_fpn3": 0.005633, "loss_rpn_cls_fpn4": 0.004718, "loss_rpn_cls_fpn5": 0.002556, "loss_rpn_cls_fpn6": 0.000048, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505586}
json_stats: {"accuracy_cls": 0.891021, "eta": "12:20:27", "iter": 2140, "loss": 0.738667, "loss_bbox": 0.186476, "loss_cls": 0.258759, "loss_mask": 0.188137, "loss_rpn_bbox_fpn2": 0.000169, "loss_rpn_bbox_fpn3": 0.004480, "loss_rpn_bbox_fpn4": 0.009221, "loss_rpn_bbox_fpn5": 0.009640, "loss_rpn_bbox_fpn6": 0.002354, "loss_rpn_cls_fpn2": 0.002330, "loss_rpn_cls_fpn3": 0.007738, "loss_rpn_cls_fpn4": 0.006411, "loss_rpn_cls_fpn5": 0.003641, "loss_rpn_cls_fpn6": 0.000816, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505667}
json_stats: {"accuracy_cls": 0.888184, "eta": "12:20:09", "iter": 2160, "loss": 0.646013, "loss_bbox": 0.182229, "loss_cls": 0.236153, "loss_mask": 0.166269, "loss_rpn_bbox_fpn2": 0.000541, "loss_rpn_bbox_fpn3": 0.003557, "loss_rpn_bbox_fpn4": 0.009936, "loss_rpn_bbox_fpn5": 0.004270, "loss_rpn_bbox_fpn6": 0.004556, "loss_rpn_cls_fpn2": 0.001672, "loss_rpn_cls_fpn3": 0.004680, "loss_rpn_cls_fpn4": 0.005497, "loss_rpn_cls_fpn5": 0.003055, "loss_rpn_cls_fpn6": 0.000866, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505572}
json_stats: {"accuracy_cls": 0.882812, "eta": "12:20:01", "iter": 2180, "loss": 0.701646, "loss_bbox": 0.205205, "loss_cls": 0.271451, "loss_mask": 0.182707, "loss_rpn_bbox_fpn2": 0.001570, "loss_rpn_bbox_fpn3": 0.006456, "loss_rpn_bbox_fpn4": 0.010928, "loss_rpn_bbox_fpn5": 0.014403, "loss_rpn_bbox_fpn6": 0.000748, "loss_rpn_cls_fpn2": 0.002491, "loss_rpn_cls_fpn3": 0.007320, "loss_rpn_cls_fpn4": 0.006243, "loss_rpn_cls_fpn5": 0.004328, "loss_rpn_cls_fpn6": 0.000551, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505596}
json_stats: {"accuracy_cls": 0.889160, "eta": "12:19:55", "iter": 2200, "loss": 0.691197, "loss_bbox": 0.186803, "loss_cls": 0.257280, "loss_mask": 0.157564, "loss_rpn_bbox_fpn2": 0.000761, "loss_rpn_bbox_fpn3": 0.004740, "loss_rpn_bbox_fpn4": 0.015677, "loss_rpn_bbox_fpn5": 0.010596, "loss_rpn_bbox_fpn6": 0.000176, "loss_rpn_cls_fpn2": 0.000999, "loss_rpn_cls_fpn3": 0.003909, "loss_rpn_cls_fpn4": 0.007664, "loss_rpn_cls_fpn5": 0.004152, "loss_rpn_cls_fpn6": 0.000522, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505645}
json_stats: {"accuracy_cls": 0.887695, "eta": "12:19:50", "iter": 2220, "loss": 0.647891, "loss_bbox": 0.192319, "loss_cls": 0.251071, "loss_mask": 0.169332, "loss_rpn_bbox_fpn2": 0.000582, "loss_rpn_bbox_fpn3": 0.005110, "loss_rpn_bbox_fpn4": 0.016018, "loss_rpn_bbox_fpn5": 0.009043, "loss_rpn_bbox_fpn6": 0.002602, "loss_rpn_cls_fpn2": 0.001124, "loss_rpn_cls_fpn3": 0.006165, "loss_rpn_cls_fpn4": 0.006261, "loss_rpn_cls_fpn5": 0.003249, "loss_rpn_cls_fpn6": 0.000562, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505700}
json_stats: {"accuracy_cls": 0.879883, "eta": "12:19:43", "iter": 2240, "loss": 0.706708, "loss_bbox": 0.206051, "loss_cls": 0.263750, "loss_mask": 0.180749, "loss_rpn_bbox_fpn2": 0.001016, "loss_rpn_bbox_fpn3": 0.003309, "loss_rpn_bbox_fpn4": 0.008852, "loss_rpn_bbox_fpn5": 0.010670, "loss_rpn_bbox_fpn6": 0.000435, "loss_rpn_cls_fpn2": 0.001317, "loss_rpn_cls_fpn3": 0.010509, "loss_rpn_cls_fpn4": 0.005328, "loss_rpn_cls_fpn5": 0.002990, "loss_rpn_cls_fpn6": 0.000103, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505742}
json_stats: {"accuracy_cls": 0.900391, "eta": "12:19:39", "iter": 2260, "loss": 0.649810, "loss_bbox": 0.170288, "loss_cls": 0.235910, "loss_mask": 0.182322, "loss_rpn_bbox_fpn2": 0.000827, "loss_rpn_bbox_fpn3": 0.005464, "loss_rpn_bbox_fpn4": 0.012958, "loss_rpn_bbox_fpn5": 0.006834, "loss_rpn_bbox_fpn6": 0.002532, "loss_rpn_cls_fpn2": 0.001553, "loss_rpn_cls_fpn3": 0.005607, "loss_rpn_cls_fpn4": 0.005786, "loss_rpn_cls_fpn5": 0.004199, "loss_rpn_cls_fpn6": 0.001127, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505802}
json_stats: {"accuracy_cls": 0.888587, "eta": "12:19:30", "iter": 2280, "loss": 0.733893, "loss_bbox": 0.197556, "loss_cls": 0.255394, "loss_mask": 0.165942, "loss_rpn_bbox_fpn2": 0.000828, "loss_rpn_bbox_fpn3": 0.004045, "loss_rpn_bbox_fpn4": 0.015417, "loss_rpn_bbox_fpn5": 0.011698, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002239, "loss_rpn_cls_fpn3": 0.007398, "loss_rpn_cls_fpn4": 0.006487, "loss_rpn_cls_fpn5": 0.003950, "loss_rpn_cls_fpn6": 0.000129, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505820}
json_stats: {"accuracy_cls": 0.895777, "eta": "12:19:43", "iter": 2300, "loss": 0.682890, "loss_bbox": 0.193425, "loss_cls": 0.261919, "loss_mask": 0.166462, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004783, "loss_rpn_bbox_fpn4": 0.011644, "loss_rpn_bbox_fpn5": 0.006432, "loss_rpn_bbox_fpn6": 0.003907, "loss_rpn_cls_fpn2": 0.001553, "loss_rpn_cls_fpn3": 0.006201, "loss_rpn_cls_fpn4": 0.005500, "loss_rpn_cls_fpn5": 0.003361, "loss_rpn_cls_fpn6": 0.002426, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.506088}
json_stats: {"accuracy_cls": 0.898926, "eta": "12:19:20", "iter": 2320, "loss": 0.713730, "loss_bbox": 0.198302, "loss_cls": 0.240680, "loss_mask": 0.179741, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003322, "loss_rpn_bbox_fpn4": 0.007346, "loss_rpn_bbox_fpn5": 0.007298, "loss_rpn_bbox_fpn6": 0.003992, "loss_rpn_cls_fpn2": 0.001981, "loss_rpn_cls_fpn3": 0.003950, "loss_rpn_cls_fpn4": 0.007015, "loss_rpn_cls_fpn5": 0.001951, "loss_rpn_cls_fpn6": 0.001410, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.505936}
json_stats: {"accuracy_cls": 0.879692, "eta": "12:19:18", "iter": 2340, "loss": 0.799723, "loss_bbox": 0.220887, "loss_cls": 0.280476, "loss_mask": 0.206571, "loss_rpn_bbox_fpn2": 0.000663, "loss_rpn_bbox_fpn3": 0.004553, "loss_rpn_bbox_fpn4": 0.007733, "loss_rpn_bbox_fpn5": 0.010757, "loss_rpn_bbox_fpn6": 0.005310, "loss_rpn_cls_fpn2": 0.001967, "loss_rpn_cls_fpn3": 0.006628, "loss_rpn_cls_fpn4": 0.007221, "loss_rpn_cls_fpn5": 0.003168, "loss_rpn_cls_fpn6": 0.002780, "lr": 0.003000, "mb_qsize": 64, "mem": 7635, "time": 0.506030}
json_stats: {"accuracy_cls": 0.894377, "eta": "12:18:50", "iter": 2360, "loss": 0.702318, "loss_bbox": 0.198788, "loss_cls": 0.244158, "loss_mask": 0.204713, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003834, "loss_rpn_bbox_fpn4": 0.009767, "loss_rpn_bbox_fpn5": 0.010414, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001497, "loss_rpn_cls_fpn3": 0.005830, "loss_rpn_cls_fpn4": 0.004639, "loss_rpn_cls_fpn5": 0.001559, "loss_rpn_cls_fpn6": 0.000982, "lr": 0.003000, "mb_qsize": 64, "mem": 7636, "time": 0.505825}
json_stats: {"accuracy_cls": 0.883301, "eta": "12:18:29", "iter": 2380, "loss": 0.735972, "loss_bbox": 0.189897, "loss_cls": 0.266336, "loss_mask": 0.164877, "loss_rpn_bbox_fpn2": 0.000127, "loss_rpn_bbox_fpn3": 0.006538, "loss_rpn_bbox_fpn4": 0.014336, "loss_rpn_bbox_fpn5": 0.002986, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000623, "loss_rpn_cls_fpn3": 0.006400, "loss_rpn_cls_fpn4": 0.006581, "loss_rpn_cls_fpn5": 0.002927, "loss_rpn_cls_fpn6": 0.000050, "lr": 0.003000, "mb_qsize": 64, "mem": 7636, "time": 0.505695}
json_stats: {"accuracy_cls": 0.873233, "eta": "12:18:42", "iter": 2400, "loss": 0.755295, "loss_bbox": 0.210502, "loss_cls": 0.280792, "loss_mask": 0.192789, "loss_rpn_bbox_fpn2": 0.001350, "loss_rpn_bbox_fpn3": 0.007360, "loss_rpn_bbox_fpn4": 0.015052, "loss_rpn_bbox_fpn5": 0.011887, "loss_rpn_bbox_fpn6": 0.001346, "loss_rpn_cls_fpn2": 0.001099, "loss_rpn_cls_fpn3": 0.007384, "loss_rpn_cls_fpn4": 0.006773, "loss_rpn_cls_fpn5": 0.004265, "loss_rpn_cls_fpn6": 0.000383, "lr": 0.003000, "mb_qsize": 64, "mem": 7636, "time": 0.505961}
json_stats: {"accuracy_cls": 0.887753, "eta": "12:18:29", "iter": 2420, "loss": 0.653757, "loss_bbox": 0.192854, "loss_cls": 0.257535, "loss_mask": 0.177951, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005169, "loss_rpn_bbox_fpn4": 0.014212, "loss_rpn_bbox_fpn5": 0.008513, "loss_rpn_bbox_fpn6": 0.000489, "loss_rpn_cls_fpn2": 0.000994, "loss_rpn_cls_fpn3": 0.006003, "loss_rpn_cls_fpn4": 0.006386, "loss_rpn_cls_fpn5": 0.002721, "loss_rpn_cls_fpn6": 0.000243, "lr": 0.003000, "mb_qsize": 64, "mem": 7636, "time": 0.505932}
json_stats: {"accuracy_cls": 0.895448, "eta": "12:18:22", "iter": 2440, "loss": 0.687663, "loss_bbox": 0.195487, "loss_cls": 0.240347, "loss_mask": 0.172037, "loss_rpn_bbox_fpn2": 0.000427, "loss_rpn_bbox_fpn3": 0.002797, "loss_rpn_bbox_fpn4": 0.010325, "loss_rpn_bbox_fpn5": 0.012388, "loss_rpn_bbox_fpn6": 0.002848, "loss_rpn_cls_fpn2": 0.000879, "loss_rpn_cls_fpn3": 0.005990, "loss_rpn_cls_fpn4": 0.003029, "loss_rpn_cls_fpn5": 0.006066, "loss_rpn_cls_fpn6": 0.000858, "lr": 0.003000, "mb_qsize": 64, "mem": 7636, "time": 0.505970}
json_stats: {"accuracy_cls": 0.873324, "eta": "12:18:15", "iter": 2460, "loss": 0.748562, "loss_bbox": 0.206081, "loss_cls": 0.281402, "loss_mask": 0.178191, "loss_rpn_bbox_fpn2": 0.001529, "loss_rpn_bbox_fpn3": 0.005785, "loss_rpn_bbox_fpn4": 0.006016, "loss_rpn_bbox_fpn5": 0.006868, "loss_rpn_bbox_fpn6": 0.002522, "loss_rpn_cls_fpn2": 0.002879, "loss_rpn_cls_fpn3": 0.006498, "loss_rpn_cls_fpn4": 0.005344, "loss_rpn_cls_fpn5": 0.003092, "loss_rpn_cls_fpn6": 0.000682, "lr": 0.003000, "mb_qsize": 64, "mem": 7636, "time": 0.506006}
json_stats: {"accuracy_cls": 0.902344, "eta": "12:18:06", "iter": 2480, "loss": 0.653535, "loss_bbox": 0.189942, "loss_cls": 0.222803, "loss_mask": 0.184888, "loss_rpn_bbox_fpn2": 0.000220, "loss_rpn_bbox_fpn3": 0.002624, "loss_rpn_bbox_fpn4": 0.005601, "loss_rpn_bbox_fpn5": 0.003200, "loss_rpn_bbox_fpn6": 0.002096, "loss_rpn_cls_fpn2": 0.001081, "loss_rpn_cls_fpn3": 0.005206, "loss_rpn_cls_fpn4": 0.002655, "loss_rpn_cls_fpn5": 0.003457, "loss_rpn_cls_fpn6": 0.001288, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506012}
json_stats: {"accuracy_cls": 0.893373, "eta": "12:17:48", "iter": 2500, "loss": 0.714571, "loss_bbox": 0.216379, "loss_cls": 0.264356, "loss_mask": 0.180234, "loss_rpn_bbox_fpn2": 0.000387, "loss_rpn_bbox_fpn3": 0.004901, "loss_rpn_bbox_fpn4": 0.010232, "loss_rpn_bbox_fpn5": 0.004996, "loss_rpn_bbox_fpn6": 0.002046, "loss_rpn_cls_fpn2": 0.000515, "loss_rpn_cls_fpn3": 0.008287, "loss_rpn_cls_fpn4": 0.006066, "loss_rpn_cls_fpn5": 0.001538, "loss_rpn_cls_fpn6": 0.001052, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.505927}
json_stats: {"accuracy_cls": 0.886719, "eta": "12:17:45", "iter": 2520, "loss": 0.723033, "loss_bbox": 0.181837, "loss_cls": 0.268332, "loss_mask": 0.182502, "loss_rpn_bbox_fpn2": 0.000976, "loss_rpn_bbox_fpn3": 0.006418, "loss_rpn_bbox_fpn4": 0.010810, "loss_rpn_bbox_fpn5": 0.008390, "loss_rpn_bbox_fpn6": 0.001733, "loss_rpn_cls_fpn2": 0.001506, "loss_rpn_cls_fpn3": 0.005603, "loss_rpn_cls_fpn4": 0.004670, "loss_rpn_cls_fpn5": 0.004336, "loss_rpn_cls_fpn6": 0.001027, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506012}
json_stats: {"accuracy_cls": 0.883301, "eta": "12:17:47", "iter": 2540, "loss": 0.711960, "loss_bbox": 0.215613, "loss_cls": 0.262531, "loss_mask": 0.177756, "loss_rpn_bbox_fpn2": 0.001762, "loss_rpn_bbox_fpn3": 0.004856, "loss_rpn_bbox_fpn4": 0.010456, "loss_rpn_bbox_fpn5": 0.013378, "loss_rpn_bbox_fpn6": 0.003210, "loss_rpn_cls_fpn2": 0.001957, "loss_rpn_cls_fpn3": 0.005117, "loss_rpn_cls_fpn4": 0.006141, "loss_rpn_cls_fpn5": 0.002494, "loss_rpn_cls_fpn6": 0.000687, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506151}
json_stats: {"accuracy_cls": 0.888086, "eta": "12:17:39", "iter": 2560, "loss": 0.752321, "loss_bbox": 0.213034, "loss_cls": 0.268034, "loss_mask": 0.195782, "loss_rpn_bbox_fpn2": 0.000705, "loss_rpn_bbox_fpn3": 0.003880, "loss_rpn_bbox_fpn4": 0.009620, "loss_rpn_bbox_fpn5": 0.012599, "loss_rpn_bbox_fpn6": 0.001439, "loss_rpn_cls_fpn2": 0.001422, "loss_rpn_cls_fpn3": 0.003888, "loss_rpn_cls_fpn4": 0.005231, "loss_rpn_cls_fpn5": 0.003704, "loss_rpn_cls_fpn6": 0.000821, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506175}
json_stats: {"accuracy_cls": 0.903275, "eta": "12:17:20", "iter": 2580, "loss": 0.603494, "loss_bbox": 0.180703, "loss_cls": 0.226119, "loss_mask": 0.150203, "loss_rpn_bbox_fpn2": 0.000702, "loss_rpn_bbox_fpn3": 0.005935, "loss_rpn_bbox_fpn4": 0.006593, "loss_rpn_bbox_fpn5": 0.007289, "loss_rpn_bbox_fpn6": 0.000405, "loss_rpn_cls_fpn2": 0.003057, "loss_rpn_cls_fpn3": 0.007342, "loss_rpn_cls_fpn4": 0.003060, "loss_rpn_cls_fpn5": 0.003050, "loss_rpn_cls_fpn6": 0.000573, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506072}
json_stats: {"accuracy_cls": 0.882545, "eta": "12:17:13", "iter": 2600, "loss": 0.763979, "loss_bbox": 0.193822, "loss_cls": 0.272427, "loss_mask": 0.191337, "loss_rpn_bbox_fpn2": 0.000970, "loss_rpn_bbox_fpn3": 0.003331, "loss_rpn_bbox_fpn4": 0.010564, "loss_rpn_bbox_fpn5": 0.008142, "loss_rpn_bbox_fpn6": 0.000544, "loss_rpn_cls_fpn2": 0.002391, "loss_rpn_cls_fpn3": 0.006912, "loss_rpn_cls_fpn4": 0.007313, "loss_rpn_cls_fpn5": 0.002939, "loss_rpn_cls_fpn6": 0.000690, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506107}
json_stats: {"accuracy_cls": 0.884766, "eta": "12:17:08", "iter": 2620, "loss": 0.711609, "loss_bbox": 0.190626, "loss_cls": 0.268266, "loss_mask": 0.155954, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005552, "loss_rpn_bbox_fpn4": 0.014362, "loss_rpn_bbox_fpn5": 0.007445, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001032, "loss_rpn_cls_fpn3": 0.007637, "loss_rpn_cls_fpn4": 0.004962, "loss_rpn_cls_fpn5": 0.002702, "loss_rpn_cls_fpn6": 0.000016, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506163}
json_stats: {"accuracy_cls": 0.897728, "eta": "12:16:53", "iter": 2640, "loss": 0.691479, "loss_bbox": 0.203347, "loss_cls": 0.238964, "loss_mask": 0.181262, "loss_rpn_bbox_fpn2": 0.000145, "loss_rpn_bbox_fpn3": 0.003653, "loss_rpn_bbox_fpn4": 0.009341, "loss_rpn_bbox_fpn5": 0.006572, "loss_rpn_bbox_fpn6": 0.004212, "loss_rpn_cls_fpn2": 0.000632, "loss_rpn_cls_fpn3": 0.005578, "loss_rpn_cls_fpn4": 0.005231, "loss_rpn_cls_fpn5": 0.002726, "loss_rpn_cls_fpn6": 0.001161, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506110}
json_stats: {"accuracy_cls": 0.874512, "eta": "12:16:51", "iter": 2660, "loss": 0.764862, "loss_bbox": 0.207841, "loss_cls": 0.306030, "loss_mask": 0.168707, "loss_rpn_bbox_fpn2": 0.000266, "loss_rpn_bbox_fpn3": 0.004851, "loss_rpn_bbox_fpn4": 0.017424, "loss_rpn_bbox_fpn5": 0.009917, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002257, "loss_rpn_cls_fpn3": 0.006606, "loss_rpn_cls_fpn4": 0.005382, "loss_rpn_cls_fpn5": 0.002526, "loss_rpn_cls_fpn6": 0.000034, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506197}
json_stats: {"accuracy_cls": 0.888936, "eta": "12:16:29", "iter": 2680, "loss": 0.728542, "loss_bbox": 0.200659, "loss_cls": 0.243116, "loss_mask": 0.172613, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005142, "loss_rpn_bbox_fpn4": 0.010123, "loss_rpn_bbox_fpn5": 0.015779, "loss_rpn_bbox_fpn6": 0.001592, "loss_rpn_cls_fpn2": 0.000618, "loss_rpn_cls_fpn3": 0.004739, "loss_rpn_cls_fpn4": 0.005359, "loss_rpn_cls_fpn5": 0.004345, "loss_rpn_cls_fpn6": 0.000633, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506069}
json_stats: {"accuracy_cls": 0.886021, "eta": "12:16:10", "iter": 2700, "loss": 0.703261, "loss_bbox": 0.201284, "loss_cls": 0.253787, "loss_mask": 0.171284, "loss_rpn_bbox_fpn2": 0.000208, "loss_rpn_bbox_fpn3": 0.005210, "loss_rpn_bbox_fpn4": 0.010660, "loss_rpn_bbox_fpn5": 0.005221, "loss_rpn_bbox_fpn6": 0.000057, "loss_rpn_cls_fpn2": 0.002759, "loss_rpn_cls_fpn3": 0.003987, "loss_rpn_cls_fpn4": 0.004074, "loss_rpn_cls_fpn5": 0.002187, "loss_rpn_cls_fpn6": 0.000280, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.505968}
json_stats: {"accuracy_cls": 0.901750, "eta": "12:16:03", "iter": 2720, "loss": 0.710362, "loss_bbox": 0.199517, "loss_cls": 0.254800, "loss_mask": 0.174685, "loss_rpn_bbox_fpn2": 0.000626, "loss_rpn_bbox_fpn3": 0.002721, "loss_rpn_bbox_fpn4": 0.011071, "loss_rpn_bbox_fpn5": 0.012990, "loss_rpn_bbox_fpn6": 0.001789, "loss_rpn_cls_fpn2": 0.001645, "loss_rpn_cls_fpn3": 0.003355, "loss_rpn_cls_fpn4": 0.004482, "loss_rpn_cls_fpn5": 0.003577, "loss_rpn_cls_fpn6": 0.000782, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.506003}
json_stats: {"accuracy_cls": 0.891113, "eta": "12:15:51", "iter": 2740, "loss": 0.651103, "loss_bbox": 0.186821, "loss_cls": 0.239081, "loss_mask": 0.165687, "loss_rpn_bbox_fpn2": 0.000728, "loss_rpn_bbox_fpn3": 0.004518, "loss_rpn_bbox_fpn4": 0.013489, "loss_rpn_bbox_fpn5": 0.003842, "loss_rpn_bbox_fpn6": 0.001125, "loss_rpn_cls_fpn2": 0.001027, "loss_rpn_cls_fpn3": 0.007808, "loss_rpn_cls_fpn4": 0.006558, "loss_rpn_cls_fpn5": 0.003616, "loss_rpn_cls_fpn6": 0.000154, "lr": 0.003000, "mb_qsize": 64, "mem": 7637, "time": 0.505973}
