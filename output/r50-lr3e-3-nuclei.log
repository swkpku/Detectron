Found Detectron ops lib: /usr/local/lib/libcaffe2_detectron_ops_gpu.so
Found Detectron ops lib: /usr/local/lib/libcaffe2_detectron_ops_gpu.so
INFO train_net.py: 104: Called with args:
INFO train_net.py: 105: Namespace(cfg_file='configs/nuclei/e2e_mask_rcnn_R-50-FPN_1x-lr3e-3-nulei.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/tmp/detectron-output-nuclei-r50'], skip_test=False)
INFO train_net.py: 111: Training with config:
INFO train_net.py: 112: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'MLP_HEAD_DIM': 1024,
               'ROI_BOX_HEAD': 'fast_rcnn_heads.add_roi_2mlp_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 7,
               'ROI_XFORM_SAMPLING_RATIO': 2},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': True,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 5,
         'RPN_MIN_LEVEL': 2,
         'ZERO_INIT_LATERAL': False},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet50_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': True,
           'NUM_CLASSES': 2,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'MSRAFill',
           'DILATION': 1,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': 'mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 2,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/tmp/detectron-output-nuclei-r50',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/swk/Documents/ML/Detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASET': '',
          'DATASETS': ('dsb_2018_val',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.5,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILE': '',
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALES': (600,),
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 512,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('dsb_2018_train',),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 2000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (600,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train_net.py: 205: Building model: generalized_rcnn
WARNING cnn.py:  40: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING memonger.py:  70: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py: 112: Memonger memory optimization took 0.0206780433655 secs
INFO train_net.py: 253: Loading dataset: ('dsb_2018_train',)
loading annotations into memory...
Done (t=0.46s)
creating index...
index created!
INFO roidb.py:  49: Appending horizontally-flipped training examples...
INFO roidb.py:  51: Loaded dataset: dsb_2018_train
INFO roidb.py: 135: Filtered 0 roidb entries: 1072 -> 1072
INFO roidb.py:  67: Computing bounding-box regression targets...
INFO roidb.py:  69: done
INFO train_net.py: 257: 1072 roidb entries
INFO net.py:  57: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  86: fpn_inner_res5_2_sum_w not found
INFO net.py:  86: fpn_inner_res5_2_sum_b not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_b not found
INFO net.py:  86: fpn_res5_2_sum_w not found
INFO net.py:  86: fpn_res5_2_sum_b not found
INFO net.py:  86: fpn_res4_5_sum_w not found
INFO net.py:  86: fpn_res4_5_sum_b not found
INFO net.py:  86: fpn_res3_3_sum_w not found
INFO net.py:  86: fpn_res3_3_sum_b not found
INFO net.py:  86: fpn_res2_2_sum_w not found
INFO net.py:  86: fpn_res2_2_sum_b not found
INFO net.py:  86: conv_rpn_fpn2_w not found
INFO net.py:  86: conv_rpn_fpn2_b not found
INFO net.py:  86: rpn_cls_logits_fpn2_w not found
INFO net.py:  86: rpn_cls_logits_fpn2_b not found
INFO net.py:  86: rpn_bbox_pred_fpn2_w not found
INFO net.py:  86: rpn_bbox_pred_fpn2_b not found
INFO net.py:  86: fc6_w not found
INFO net.py:  86: fc6_b not found
INFO net.py:  86: fc7_w not found
INFO net.py:  86: fc7_b not found
INFO net.py:  86: cls_score_w not found
INFO net.py:  86: cls_score_b not found
INFO net.py:  86: bbox_pred_w not found
INFO net.py:  86: bbox_pred_b not found
INFO net.py:  86: fcn1_w not found
INFO net.py:  86: fcn1_b not found
INFO net.py:  86: fcn2_w not found
INFO net.py:  86: fcn2_b not found
INFO net.py:  86: fcn3_w not found
INFO net.py:  86: fcn3_b not found
INFO net.py:  86: fcn4_w not found
INFO net.py:  86: fcn4_b not found
INFO net.py:  86: conv5_mask_w not found
INFO net.py:  86: conv5_mask_b not found
INFO net.py:  86: mask_fcn_logits_w not found
INFO net.py:  86: mask_fcn_logits_b not found
INFO train_net.py: 241: Outputs saved to: /tmp/detectron-output-nuclei-r50/train/dsb_2018_train/generalized_rcnn
INFO loader.py: 227: Pre-filling mini-batch queue...
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [3/64]
INFO loader.py: 232:   [3/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [6/64]
INFO loader.py: 232:   [8/64]
INFO loader.py: 232:   [8/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [10/64]
INFO loader.py: 232:   [10/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [17/64]
INFO loader.py: 232:   [18/64]
INFO loader.py: 232:   [18/64]
INFO loader.py: 232:   [20/64]
INFO loader.py: 232:   [20/64]
INFO loader.py: 232:   [21/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [24/64]
INFO loader.py: 232:   [25/64]
INFO loader.py: 232:   [25/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [27/64]
INFO loader.py: 232:   [28/64]
INFO loader.py: 232:   [29/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [31/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [33/64]
INFO loader.py: 232:   [33/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [36/64]
INFO loader.py: 232:   [37/64]
INFO loader.py: 232:   [38/64]
INFO loader.py: 232:   [39/64]
INFO loader.py: 232:   [40/64]
INFO loader.py: 232:   [41/64]
INFO loader.py: 232:   [41/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [44/64]
INFO loader.py: 232:   [46/64]
INFO loader.py: 232:   [47/64]
INFO loader.py: 232:   [48/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [52/64]
INFO loader.py: 232:   [53/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [56/64]
INFO loader.py: 232:   [57/64]
INFO loader.py: 232:   [58/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [60/64]
INFO loader.py: 232:   [61/64]
INFO loader.py: 232:   [62/64]
INFO loader.py: 232:   [62/64]
INFO loader.py: 232:   [63/64]
INFO detector.py: 436: Changing learning rate 0.000000 -> 0.000333 at iter 0
INFO net.py: 210: Printing model: generalized_rcnn
INFO net.py: 240: data                        : (2, 3, 608, 608)     => conv1                       : (2, 64, 304, 304)    ------- (op: Conv)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => conv1                       : (2, 64, 304, 304)    ------- (op: AffineChannel)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => conv1                       : (2, 64, 304, 304)    ------- (op: Relu)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => pool1                       : (2, 64, 152, 152)    ------- (op: MaxPool)
INFO net.py: 240: pool1                       : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch2c             : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: pool1                       : (2, 64, 152, 152)    => res2_0_branch1              : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch1              : (2, 256, 152, 152)   => res2_0_branch1_bn           : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch1_bn           : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_1_branch2c             : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_2_branch2c             : (2, 256, 152, 152)   => res2_2_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2c_bn          : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: StopGradient)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2c             : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res3_0_branch1              : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch1              : (2, 512, 76, 76)     => res3_0_branch1_bn           : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_0_branch1_bn           : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2c             : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2c             : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2c             : (2, 512, 76, 76)     => res3_3_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2c_bn          : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch2c             : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res4_0_branch1              : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch1              : (2, 1024, 38, 38)    => res4_0_branch1_bn           : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch1_bn           : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_1_branch2c             : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_2_branch2c             : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_3_branch2c             : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_4_branch2c             : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_5_branch2c             : (2, 1024, 38, 38)    => res4_5_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch2c             : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res5_0_branch1              : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch1              : (2, 2048, 19, 19)    => res5_0_branch1_bn           : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch1_bn           : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_1_branch2c             : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_2_branch2c             : (2, 2048, 19, 19)    => res5_2_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_2_sum                  : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_2_sum                  : (2, 2048, 19, 19)    => fpn_inner_res5_2_sum        : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => fpn_inner_res4_5_sum_lateral: (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 19, 19)     => fpn_inner_res4_5_sum_topdown: (2, 256, 38, 38)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res4_5_sum_lateral: (2, 256, 38, 38)     => fpn_inner_res4_5_sum        : (2, 256, 38, 38)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res4_5_sum_topdown: (2, 256, 38, 38)     => fpn_inner_res4_5_sum        : (2, 256, 38, 38)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => fpn_inner_res3_3_sum_lateral: (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 38, 38)     => fpn_inner_res3_3_sum_topdown: (2, 256, 76, 76)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res3_3_sum_lateral: (2, 256, 76, 76)     => fpn_inner_res3_3_sum        : (2, 256, 76, 76)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res3_3_sum_topdown: (2, 256, 76, 76)     => fpn_inner_res3_3_sum        : (2, 256, 76, 76)     ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => fpn_inner_res2_2_sum_lateral: (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 76, 76)     => fpn_inner_res2_2_sum_topdown: (2, 256, 152, 152)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res2_2_sum_lateral: (2, 256, 152, 152)   => fpn_inner_res2_2_sum        : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res2_2_sum_topdown: (2, 256, 152, 152)   => fpn_inner_res2_2_sum        : (2, 256, 152, 152)   ------|
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 19, 19)     => fpn_res5_2_sum              : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 38, 38)     => fpn_res4_5_sum              : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 76, 76)     => fpn_res3_3_sum              : (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res2_2_sum        : (2, 256, 152, 152)   => fpn_res2_2_sum              : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => conv_rpn_fpn2               : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => conv_rpn_fpn2               : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => rpn_cls_logits_fpn2         : (2, 3, 152, 152)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => rpn_cls_probs_fpn2          : (2, 3, 152, 152)     ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn2          : (2, 3, 152, 152)     => rpn_rois_fpn2               : (1608, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn2,gpu_0/rpn_bbox_pred_fpn2,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_rois_fpn2               : (1608, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn2               : (1608, 5)            ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => conv_rpn_fpn3               : (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => conv_rpn_fpn3               : (2, 256, 76, 76)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => rpn_cls_logits_fpn3         : (2, 3, 76, 76)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => rpn_cls_probs_fpn3          : (2, 3, 76, 76)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn3          : (2, 3, 76, 76)       => rpn_rois_fpn3               : (1887, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn3,gpu_0/rpn_bbox_pred_fpn3,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_rois_fpn3               : (1887, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn3               : (1887, 5)            ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => conv_rpn_fpn4               : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => conv_rpn_fpn4               : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => rpn_cls_logits_fpn4         : (2, 3, 38, 38)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => rpn_cls_probs_fpn4          : (2, 3, 38, 38)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn4          : (2, 3, 38, 38)       => rpn_rois_fpn4               : (1345, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn4,gpu_0/rpn_bbox_pred_fpn4,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_rois_fpn4               : (1345, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn4               : (1345, 5)            ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => conv_rpn_fpn5               : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => conv_rpn_fpn5               : (2, 256, 19, 19)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => rpn_cls_logits_fpn5         : (2, 3, 19, 19)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => rpn_cls_probs_fpn5          : (2, 3, 19, 19)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn5          : (2, 3, 19, 19)       => rpn_rois_fpn5               : (634, 5)             ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn5,gpu_0/rpn_bbox_pred_fpn5,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_rois_fpn5               : (634, 5)             ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn5               : (634, 5)             ------|
INFO net.py: 240: rpn_rois_fpn2               : (1608, 5)            => rois                        : (1024, 5)            ------- (op: Python:CollectAndDistributeFpnRpnProposalsOp:gpu_0/rpn_rois_fpn2,gpu_0/rpn_rois_fpn3,gpu_0/rpn_rois_fpn4,gpu_0/rpn_rois_fpn5,gpu_0/rpn_roi_probs_fpn2,gpu_0/rpn_roi_probs_fpn3,gpu_0/rpn_roi_probs_fpn4,gpu_0/rpn_roi_probs_fpn5,gpu_0/roidb,gpu_0/im_info)
INFO net.py: 240: rpn_rois_fpn3               : (1887, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn4               : (1345, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn5               : (634, 5)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn2          : (1608, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn3          : (1887, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn4          : (1345, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn5          : (634, 1)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: roidb                       : (25072,)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn2  : (2, 3, 336, 336)     => rpn_labels_int32_fpn2       : (2, 3, 152, 152)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => rpn_labels_int32_fpn2       : (2, 3, 152, 152)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn2  : (2, 12, 336, 336)    => rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => loss_rpn_cls_fpn2           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn2       : (2, 3, 152, 152)     => loss_rpn_cls_fpn2           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn3  : (2, 3, 168, 168)     => rpn_labels_int32_fpn3       : (2, 3, 76, 76)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => rpn_labels_int32_fpn3       : (2, 3, 76, 76)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn3  : (2, 12, 168, 168)    => rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => loss_rpn_cls_fpn3           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn3       : (2, 3, 76, 76)       => loss_rpn_cls_fpn3           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn4  : (2, 3, 84, 84)       => rpn_labels_int32_fpn4       : (2, 3, 38, 38)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => rpn_labels_int32_fpn4       : (2, 3, 38, 38)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn4  : (2, 12, 84, 84)      => rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => loss_rpn_cls_fpn4           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn4       : (2, 3, 38, 38)       => loss_rpn_cls_fpn4           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn5  : (2, 3, 42, 42)       => rpn_labels_int32_fpn5       : (2, 3, 19, 19)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => rpn_labels_int32_fpn5       : (2, 3, 19, 19)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn5  : (2, 12, 42, 42)      => rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => loss_rpn_cls_fpn5           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn5       : (2, 3, 19, 19)       => loss_rpn_cls_fpn5           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => roi_feat_fpn2               : (865, 256, 7, 7)     ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn2                   : (865, 5)             => roi_feat_fpn2               : (865, 256, 7, 7)     ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => roi_feat_fpn3               : (134, 256, 7, 7)     ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn3                   : (134, 5)             => roi_feat_fpn3               : (134, 256, 7, 7)     ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => roi_feat_fpn4               : (25, 256, 7, 7)      ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn4                   : (25, 5)              => roi_feat_fpn4               : (25, 256, 7, 7)      ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => roi_feat_fpn5               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn5                   : (0, 5)               => roi_feat_fpn5               : (0, 256, 7, 7)       ------|
INFO net.py: 240: roi_feat_fpn2               : (865, 256, 7, 7)     => roi_feat_shuffled           : (1024, 256, 7, 7)    ------- (op: Concat)
INFO net.py: 240: roi_feat_fpn3               : (134, 256, 7, 7)     => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn4               : (25, 256, 7, 7)      => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn5               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_shuffled           : (1024, 256, 7, 7)    => roi_feat                    : (1024, 256, 7, 7)    ------- (op: BatchPermutation)
INFO net.py: 240: rois_idx_restore_int32      : (1024,)              => roi_feat                    : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat                    : (1024, 256, 7, 7)    => fc6                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc6                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc7                         : (1024, 1024)         => cls_score                   : (1024, 2)            ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => bbox_pred                   : (1024, 8)            ------- (op: FC)
INFO net.py: 240: cls_score                   : (1024, 2)            => cls_prob                    : (1024, 2)            ------- (op: SoftmaxWithLoss)
INFO net.py: 240: labels_int32                : (1024,)              => cls_prob                    : (1024, 2)            ------|
INFO net.py: 240: bbox_pred                   : (1024, 8)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: bbox_targets                : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_inside_weights         : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_outside_weights        : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: cls_prob                    : (1024, 2)            => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 240: labels_int32                : (1024,)              => accuracy_cls                : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => _[mask]_roi_feat_fpn2       : (65, 256, 7, 7)      ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn2              : (65, 5)              => _[mask]_roi_feat_fpn2       : (65, 256, 7, 7)      ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn3              : (0, 5)               => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn4              : (0, 5)               => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn5              : (0, 5)               => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------|
INFO net.py: 240: _[mask]_roi_feat_fpn2       : (65, 256, 7, 7)      => _[mask]_roi_feat_shuffled   : (65, 256, 7, 7)      ------- (op: Concat)
INFO net.py: 240: _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (65, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (65, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (65, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_shuffled   : (65, 256, 7, 7)      => _[mask]_roi_feat            : (65, 256, 7, 7)      ------- (op: BatchPermutation)
INFO net.py: 240: mask_rois_idx_restore_int32 : (65,)                => _[mask]_roi_feat            : (65, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat            : (65, 256, 7, 7)      => _[mask]_fcn1                : (65, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn1                : (65, 256, 7, 7)      => _[mask]_fcn1                : (65, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn1                : (65, 256, 7, 7)      => _[mask]_fcn2                : (65, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn2                : (65, 256, 7, 7)      => _[mask]_fcn2                : (65, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn2                : (65, 256, 7, 7)      => _[mask]_fcn3                : (65, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn3                : (65, 256, 7, 7)      => _[mask]_fcn3                : (65, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn3                : (65, 256, 7, 7)      => _[mask]_fcn4                : (65, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn4                : (65, 256, 7, 7)      => _[mask]_fcn4                : (65, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn4                : (65, 256, 7, 7)      => conv5_mask                  : (65, 256, 14, 14)    ------- (op: ConvTranspose)
INFO net.py: 240: conv5_mask                  : (65, 256, 14, 14)    => conv5_mask                  : (65, 256, 14, 14)    ------- (op: Relu)
INFO net.py: 240: conv5_mask                  : (65, 256, 14, 14)    => mask_fcn_logits             : (65, 2, 14, 14)      ------- (op: Conv)
INFO net.py: 240: mask_fcn_logits             : (65, 2, 14, 14)      => loss_mask                   : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: masks_int32                 : (65, 392)            => loss_mask                   : ()                   ------|
INFO net.py: 244: End of model: generalized_rcnn
json_stats: {"accuracy_cls": 0.106445, "eta": "3 days, 22:19:14", "iter": 0, "loss": 5.949062, "loss_bbox": 0.083531, "loss_cls": 1.082273, "loss_mask": 3.779477, "loss_rpn_bbox_fpn2": 0.300834, "loss_rpn_bbox_fpn3": 0.021328, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.544903, "loss_rpn_cls_fpn3": 0.120423, "loss_rpn_cls_fpn4": 0.012364, "loss_rpn_cls_fpn5": 0.003929, "lr": 0.000333, "mb_qsize": 64, "mem": 3426, "time": 3.772823}
json_stats: {"accuracy_cls": 0.865723, "eta": "11:57:06", "iter": 20, "loss": 2.842759, "loss_bbox": 0.123893, "loss_cls": 0.378927, "loss_mask": 0.998936, "loss_rpn_bbox_fpn2": 0.328799, "loss_rpn_bbox_fpn3": 0.008310, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.529786, "loss_rpn_cls_fpn3": 0.099786, "loss_rpn_cls_fpn4": 0.019243, "loss_rpn_cls_fpn5": 0.001354, "lr": 0.000360, "mb_qsize": 64, "mem": 4303, "time": 0.478180}
json_stats: {"accuracy_cls": 0.874023, "eta": "6:56:24", "iter": 40, "loss": 1.776664, "loss_bbox": 0.217836, "loss_cls": 0.325652, "loss_mask": 0.450694, "loss_rpn_bbox_fpn2": 0.196244, "loss_rpn_bbox_fpn3": 0.014797, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.448778, "loss_rpn_cls_fpn3": 0.106254, "loss_rpn_cls_fpn4": 0.017267, "loss_rpn_cls_fpn5": 0.001326, "lr": 0.000387, "mb_qsize": 64, "mem": 4312, "time": 0.277728}
json_stats: {"accuracy_cls": 0.900879, "eta": "6:56:42", "iter": 60, "loss": 1.715141, "loss_bbox": 0.161420, "loss_cls": 0.313314, "loss_mask": 0.454279, "loss_rpn_bbox_fpn2": 0.197575, "loss_rpn_bbox_fpn3": 0.023758, "loss_rpn_bbox_fpn4": 0.003095, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.349516, "loss_rpn_cls_fpn3": 0.131510, "loss_rpn_cls_fpn4": 0.021658, "loss_rpn_cls_fpn5": 0.001329, "lr": 0.000413, "mb_qsize": 64, "mem": 4312, "time": 0.277995}
json_stats: {"accuracy_cls": 0.872559, "eta": "6:51:39", "iter": 80, "loss": 1.699865, "loss_bbox": 0.195166, "loss_cls": 0.338939, "loss_mask": 0.339039, "loss_rpn_bbox_fpn2": 0.211825, "loss_rpn_bbox_fpn3": 0.022110, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.328233, "loss_rpn_cls_fpn3": 0.101601, "loss_rpn_cls_fpn4": 0.017461, "loss_rpn_cls_fpn5": 0.001993, "lr": 0.000440, "mb_qsize": 64, "mem": 4313, "time": 0.274680}
json_stats: {"accuracy_cls": 0.842285, "eta": "6:49:59", "iter": 100, "loss": 1.560384, "loss_bbox": 0.226414, "loss_cls": 0.365742, "loss_mask": 0.344876, "loss_rpn_bbox_fpn2": 0.177383, "loss_rpn_bbox_fpn3": 0.017467, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.274237, "loss_rpn_cls_fpn3": 0.112658, "loss_rpn_cls_fpn4": 0.017388, "loss_rpn_cls_fpn5": 0.002552, "lr": 0.000467, "mb_qsize": 64, "mem": 4314, "time": 0.273633}
json_stats: {"accuracy_cls": 0.851562, "eta": "6:51:57", "iter": 120, "loss": 1.540499, "loss_bbox": 0.253299, "loss_cls": 0.352627, "loss_mask": 0.301298, "loss_rpn_bbox_fpn2": 0.149301, "loss_rpn_bbox_fpn3": 0.009163, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.272907, "loss_rpn_cls_fpn3": 0.089075, "loss_rpn_cls_fpn4": 0.014957, "loss_rpn_cls_fpn5": 0.002578, "lr": 0.000493, "mb_qsize": 64, "mem": 4314, "time": 0.275002}
json_stats: {"accuracy_cls": 0.862305, "eta": "6:48:51", "iter": 140, "loss": 1.484697, "loss_bbox": 0.232415, "loss_cls": 0.351174, "loss_mask": 0.353549, "loss_rpn_bbox_fpn2": 0.186666, "loss_rpn_bbox_fpn3": 0.028487, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.187821, "loss_rpn_cls_fpn3": 0.104162, "loss_rpn_cls_fpn4": 0.017254, "loss_rpn_cls_fpn5": 0.001983, "lr": 0.000520, "mb_qsize": 64, "mem": 4315, "time": 0.272994}
json_stats: {"accuracy_cls": 0.852051, "eta": "6:52:12", "iter": 160, "loss": 1.537053, "loss_bbox": 0.247277, "loss_cls": 0.336259, "loss_mask": 0.368401, "loss_rpn_bbox_fpn2": 0.205257, "loss_rpn_bbox_fpn3": 0.027217, "loss_rpn_bbox_fpn4": 0.004204, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.215906, "loss_rpn_cls_fpn3": 0.094154, "loss_rpn_cls_fpn4": 0.021948, "loss_rpn_cls_fpn5": 0.001941, "lr": 0.000547, "mb_qsize": 64, "mem": 5834, "time": 0.275296}
json_stats: {"accuracy_cls": 0.867643, "eta": "6:52:15", "iter": 180, "loss": 1.411622, "loss_bbox": 0.212072, "loss_cls": 0.316342, "loss_mask": 0.341128, "loss_rpn_bbox_fpn2": 0.175942, "loss_rpn_bbox_fpn3": 0.022806, "loss_rpn_bbox_fpn4": 0.005151, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.191801, "loss_rpn_cls_fpn3": 0.085891, "loss_rpn_cls_fpn4": 0.028143, "loss_rpn_cls_fpn5": 0.001383, "lr": 0.000573, "mb_qsize": 64, "mem": 5834, "time": 0.275395}
json_stats: {"accuracy_cls": 0.855957, "eta": "6:52:41", "iter": 200, "loss": 1.414948, "loss_bbox": 0.285016, "loss_cls": 0.335529, "loss_mask": 0.255681, "loss_rpn_bbox_fpn2": 0.157091, "loss_rpn_bbox_fpn3": 0.011596, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.183007, "loss_rpn_cls_fpn3": 0.049916, "loss_rpn_cls_fpn4": 0.014927, "loss_rpn_cls_fpn5": 0.001269, "lr": 0.000600, "mb_qsize": 64, "mem": 5834, "time": 0.275742}
json_stats: {"accuracy_cls": 0.856934, "eta": "6:54:16", "iter": 220, "loss": 1.253619, "loss_bbox": 0.280094, "loss_cls": 0.334990, "loss_mask": 0.265208, "loss_rpn_bbox_fpn2": 0.116319, "loss_rpn_bbox_fpn3": 0.020967, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.154984, "loss_rpn_cls_fpn3": 0.088454, "loss_rpn_cls_fpn4": 0.016059, "loss_rpn_cls_fpn5": 0.001890, "lr": 0.000627, "mb_qsize": 64, "mem": 5841, "time": 0.276859}
json_stats: {"accuracy_cls": 0.856540, "eta": "6:54:30", "iter": 240, "loss": 1.254516, "loss_bbox": 0.253101, "loss_cls": 0.340470, "loss_mask": 0.293646, "loss_rpn_bbox_fpn2": 0.109760, "loss_rpn_bbox_fpn3": 0.015800, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.135553, "loss_rpn_cls_fpn3": 0.045137, "loss_rpn_cls_fpn4": 0.013233, "loss_rpn_cls_fpn5": 0.002389, "lr": 0.000653, "mb_qsize": 64, "mem": 5841, "time": 0.277080}
json_stats: {"accuracy_cls": 0.847656, "eta": "6:56:33", "iter": 260, "loss": 1.436879, "loss_bbox": 0.269722, "loss_cls": 0.359191, "loss_mask": 0.291178, "loss_rpn_bbox_fpn2": 0.165615, "loss_rpn_bbox_fpn3": 0.018761, "loss_rpn_bbox_fpn4": 0.000487, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.165725, "loss_rpn_cls_fpn3": 0.063838, "loss_rpn_cls_fpn4": 0.012891, "loss_rpn_cls_fpn5": 0.001253, "lr": 0.000680, "mb_qsize": 64, "mem": 5841, "time": 0.278505}
json_stats: {"accuracy_cls": 0.850586, "eta": "6:57:58", "iter": 280, "loss": 1.230789, "loss_bbox": 0.270911, "loss_cls": 0.332070, "loss_mask": 0.256586, "loss_rpn_bbox_fpn2": 0.143639, "loss_rpn_bbox_fpn3": 0.015009, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.137206, "loss_rpn_cls_fpn3": 0.037769, "loss_rpn_cls_fpn4": 0.010079, "loss_rpn_cls_fpn5": 0.001300, "lr": 0.000707, "mb_qsize": 64, "mem": 5841, "time": 0.279518}
json_stats: {"accuracy_cls": 0.835449, "eta": "6:59:59", "iter": 300, "loss": 1.338733, "loss_bbox": 0.288407, "loss_cls": 0.377525, "loss_mask": 0.263942, "loss_rpn_bbox_fpn2": 0.145453, "loss_rpn_bbox_fpn3": 0.018881, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.160507, "loss_rpn_cls_fpn3": 0.042588, "loss_rpn_cls_fpn4": 0.012680, "loss_rpn_cls_fpn5": 0.001823, "lr": 0.000733, "mb_qsize": 64, "mem": 5847, "time": 0.280929}
json_stats: {"accuracy_cls": 0.844969, "eta": "7:01:31", "iter": 320, "loss": 1.372518, "loss_bbox": 0.274503, "loss_cls": 0.362088, "loss_mask": 0.290360, "loss_rpn_bbox_fpn2": 0.113321, "loss_rpn_bbox_fpn3": 0.022314, "loss_rpn_bbox_fpn4": 0.001099, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.159692, "loss_rpn_cls_fpn3": 0.041221, "loss_rpn_cls_fpn4": 0.013430, "loss_rpn_cls_fpn5": 0.000000, "lr": 0.000760, "mb_qsize": 64, "mem": 5847, "time": 0.282020}
json_stats: {"accuracy_cls": 0.848145, "eta": "7:03:28", "iter": 340, "loss": 1.246026, "loss_bbox": 0.270549, "loss_cls": 0.361137, "loss_mask": 0.294117, "loss_rpn_bbox_fpn2": 0.144245, "loss_rpn_bbox_fpn3": 0.011718, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.149016, "loss_rpn_cls_fpn3": 0.027944, "loss_rpn_cls_fpn4": 0.009693, "loss_rpn_cls_fpn5": 0.001287, "lr": 0.000787, "mb_qsize": 64, "mem": 5854, "time": 0.283382}
json_stats: {"accuracy_cls": 0.822266, "eta": "7:06:14", "iter": 360, "loss": 1.324729, "loss_bbox": 0.281407, "loss_cls": 0.391330, "loss_mask": 0.262870, "loss_rpn_bbox_fpn2": 0.157132, "loss_rpn_bbox_fpn3": 0.012944, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.156324, "loss_rpn_cls_fpn3": 0.019744, "loss_rpn_cls_fpn4": 0.006697, "loss_rpn_cls_fpn5": 0.001258, "lr": 0.000813, "mb_qsize": 64, "mem": 5854, "time": 0.285307}
json_stats: {"accuracy_cls": 0.831543, "eta": "7:06:51", "iter": 380, "loss": 1.272430, "loss_bbox": 0.302944, "loss_cls": 0.383783, "loss_mask": 0.254906, "loss_rpn_bbox_fpn2": 0.104414, "loss_rpn_bbox_fpn3": 0.009836, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.127444, "loss_rpn_cls_fpn3": 0.025578, "loss_rpn_cls_fpn4": 0.008253, "loss_rpn_cls_fpn5": 0.001040, "lr": 0.000840, "mb_qsize": 64, "mem": 5862, "time": 0.285783}
json_stats: {"accuracy_cls": 0.830566, "eta": "7:07:23", "iter": 400, "loss": 1.321327, "loss_bbox": 0.279518, "loss_cls": 0.371467, "loss_mask": 0.257923, "loss_rpn_bbox_fpn2": 0.180555, "loss_rpn_bbox_fpn3": 0.015434, "loss_rpn_bbox_fpn4": 0.000289, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.141393, "loss_rpn_cls_fpn3": 0.028541, "loss_rpn_cls_fpn4": 0.007854, "loss_rpn_cls_fpn5": 0.001125, "lr": 0.000867, "mb_qsize": 64, "mem": 5868, "time": 0.286203}
json_stats: {"accuracy_cls": 0.857372, "eta": "7:08:29", "iter": 420, "loss": 1.176754, "loss_bbox": 0.277096, "loss_cls": 0.328086, "loss_mask": 0.265273, "loss_rpn_bbox_fpn2": 0.118955, "loss_rpn_bbox_fpn3": 0.012890, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.118546, "loss_rpn_cls_fpn3": 0.026320, "loss_rpn_cls_fpn4": 0.009055, "loss_rpn_cls_fpn5": 0.001344, "lr": 0.000893, "mb_qsize": 64, "mem": 5869, "time": 0.287003}
json_stats: {"accuracy_cls": 0.837891, "eta": "7:09:18", "iter": 440, "loss": 1.280681, "loss_bbox": 0.269758, "loss_cls": 0.359436, "loss_mask": 0.248338, "loss_rpn_bbox_fpn2": 0.177628, "loss_rpn_bbox_fpn3": 0.016302, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.178604, "loss_rpn_cls_fpn3": 0.032228, "loss_rpn_cls_fpn4": 0.007999, "loss_rpn_cls_fpn5": 0.002159, "lr": 0.000920, "mb_qsize": 64, "mem": 5870, "time": 0.287606}
json_stats: {"accuracy_cls": 0.836426, "eta": "7:09:42", "iter": 460, "loss": 1.323854, "loss_bbox": 0.292630, "loss_cls": 0.377055, "loss_mask": 0.277535, "loss_rpn_bbox_fpn2": 0.122795, "loss_rpn_bbox_fpn3": 0.021033, "loss_rpn_bbox_fpn4": 0.000684, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.133357, "loss_rpn_cls_fpn3": 0.039181, "loss_rpn_cls_fpn4": 0.010008, "loss_rpn_cls_fpn5": 0.002099, "lr": 0.000947, "mb_qsize": 64, "mem": 5870, "time": 0.287939}
json_stats: {"accuracy_cls": 0.852051, "eta": "7:09:32", "iter": 480, "loss": 1.118156, "loss_bbox": 0.291525, "loss_cls": 0.328864, "loss_mask": 0.222641, "loss_rpn_bbox_fpn2": 0.106866, "loss_rpn_bbox_fpn3": 0.015167, "loss_rpn_bbox_fpn4": 0.000826, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.120542, "loss_rpn_cls_fpn3": 0.024744, "loss_rpn_cls_fpn4": 0.006323, "loss_rpn_cls_fpn5": 0.001229, "lr": 0.000973, "mb_qsize": 64, "mem": 5870, "time": 0.287901}
json_stats: {"accuracy_cls": 0.846191, "eta": "7:09:57", "iter": 500, "loss": 1.143119, "loss_bbox": 0.287446, "loss_cls": 0.343575, "loss_mask": 0.273691, "loss_rpn_bbox_fpn2": 0.115116, "loss_rpn_bbox_fpn3": 0.009674, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.096227, "loss_rpn_cls_fpn3": 0.021801, "loss_rpn_cls_fpn4": 0.004692, "loss_rpn_cls_fpn5": 0.001248, "lr": 0.001000, "mb_qsize": 64, "mem": 5870, "time": 0.288242}
json_stats: {"accuracy_cls": 0.849609, "eta": "7:09:32", "iter": 520, "loss": 1.221372, "loss_bbox": 0.288051, "loss_cls": 0.347919, "loss_mask": 0.247028, "loss_rpn_bbox_fpn2": 0.146624, "loss_rpn_bbox_fpn3": 0.016228, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.127616, "loss_rpn_cls_fpn3": 0.016898, "loss_rpn_cls_fpn4": 0.004074, "loss_rpn_cls_fpn5": 0.001220, "lr": 0.001000, "mb_qsize": 64, "mem": 5876, "time": 0.288024}
json_stats: {"accuracy_cls": 0.858398, "eta": "7:09:29", "iter": 540, "loss": 1.227298, "loss_bbox": 0.265394, "loss_cls": 0.318079, "loss_mask": 0.288370, "loss_rpn_bbox_fpn2": 0.134972, "loss_rpn_bbox_fpn3": 0.014956, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.118914, "loss_rpn_cls_fpn3": 0.027759, "loss_rpn_cls_fpn4": 0.003910, "loss_rpn_cls_fpn5": 0.001182, "lr": 0.001000, "mb_qsize": 64, "mem": 5883, "time": 0.288058}
json_stats: {"accuracy_cls": 0.859375, "eta": "7:09:48", "iter": 560, "loss": 1.091235, "loss_bbox": 0.261993, "loss_cls": 0.319708, "loss_mask": 0.209405, "loss_rpn_bbox_fpn2": 0.143067, "loss_rpn_bbox_fpn3": 0.012939, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.071377, "loss_rpn_cls_fpn3": 0.018075, "loss_rpn_cls_fpn4": 0.005385, "loss_rpn_cls_fpn5": 0.001036, "lr": 0.001000, "mb_qsize": 64, "mem": 5883, "time": 0.288334}
json_stats: {"accuracy_cls": 0.840332, "eta": "7:10:46", "iter": 580, "loss": 1.217922, "loss_bbox": 0.271624, "loss_cls": 0.355475, "loss_mask": 0.270507, "loss_rpn_bbox_fpn2": 0.123536, "loss_rpn_bbox_fpn3": 0.008535, "loss_rpn_bbox_fpn4": 0.000632, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.128700, "loss_rpn_cls_fpn3": 0.020117, "loss_rpn_cls_fpn4": 0.005279, "loss_rpn_cls_fpn5": 0.001207, "lr": 0.001000, "mb_qsize": 64, "mem": 5883, "time": 0.289045}
json_stats: {"accuracy_cls": 0.849916, "eta": "7:10:38", "iter": 600, "loss": 1.154421, "loss_bbox": 0.290145, "loss_cls": 0.329750, "loss_mask": 0.231954, "loss_rpn_bbox_fpn2": 0.138025, "loss_rpn_bbox_fpn3": 0.010914, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.079500, "loss_rpn_cls_fpn3": 0.030475, "loss_rpn_cls_fpn4": 0.005256, "loss_rpn_cls_fpn5": 0.001093, "lr": 0.001000, "mb_qsize": 64, "mem": 5883, "time": 0.289021}
json_stats: {"accuracy_cls": 0.848145, "eta": "7:11:43", "iter": 620, "loss": 1.132296, "loss_bbox": 0.270303, "loss_cls": 0.325968, "loss_mask": 0.246709, "loss_rpn_bbox_fpn2": 0.128637, "loss_rpn_bbox_fpn3": 0.014919, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.090140, "loss_rpn_cls_fpn3": 0.019867, "loss_rpn_cls_fpn4": 0.002187, "loss_rpn_cls_fpn5": 0.001198, "lr": 0.001000, "mb_qsize": 64, "mem": 5884, "time": 0.289808}
json_stats: {"accuracy_cls": 0.858887, "eta": "7:11:30", "iter": 640, "loss": 1.114244, "loss_bbox": 0.259245, "loss_cls": 0.313715, "loss_mask": 0.225199, "loss_rpn_bbox_fpn2": 0.160610, "loss_rpn_bbox_fpn3": 0.014172, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.120674, "loss_rpn_cls_fpn3": 0.020887, "loss_rpn_cls_fpn4": 0.003736, "loss_rpn_cls_fpn5": 0.001008, "lr": 0.001000, "mb_qsize": 64, "mem": 5884, "time": 0.289734}
json_stats: {"accuracy_cls": 0.851243, "eta": "7:11:38", "iter": 660, "loss": 1.155346, "loss_bbox": 0.280212, "loss_cls": 0.323270, "loss_mask": 0.217108, "loss_rpn_bbox_fpn2": 0.129397, "loss_rpn_bbox_fpn3": 0.016622, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.115602, "loss_rpn_cls_fpn3": 0.024105, "loss_rpn_cls_fpn4": 0.002641, "loss_rpn_cls_fpn5": 0.001016, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.289887}
json_stats: {"accuracy_cls": 0.848145, "eta": "7:12:28", "iter": 680, "loss": 1.159609, "loss_bbox": 0.260669, "loss_cls": 0.330833, "loss_mask": 0.232365, "loss_rpn_bbox_fpn2": 0.124386, "loss_rpn_bbox_fpn3": 0.015304, "loss_rpn_bbox_fpn4": 0.000616, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.101892, "loss_rpn_cls_fpn3": 0.027750, "loss_rpn_cls_fpn4": 0.004803, "loss_rpn_cls_fpn5": 0.001800, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290510}
json_stats: {"accuracy_cls": 0.854004, "eta": "7:12:46", "iter": 700, "loss": 1.090227, "loss_bbox": 0.270941, "loss_cls": 0.323954, "loss_mask": 0.240461, "loss_rpn_bbox_fpn2": 0.106184, "loss_rpn_bbox_fpn3": 0.018745, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.103842, "loss_rpn_cls_fpn3": 0.023889, "loss_rpn_cls_fpn4": 0.003841, "loss_rpn_cls_fpn5": 0.001777, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290776}
json_stats: {"accuracy_cls": 0.854794, "eta": "7:12:52", "iter": 720, "loss": 1.174344, "loss_bbox": 0.290439, "loss_cls": 0.333081, "loss_mask": 0.244007, "loss_rpn_bbox_fpn2": 0.088657, "loss_rpn_bbox_fpn3": 0.018787, "loss_rpn_bbox_fpn4": 0.001036, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.118673, "loss_rpn_cls_fpn3": 0.032574, "loss_rpn_cls_fpn4": 0.003748, "loss_rpn_cls_fpn5": 0.001596, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290906}
json_stats: {"accuracy_cls": 0.854492, "eta": "7:12:42", "iter": 740, "loss": 1.109853, "loss_bbox": 0.260860, "loss_cls": 0.316252, "loss_mask": 0.219835, "loss_rpn_bbox_fpn2": 0.143277, "loss_rpn_bbox_fpn3": 0.010047, "loss_rpn_bbox_fpn4": 0.000193, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.104621, "loss_rpn_cls_fpn3": 0.012832, "loss_rpn_cls_fpn4": 0.003183, "loss_rpn_cls_fpn5": 0.001145, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290869}
json_stats: {"accuracy_cls": 0.866211, "eta": "7:12:18", "iter": 760, "loss": 1.038579, "loss_bbox": 0.242939, "loss_cls": 0.303091, "loss_mask": 0.202268, "loss_rpn_bbox_fpn2": 0.111189, "loss_rpn_bbox_fpn3": 0.006067, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.102434, "loss_rpn_cls_fpn3": 0.006057, "loss_rpn_cls_fpn4": 0.002338, "loss_rpn_cls_fpn5": 0.000448, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290656}
json_stats: {"accuracy_cls": 0.855889, "eta": "7:11:42", "iter": 780, "loss": 1.110010, "loss_bbox": 0.246748, "loss_cls": 0.321907, "loss_mask": 0.221140, "loss_rpn_bbox_fpn2": 0.127105, "loss_rpn_bbox_fpn3": 0.011864, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.118478, "loss_rpn_cls_fpn3": 0.010957, "loss_rpn_cls_fpn4": 0.003175, "loss_rpn_cls_fpn5": 0.001043, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290319}
json_stats: {"accuracy_cls": 0.852051, "eta": "7:11:40", "iter": 800, "loss": 1.131381, "loss_bbox": 0.275507, "loss_cls": 0.302346, "loss_mask": 0.217155, "loss_rpn_bbox_fpn2": 0.125325, "loss_rpn_bbox_fpn3": 0.008021, "loss_rpn_bbox_fpn4": 0.000969, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.092487, "loss_rpn_cls_fpn3": 0.015319, "loss_rpn_cls_fpn4": 0.006360, "loss_rpn_cls_fpn5": 0.001188, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290364}
json_stats: {"accuracy_cls": 0.856445, "eta": "7:11:32", "iter": 820, "loss": 1.117438, "loss_bbox": 0.250719, "loss_cls": 0.321511, "loss_mask": 0.233730, "loss_rpn_bbox_fpn2": 0.133657, "loss_rpn_bbox_fpn3": 0.009217, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.105868, "loss_rpn_cls_fpn3": 0.018739, "loss_rpn_cls_fpn4": 0.001826, "loss_rpn_cls_fpn5": 0.000289, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290337}
json_stats: {"accuracy_cls": 0.851074, "eta": "7:11:08", "iter": 840, "loss": 1.108806, "loss_bbox": 0.267072, "loss_cls": 0.346610, "loss_mask": 0.213124, "loss_rpn_bbox_fpn2": 0.109948, "loss_rpn_bbox_fpn3": 0.007261, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.095695, "loss_rpn_cls_fpn3": 0.008516, "loss_rpn_cls_fpn4": 0.002717, "loss_rpn_cls_fpn5": 0.000976, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.290135}
json_stats: {"accuracy_cls": 0.824820, "eta": "7:10:46", "iter": 860, "loss": 1.142388, "loss_bbox": 0.285065, "loss_cls": 0.374886, "loss_mask": 0.232575, "loss_rpn_bbox_fpn2": 0.091062, "loss_rpn_bbox_fpn3": 0.017940, "loss_rpn_bbox_fpn4": 0.000113, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.087918, "loss_rpn_cls_fpn3": 0.020750, "loss_rpn_cls_fpn4": 0.003641, "loss_rpn_cls_fpn5": 0.000894, "lr": 0.001000, "mb_qsize": 64, "mem": 5890, "time": 0.289956}
