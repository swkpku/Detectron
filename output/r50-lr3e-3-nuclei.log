Found Detectron ops lib: /var/storage/shared/pnrsy/sys/jobs/application_1520801018426_4469/.conda/envs/detectron/lib/libcaffe2_detectron_ops_gpu.so
Found Detectron ops lib: /var/storage/shared/pnrsy/sys/jobs/application_1520801018426_4469/.conda/envs/detectron/lib/libcaffe2_detectron_ops_gpu.so
INFO train_net.py: 104: Called with args:
INFO train_net.py: 105: Namespace(cfg_file='configs/nuclei/e2e_mask_rcnn_R-50-FPN_1x-lr3e-3-nulei.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/tmp/detectron-output-r50-lr3e-3-nuclei'], skip_test=False)
INFO train_net.py: 111: Training with config:
INFO train_net.py: 112: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'MLP_HEAD_DIM': 1024,
               'ROI_BOX_HEAD': 'fast_rcnn_heads.add_roi_2mlp_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 7,
               'ROI_XFORM_SAMPLING_RATIO': 2},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': True,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 32,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 5,
         'RPN_MIN_LEVEL': 2,
         'ZERO_INIT_LATERAL': False},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet50_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': True,
           'NUM_CLASSES': 2,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'MSRAFill',
           'DILATION': 1,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': 'mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 2,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/tmp/detectron-output-r50-lr3e-3-nuclei',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/var/storage/shared/pnrsy/weiso/Detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.003,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASET': '',
          'DATASETS': ('dsb_2018_val',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.5,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILE': '',
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALES': (600,),
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 512,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('dsb_2018_train',),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 2000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (600,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train_net.py: 205: Building model: generalized_rcnn
WARNING cnn.py:  40: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING memonger.py:  70: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py: 112: Memonger memory optimization took 0.0180060863495 secs
INFO train_net.py: 253: Loading dataset: ('dsb_2018_train',)
loading annotations into memory...
Done (t=2.06s)
creating index...
index created!
INFO roidb.py:  49: Appending horizontally-flipped training examples...
INFO roidb.py:  51: Loaded dataset: dsb_2018_train
INFO roidb.py: 135: Filtered 0 roidb entries: 1072 -> 1072
INFO roidb.py:  67: Computing bounding-box regression targets...
INFO roidb.py:  69: done
INFO train_net.py: 257: 1072 roidb entries
INFO net.py:  57: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  86: fpn_inner_res5_2_sum_w not found
INFO net.py:  86: fpn_inner_res5_2_sum_b not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_b not found
INFO net.py:  86: fpn_res5_2_sum_w not found
INFO net.py:  86: fpn_res5_2_sum_b not found
INFO net.py:  86: fpn_res4_5_sum_w not found
INFO net.py:  86: fpn_res4_5_sum_b not found
INFO net.py:  86: fpn_res3_3_sum_w not found
INFO net.py:  86: fpn_res3_3_sum_b not found
INFO net.py:  86: fpn_res2_2_sum_w not found
INFO net.py:  86: fpn_res2_2_sum_b not found
INFO net.py:  86: conv_rpn_fpn2_w not found
INFO net.py:  86: conv_rpn_fpn2_b not found
INFO net.py:  86: rpn_cls_logits_fpn2_w not found
INFO net.py:  86: rpn_cls_logits_fpn2_b not found
INFO net.py:  86: rpn_bbox_pred_fpn2_w not found
INFO net.py:  86: rpn_bbox_pred_fpn2_b not found
INFO net.py:  86: fc6_w not found
INFO net.py:  86: fc6_b not found
INFO net.py:  86: fc7_w not found
INFO net.py:  86: fc7_b not found
INFO net.py:  86: cls_score_w not found
INFO net.py:  86: cls_score_b not found
INFO net.py:  86: bbox_pred_w not found
INFO net.py:  86: bbox_pred_b not found
INFO net.py:  86: fcn1_w not found
INFO net.py:  86: fcn1_b not found
INFO net.py:  86: fcn2_w not found
INFO net.py:  86: fcn2_b not found
INFO net.py:  86: fcn3_w not found
INFO net.py:  86: fcn3_b not found
INFO net.py:  86: fcn4_w not found
INFO net.py:  86: fcn4_b not found
INFO net.py:  86: conv5_mask_w not found
INFO net.py:  86: conv5_mask_b not found
INFO net.py:  86: mask_fcn_logits_w not found
INFO net.py:  86: mask_fcn_logits_b not found
INFO train_net.py: 241: Outputs saved to: /tmp/detectron-output-r50-lr3e-3-nuclei/train/dsb_2018_train/generalized_rcnn
INFO loader.py: 227: Pre-filling mini-batch queue...
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [3/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [6/64]
INFO loader.py: 232:   [8/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [10/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [13/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [16/64]
INFO loader.py: 232:   [17/64]
INFO loader.py: 232:   [20/64]
INFO loader.py: 232:   [22/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [24/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [28/64]
INFO loader.py: 232:   [29/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [31/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [37/64]
INFO loader.py: 232:   [37/64]
INFO loader.py: 232:   [39/64]
INFO loader.py: 232:   [40/64]
INFO loader.py: 232:   [42/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [45/64]
INFO loader.py: 232:   [45/64]
INFO loader.py: 232:   [48/64]
INFO loader.py: 232:   [49/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [51/64]
INFO loader.py: 232:   [53/64]
INFO loader.py: 232:   [55/64]
INFO loader.py: 232:   [56/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [60/64]
INFO loader.py: 232:   [61/64]
INFO loader.py: 232:   [62/64]
INFO loader.py: 232:   [63/64]
INFO detector.py: 436: Changing learning rate 0.000000 -> 0.001000 at iter 0
INFO net.py: 210: Printing model: generalized_rcnn
INFO net.py: 240: data                        : (2, 3, 608, 608)     => conv1                       : (2, 64, 304, 304)    ------- (op: Conv)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => conv1                       : (2, 64, 304, 304)    ------- (op: AffineChannel)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => conv1                       : (2, 64, 304, 304)    ------- (op: Relu)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => pool1                       : (2, 64, 152, 152)    ------- (op: MaxPool)
INFO net.py: 240: pool1                       : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch2c             : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: pool1                       : (2, 64, 152, 152)    => res2_0_branch1              : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch1              : (2, 256, 152, 152)   => res2_0_branch1_bn           : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch1_bn           : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_1_branch2c             : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_2_branch2c             : (2, 256, 152, 152)   => res2_2_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2c_bn          : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: StopGradient)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2c             : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res3_0_branch1              : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch1              : (2, 512, 76, 76)     => res3_0_branch1_bn           : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_0_branch1_bn           : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2c             : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2c             : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2c             : (2, 512, 76, 76)     => res3_3_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2c_bn          : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch2c             : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res4_0_branch1              : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch1              : (2, 1024, 38, 38)    => res4_0_branch1_bn           : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch1_bn           : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_1_branch2c             : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_2_branch2c             : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_3_branch2c             : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_4_branch2c             : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_5_branch2c             : (2, 1024, 38, 38)    => res4_5_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch2c             : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res5_0_branch1              : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch1              : (2, 2048, 19, 19)    => res5_0_branch1_bn           : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch1_bn           : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_1_branch2c             : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_2_branch2c             : (2, 2048, 19, 19)    => res5_2_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_2_sum                  : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_2_sum                  : (2, 2048, 19, 19)    => fpn_inner_res5_2_sum        : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => fpn_inner_res4_5_sum_lateral: (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 19, 19)     => fpn_inner_res4_5_sum_topdown: (2, 256, 38, 38)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res4_5_sum_lateral: (2, 256, 38, 38)     => fpn_inner_res4_5_sum        : (2, 256, 38, 38)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res4_5_sum_topdown: (2, 256, 38, 38)     => fpn_inner_res4_5_sum        : (2, 256, 38, 38)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => fpn_inner_res3_3_sum_lateral: (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 38, 38)     => fpn_inner_res3_3_sum_topdown: (2, 256, 76, 76)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res3_3_sum_lateral: (2, 256, 76, 76)     => fpn_inner_res3_3_sum        : (2, 256, 76, 76)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res3_3_sum_topdown: (2, 256, 76, 76)     => fpn_inner_res3_3_sum        : (2, 256, 76, 76)     ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => fpn_inner_res2_2_sum_lateral: (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 76, 76)     => fpn_inner_res2_2_sum_topdown: (2, 256, 152, 152)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res2_2_sum_lateral: (2, 256, 152, 152)   => fpn_inner_res2_2_sum        : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res2_2_sum_topdown: (2, 256, 152, 152)   => fpn_inner_res2_2_sum        : (2, 256, 152, 152)   ------|
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 19, 19)     => fpn_res5_2_sum              : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 38, 38)     => fpn_res4_5_sum              : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 76, 76)     => fpn_res3_3_sum              : (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res2_2_sum        : (2, 256, 152, 152)   => fpn_res2_2_sum              : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => conv_rpn_fpn2               : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => conv_rpn_fpn2               : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => rpn_cls_logits_fpn2         : (2, 3, 152, 152)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => rpn_cls_probs_fpn2          : (2, 3, 152, 152)     ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn2          : (2, 3, 152, 152)     => rpn_rois_fpn2               : (1580, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn2,gpu_0/rpn_bbox_pred_fpn2,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_rois_fpn2               : (1580, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn2               : (1580, 5)            ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => conv_rpn_fpn3               : (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => conv_rpn_fpn3               : (2, 256, 76, 76)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => rpn_cls_logits_fpn3         : (2, 3, 76, 76)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => rpn_cls_probs_fpn3          : (2, 3, 76, 76)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn3          : (2, 3, 76, 76)       => rpn_rois_fpn3               : (1806, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn3,gpu_0/rpn_bbox_pred_fpn3,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_rois_fpn3               : (1806, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn3               : (1806, 5)            ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => conv_rpn_fpn4               : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => conv_rpn_fpn4               : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => rpn_cls_logits_fpn4         : (2, 3, 38, 38)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => rpn_cls_probs_fpn4          : (2, 3, 38, 38)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn4          : (2, 3, 38, 38)       => rpn_rois_fpn4               : (1434, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn4,gpu_0/rpn_bbox_pred_fpn4,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_rois_fpn4               : (1434, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn4               : (1434, 5)            ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => conv_rpn_fpn5               : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => conv_rpn_fpn5               : (2, 256, 19, 19)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => rpn_cls_logits_fpn5         : (2, 3, 19, 19)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => rpn_cls_probs_fpn5          : (2, 3, 19, 19)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn5          : (2, 3, 19, 19)       => rpn_rois_fpn5               : (606, 5)             ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn5,gpu_0/rpn_bbox_pred_fpn5,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_rois_fpn5               : (606, 5)             ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn5               : (606, 5)             ------|
INFO net.py: 240: rpn_rois_fpn2               : (1580, 5)            => rois                        : (1024, 5)            ------- (op: Python:CollectAndDistributeFpnRpnProposalsOp:gpu_0/rpn_rois_fpn2,gpu_0/rpn_rois_fpn3,gpu_0/rpn_rois_fpn4,gpu_0/rpn_rois_fpn5,gpu_0/rpn_roi_probs_fpn2,gpu_0/rpn_roi_probs_fpn3,gpu_0/rpn_roi_probs_fpn4,gpu_0/rpn_roi_probs_fpn5,gpu_0/roidb,gpu_0/im_info)
INFO net.py: 240: rpn_rois_fpn3               : (1806, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn4               : (1434, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn5               : (606, 5)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn2          : (1580, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn3          : (1806, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn4          : (1434, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn5          : (606, 1)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: roidb                       : (85252,)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn2  : (2, 3, 336, 336)     => rpn_labels_int32_fpn2       : (2, 3, 152, 152)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => rpn_labels_int32_fpn2       : (2, 3, 152, 152)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn2  : (2, 12, 336, 336)    => rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => loss_rpn_cls_fpn2           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn2       : (2, 3, 152, 152)     => loss_rpn_cls_fpn2           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn3  : (2, 3, 168, 168)     => rpn_labels_int32_fpn3       : (2, 3, 76, 76)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => rpn_labels_int32_fpn3       : (2, 3, 76, 76)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn3  : (2, 12, 168, 168)    => rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => loss_rpn_cls_fpn3           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn3       : (2, 3, 76, 76)       => loss_rpn_cls_fpn3           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn4  : (2, 3, 84, 84)       => rpn_labels_int32_fpn4       : (2, 3, 38, 38)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => rpn_labels_int32_fpn4       : (2, 3, 38, 38)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn4  : (2, 12, 84, 84)      => rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => loss_rpn_cls_fpn4           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn4       : (2, 3, 38, 38)       => loss_rpn_cls_fpn4           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn5  : (2, 3, 42, 42)       => rpn_labels_int32_fpn5       : (2, 3, 19, 19)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => rpn_labels_int32_fpn5       : (2, 3, 19, 19)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn5  : (2, 12, 42, 42)      => rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => loss_rpn_cls_fpn5           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn5       : (2, 3, 19, 19)       => loss_rpn_cls_fpn5           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => roi_feat_fpn2               : (1020, 256, 7, 7)    ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn2                   : (1020, 5)            => roi_feat_fpn2               : (1020, 256, 7, 7)    ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => roi_feat_fpn3               : (3, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn3                   : (3, 5)               => roi_feat_fpn3               : (3, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => roi_feat_fpn4               : (1, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn4                   : (1, 5)               => roi_feat_fpn4               : (1, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => roi_feat_fpn5               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn5                   : (0, 5)               => roi_feat_fpn5               : (0, 256, 7, 7)       ------|
INFO net.py: 240: roi_feat_fpn2               : (1020, 256, 7, 7)    => roi_feat_shuffled           : (1024, 256, 7, 7)    ------- (op: Concat)
INFO net.py: 240: roi_feat_fpn3               : (3, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn4               : (1, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn5               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_shuffled           : (1024, 256, 7, 7)    => roi_feat                    : (1024, 256, 7, 7)    ------- (op: BatchPermutation)
INFO net.py: 240: rois_idx_restore_int32      : (1024,)              => roi_feat                    : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat                    : (1024, 256, 7, 7)    => fc6                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc6                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc7                         : (1024, 1024)         => cls_score                   : (1024, 2)            ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => bbox_pred                   : (1024, 8)            ------- (op: FC)
INFO net.py: 240: cls_score                   : (1024, 2)            => cls_prob                    : (1024, 2)            ------- (op: SoftmaxWithLoss)
INFO net.py: 240: labels_int32                : (1024,)              => cls_prob                    : (1024, 2)            ------|
INFO net.py: 240: bbox_pred                   : (1024, 8)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: bbox_targets                : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_inside_weights         : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_outside_weights        : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: cls_prob                    : (1024, 2)            => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 240: labels_int32                : (1024,)              => accuracy_cls                : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => _[mask]_roi_feat_fpn2       : (55, 256, 7, 7)      ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn2              : (55, 5)              => _[mask]_roi_feat_fpn2       : (55, 256, 7, 7)      ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn3              : (0, 5)               => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn4              : (0, 5)               => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn5              : (0, 5)               => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------|
INFO net.py: 240: _[mask]_roi_feat_fpn2       : (55, 256, 7, 7)      => _[mask]_roi_feat_shuffled   : (55, 256, 7, 7)      ------- (op: Concat)
INFO net.py: 240: _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (55, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (55, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (55, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_shuffled   : (55, 256, 7, 7)      => _[mask]_roi_feat            : (55, 256, 7, 7)      ------- (op: BatchPermutation)
INFO net.py: 240: mask_rois_idx_restore_int32 : (55,)                => _[mask]_roi_feat            : (55, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat            : (55, 256, 7, 7)      => _[mask]_fcn1                : (55, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn1                : (55, 256, 7, 7)      => _[mask]_fcn1                : (55, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn1                : (55, 256, 7, 7)      => _[mask]_fcn2                : (55, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn2                : (55, 256, 7, 7)      => _[mask]_fcn2                : (55, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn2                : (55, 256, 7, 7)      => _[mask]_fcn3                : (55, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn3                : (55, 256, 7, 7)      => _[mask]_fcn3                : (55, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn3                : (55, 256, 7, 7)      => _[mask]_fcn4                : (55, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn4                : (55, 256, 7, 7)      => _[mask]_fcn4                : (55, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn4                : (55, 256, 7, 7)      => conv5_mask                  : (55, 256, 14, 14)    ------- (op: ConvTranspose)
INFO net.py: 240: conv5_mask                  : (55, 256, 14, 14)    => conv5_mask                  : (55, 256, 14, 14)    ------- (op: Relu)
INFO net.py: 240: conv5_mask                  : (55, 256, 14, 14)    => mask_fcn_logits             : (55, 2, 14, 14)      ------- (op: Conv)
INFO net.py: 240: mask_fcn_logits             : (55, 2, 14, 14)      => loss_mask                   : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: masks_int32                 : (55, 392)            => loss_mask                   : ()                   ------|
INFO net.py: 244: End of model: generalized_rcnn
json_stats: {"accuracy_cls": 0.924805, "eta": "6 days, 12:49:48", "iter": 0, "loss": 5.496531, "loss_bbox": 0.063526, "loss_cls": 0.501323, "loss_mask": 3.907117, "loss_rpn_bbox_fpn2": 0.278544, "loss_rpn_bbox_fpn3": 0.018264, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.591493, "loss_rpn_cls_fpn3": 0.119714, "loss_rpn_cls_fpn4": 0.012362, "loss_rpn_cls_fpn5": 0.004188, "lr": 0.001000, "mb_qsize": 64, "mem": 3428, "time": 6.273202}
json_stats: {"accuracy_cls": 0.849121, "eta": "17:00:43", "iter": 20, "loss": 2.404822, "loss_bbox": 0.164611, "loss_cls": 0.394591, "loss_mask": 0.731133, "loss_rpn_bbox_fpn2": 0.311621, "loss_rpn_bbox_fpn3": 0.007103, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.499478, "loss_rpn_cls_fpn3": 0.096772, "loss_rpn_cls_fpn4": 0.016054, "loss_rpn_cls_fpn5": 0.001388, "lr": 0.001080, "mb_qsize": 64, "mem": 4321, "time": 0.680637}
json_stats: {"accuracy_cls": 0.851074, "eta": "8:42:37", "iter": 40, "loss": 1.754488, "loss_bbox": 0.253746, "loss_cls": 0.368418, "loss_mask": 0.481110, "loss_rpn_bbox_fpn2": 0.179603, "loss_rpn_bbox_fpn3": 0.016007, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.327714, "loss_rpn_cls_fpn3": 0.090165, "loss_rpn_cls_fpn4": 0.021078, "loss_rpn_cls_fpn5": 0.001371, "lr": 0.001160, "mb_qsize": 64, "mem": 4332, "time": 0.348571}
json_stats: {"accuracy_cls": 0.859113, "eta": "8:59:04", "iter": 60, "loss": 1.617210, "loss_bbox": 0.234683, "loss_cls": 0.335734, "loss_mask": 0.431913, "loss_rpn_bbox_fpn2": 0.185427, "loss_rpn_bbox_fpn3": 0.023131, "loss_rpn_bbox_fpn4": 0.003782, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.227265, "loss_rpn_cls_fpn3": 0.101792, "loss_rpn_cls_fpn4": 0.023198, "loss_rpn_cls_fpn5": 0.001969, "lr": 0.001240, "mb_qsize": 64, "mem": 4345, "time": 0.359626}
json_stats: {"accuracy_cls": 0.858887, "eta": "9:00:11", "iter": 80, "loss": 1.585728, "loss_bbox": 0.263449, "loss_cls": 0.351260, "loss_mask": 0.446863, "loss_rpn_bbox_fpn2": 0.189110, "loss_rpn_bbox_fpn3": 0.016973, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.221560, "loss_rpn_cls_fpn3": 0.063207, "loss_rpn_cls_fpn4": 0.015960, "loss_rpn_cls_fpn5": 0.001931, "lr": 0.001320, "mb_qsize": 64, "mem": 4348, "time": 0.360452}
json_stats: {"accuracy_cls": 0.857910, "eta": "9:01:27", "iter": 100, "loss": 1.583055, "loss_bbox": 0.269927, "loss_cls": 0.346781, "loss_mask": 0.433515, "loss_rpn_bbox_fpn2": 0.186690, "loss_rpn_bbox_fpn3": 0.020690, "loss_rpn_bbox_fpn4": 0.000347, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.199067, "loss_rpn_cls_fpn3": 0.070885, "loss_rpn_cls_fpn4": 0.015840, "loss_rpn_cls_fpn5": 0.002697, "lr": 0.001400, "mb_qsize": 64, "mem": 4352, "time": 0.361369}
json_stats: {"accuracy_cls": 0.841797, "eta": "9:05:54", "iter": 120, "loss": 1.496622, "loss_bbox": 0.266310, "loss_cls": 0.376943, "loss_mask": 0.430382, "loss_rpn_bbox_fpn2": 0.110168, "loss_rpn_bbox_fpn3": 0.011922, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.184104, "loss_rpn_cls_fpn3": 0.030977, "loss_rpn_cls_fpn4": 0.015838, "loss_rpn_cls_fpn5": 0.001392, "lr": 0.001480, "mb_qsize": 64, "mem": 4352, "time": 0.364422}
json_stats: {"accuracy_cls": 0.840820, "eta": "9:08:11", "iter": 140, "loss": 1.520536, "loss_bbox": 0.276097, "loss_cls": 0.362111, "loss_mask": 0.438861, "loss_rpn_bbox_fpn2": 0.184093, "loss_rpn_bbox_fpn3": 0.024364, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.169431, "loss_rpn_cls_fpn3": 0.050934, "loss_rpn_cls_fpn4": 0.010956, "loss_rpn_cls_fpn5": 0.001412, "lr": 0.001560, "mb_qsize": 64, "mem": 4355, "time": 0.366032}
json_stats: {"accuracy_cls": 0.836426, "eta": "9:16:55", "iter": 160, "loss": 1.597438, "loss_bbox": 0.314245, "loss_cls": 0.377242, "loss_mask": 0.405996, "loss_rpn_bbox_fpn2": 0.190486, "loss_rpn_bbox_fpn3": 0.026156, "loss_rpn_bbox_fpn4": 0.004084, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.165439, "loss_rpn_cls_fpn3": 0.043188, "loss_rpn_cls_fpn4": 0.019097, "loss_rpn_cls_fpn5": 0.001292, "lr": 0.001640, "mb_qsize": 64, "mem": 5875, "time": 0.371940}
json_stats: {"accuracy_cls": 0.844238, "eta": "9:19:12", "iter": 180, "loss": 1.476406, "loss_bbox": 0.274188, "loss_cls": 0.354826, "loss_mask": 0.411575, "loss_rpn_bbox_fpn2": 0.155185, "loss_rpn_bbox_fpn3": 0.017339, "loss_rpn_bbox_fpn4": 0.001926, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.189494, "loss_rpn_cls_fpn3": 0.036421, "loss_rpn_cls_fpn4": 0.013604, "loss_rpn_cls_fpn5": 0.001215, "lr": 0.001720, "mb_qsize": 64, "mem": 5875, "time": 0.373550}
json_stats: {"accuracy_cls": 0.831055, "eta": "9:18:24", "iter": 200, "loss": 1.563575, "loss_bbox": 0.299667, "loss_cls": 0.383767, "loss_mask": 0.389500, "loss_rpn_bbox_fpn2": 0.130390, "loss_rpn_bbox_fpn3": 0.014352, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.180110, "loss_rpn_cls_fpn3": 0.030340, "loss_rpn_cls_fpn4": 0.010212, "loss_rpn_cls_fpn5": 0.001237, "lr": 0.001800, "mb_qsize": 64, "mem": 5875, "time": 0.373100}
json_stats: {"accuracy_cls": 0.862793, "eta": "9:21:41", "iter": 220, "loss": 1.289514, "loss_bbox": 0.287736, "loss_cls": 0.313430, "loss_mask": 0.372003, "loss_rpn_bbox_fpn2": 0.105272, "loss_rpn_bbox_fpn3": 0.019716, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.111914, "loss_rpn_cls_fpn3": 0.033511, "loss_rpn_cls_fpn4": 0.008499, "loss_rpn_cls_fpn5": 0.002258, "lr": 0.001880, "mb_qsize": 64, "mem": 5878, "time": 0.375383}
json_stats: {"accuracy_cls": 0.848145, "eta": "9:24:03", "iter": 240, "loss": 1.323631, "loss_bbox": 0.292092, "loss_cls": 0.346080, "loss_mask": 0.402862, "loss_rpn_bbox_fpn2": 0.123241, "loss_rpn_bbox_fpn3": 0.013847, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.135234, "loss_rpn_cls_fpn3": 0.016840, "loss_rpn_cls_fpn4": 0.005203, "loss_rpn_cls_fpn5": 0.001825, "lr": 0.001960, "mb_qsize": 64, "mem": 5880, "time": 0.377042}
json_stats: {"accuracy_cls": 0.833008, "eta": "9:26:32", "iter": 260, "loss": 1.471462, "loss_bbox": 0.336751, "loss_cls": 0.396026, "loss_mask": 0.385954, "loss_rpn_bbox_fpn2": 0.156499, "loss_rpn_bbox_fpn3": 0.019673, "loss_rpn_bbox_fpn4": 0.001508, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.127998, "loss_rpn_cls_fpn3": 0.037476, "loss_rpn_cls_fpn4": 0.008023, "loss_rpn_cls_fpn5": 0.001202, "lr": 0.002040, "mb_qsize": 64, "mem": 5886, "time": 0.378785}
json_stats: {"accuracy_cls": 0.846191, "eta": "9:27:09", "iter": 280, "loss": 1.451049, "loss_bbox": 0.287986, "loss_cls": 0.357124, "loss_mask": 0.372775, "loss_rpn_bbox_fpn2": 0.158891, "loss_rpn_bbox_fpn3": 0.009022, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.139902, "loss_rpn_cls_fpn3": 0.022861, "loss_rpn_cls_fpn4": 0.003646, "loss_rpn_cls_fpn5": 0.001243, "lr": 0.002120, "mb_qsize": 64, "mem": 5897, "time": 0.379286}
json_stats: {"accuracy_cls": 0.843262, "eta": "9:29:05", "iter": 300, "loss": 1.338884, "loss_bbox": 0.294982, "loss_cls": 0.351614, "loss_mask": 0.383282, "loss_rpn_bbox_fpn2": 0.137592, "loss_rpn_bbox_fpn3": 0.018305, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.123766, "loss_rpn_cls_fpn3": 0.024262, "loss_rpn_cls_fpn4": 0.007150, "loss_rpn_cls_fpn5": 0.001239, "lr": 0.002200, "mb_qsize": 64, "mem": 5899, "time": 0.380668}
json_stats: {"accuracy_cls": 0.839355, "eta": "9:29:19", "iter": 320, "loss": 1.393292, "loss_bbox": 0.304893, "loss_cls": 0.351688, "loss_mask": 0.393766, "loss_rpn_bbox_fpn2": 0.111773, "loss_rpn_bbox_fpn3": 0.020426, "loss_rpn_bbox_fpn4": 0.001225, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.133324, "loss_rpn_cls_fpn3": 0.027168, "loss_rpn_cls_fpn4": 0.006371, "loss_rpn_cls_fpn5": 0.001191, "lr": 0.002280, "mb_qsize": 64, "mem": 5900, "time": 0.380910}
json_stats: {"accuracy_cls": 0.833984, "eta": "9:30:45", "iter": 340, "loss": 1.367608, "loss_bbox": 0.283964, "loss_cls": 0.362008, "loss_mask": 0.383985, "loss_rpn_bbox_fpn2": 0.150932, "loss_rpn_bbox_fpn3": 0.011315, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.118544, "loss_rpn_cls_fpn3": 0.016865, "loss_rpn_cls_fpn4": 0.002191, "loss_rpn_cls_fpn5": 0.001148, "lr": 0.002360, "mb_qsize": 64, "mem": 5906, "time": 0.381943}
json_stats: {"accuracy_cls": 0.841797, "eta": "9:32:06", "iter": 360, "loss": 1.380269, "loss_bbox": 0.253896, "loss_cls": 0.355870, "loss_mask": 0.379500, "loss_rpn_bbox_fpn2": 0.155742, "loss_rpn_bbox_fpn3": 0.012862, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.118824, "loss_rpn_cls_fpn3": 0.018915, "loss_rpn_cls_fpn4": 0.002132, "loss_rpn_cls_fpn5": 0.001239, "lr": 0.002440, "mb_qsize": 64, "mem": 5908, "time": 0.382940}
json_stats: {"accuracy_cls": 0.844238, "eta": "9:31:45", "iter": 380, "loss": 1.386148, "loss_bbox": 0.340149, "loss_cls": 0.365374, "loss_mask": 0.371917, "loss_rpn_bbox_fpn2": 0.115409, "loss_rpn_bbox_fpn3": 0.014568, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.099331, "loss_rpn_cls_fpn3": 0.025549, "loss_rpn_cls_fpn4": 0.004011, "loss_rpn_cls_fpn5": 0.001186, "lr": 0.002520, "mb_qsize": 64, "mem": 5915, "time": 0.382786}
json_stats: {"accuracy_cls": 0.845215, "eta": "9:33:06", "iter": 400, "loss": 1.336999, "loss_bbox": 0.271964, "loss_cls": 0.347035, "loss_mask": 0.382885, "loss_rpn_bbox_fpn2": 0.167586, "loss_rpn_bbox_fpn3": 0.005211, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.114298, "loss_rpn_cls_fpn3": 0.011838, "loss_rpn_cls_fpn4": 0.001872, "loss_rpn_cls_fpn5": 0.001113, "lr": 0.002600, "mb_qsize": 64, "mem": 5920, "time": 0.383782}
json_stats: {"accuracy_cls": 0.842285, "eta": "9:34:52", "iter": 420, "loss": 1.329721, "loss_bbox": 0.292080, "loss_cls": 0.346930, "loss_mask": 0.369444, "loss_rpn_bbox_fpn2": 0.141890, "loss_rpn_bbox_fpn3": 0.011243, "loss_rpn_bbox_fpn4": 0.000146, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.116636, "loss_rpn_cls_fpn3": 0.024504, "loss_rpn_cls_fpn4": 0.003169, "loss_rpn_cls_fpn5": 0.000880, "lr": 0.002680, "mb_qsize": 64, "mem": 5928, "time": 0.385041}
json_stats: {"accuracy_cls": 0.830566, "eta": "9:36:53", "iter": 440, "loss": 1.405526, "loss_bbox": 0.269997, "loss_cls": 0.398055, "loss_mask": 0.359707, "loss_rpn_bbox_fpn2": 0.166919, "loss_rpn_bbox_fpn3": 0.018372, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.120010, "loss_rpn_cls_fpn3": 0.026436, "loss_rpn_cls_fpn4": 0.002164, "loss_rpn_cls_fpn5": 0.001126, "lr": 0.002760, "mb_qsize": 64, "mem": 5932, "time": 0.386484}
json_stats: {"accuracy_cls": 0.849609, "eta": "9:37:05", "iter": 460, "loss": 1.274930, "loss_bbox": 0.262211, "loss_cls": 0.345378, "loss_mask": 0.356740, "loss_rpn_bbox_fpn2": 0.109260, "loss_rpn_bbox_fpn3": 0.018367, "loss_rpn_bbox_fpn4": 0.000432, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.099671, "loss_rpn_cls_fpn3": 0.024380, "loss_rpn_cls_fpn4": 0.004111, "loss_rpn_cls_fpn5": 0.001162, "lr": 0.002840, "mb_qsize": 64, "mem": 5933, "time": 0.386706}
json_stats: {"accuracy_cls": 0.864258, "eta": "9:37:25", "iter": 480, "loss": 1.183992, "loss_bbox": 0.244634, "loss_cls": 0.313677, "loss_mask": 0.360347, "loss_rpn_bbox_fpn2": 0.112866, "loss_rpn_bbox_fpn3": 0.013599, "loss_rpn_bbox_fpn4": 0.000355, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.087468, "loss_rpn_cls_fpn3": 0.014518, "loss_rpn_cls_fpn4": 0.001831, "loss_rpn_cls_fpn5": 0.001131, "lr": 0.002920, "mb_qsize": 64, "mem": 5933, "time": 0.387012}
json_stats: {"accuracy_cls": 0.867174, "eta": "9:36:49", "iter": 500, "loss": 1.158155, "loss_bbox": 0.259180, "loss_cls": 0.305424, "loss_mask": 0.370183, "loss_rpn_bbox_fpn2": 0.117004, "loss_rpn_bbox_fpn3": 0.007211, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.069770, "loss_rpn_cls_fpn3": 0.013656, "loss_rpn_cls_fpn4": 0.001885, "loss_rpn_cls_fpn5": 0.001090, "lr": 0.003000, "mb_qsize": 64, "mem": 5933, "time": 0.386704}
json_stats: {"accuracy_cls": 0.851541, "eta": "9:37:11", "iter": 520, "loss": 1.393554, "loss_bbox": 0.282112, "loss_cls": 0.327646, "loss_mask": 0.374935, "loss_rpn_bbox_fpn2": 0.146417, "loss_rpn_bbox_fpn3": 0.018401, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.129876, "loss_rpn_cls_fpn3": 0.017357, "loss_rpn_cls_fpn4": 0.002588, "loss_rpn_cls_fpn5": 0.000773, "lr": 0.003000, "mb_qsize": 64, "mem": 5934, "time": 0.387032}
json_stats: {"accuracy_cls": 0.821864, "eta": "9:37:37", "iter": 540, "loss": 1.322570, "loss_bbox": 0.278154, "loss_cls": 0.373031, "loss_mask": 0.348260, "loss_rpn_bbox_fpn2": 0.134011, "loss_rpn_bbox_fpn3": 0.019068, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.088954, "loss_rpn_cls_fpn3": 0.022395, "loss_rpn_cls_fpn4": 0.004941, "loss_rpn_cls_fpn5": 0.001168, "lr": 0.003000, "mb_qsize": 64, "mem": 5936, "time": 0.387406}
json_stats: {"accuracy_cls": 0.870219, "eta": "9:37:52", "iter": 560, "loss": 1.170438, "loss_bbox": 0.232026, "loss_cls": 0.275476, "loss_mask": 0.346273, "loss_rpn_bbox_fpn2": 0.099587, "loss_rpn_bbox_fpn3": 0.012434, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.076234, "loss_rpn_cls_fpn3": 0.017992, "loss_rpn_cls_fpn4": 0.002490, "loss_rpn_cls_fpn5": 0.001013, "lr": 0.003000, "mb_qsize": 64, "mem": 5938, "time": 0.387657}
json_stats: {"accuracy_cls": 0.862793, "eta": "9:37:21", "iter": 580, "loss": 1.249854, "loss_bbox": 0.268767, "loss_cls": 0.308733, "loss_mask": 0.350061, "loss_rpn_bbox_fpn2": 0.122497, "loss_rpn_bbox_fpn3": 0.007910, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.094265, "loss_rpn_cls_fpn3": 0.018672, "loss_rpn_cls_fpn4": 0.000725, "loss_rpn_cls_fpn5": 0.000769, "lr": 0.003000, "mb_qsize": 64, "mem": 5940, "time": 0.387405}
json_stats: {"accuracy_cls": 0.838867, "eta": "9:38:21", "iter": 600, "loss": 1.253925, "loss_bbox": 0.280001, "loss_cls": 0.348808, "loss_mask": 0.338000, "loss_rpn_bbox_fpn2": 0.146960, "loss_rpn_bbox_fpn3": 0.015486, "loss_rpn_bbox_fpn4": 0.000322, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.090976, "loss_rpn_cls_fpn3": 0.016112, "loss_rpn_cls_fpn4": 0.002025, "loss_rpn_cls_fpn5": 0.000685, "lr": 0.003000, "mb_qsize": 64, "mem": 5940, "time": 0.388157}
json_stats: {"accuracy_cls": 0.847817, "eta": "9:37:24", "iter": 620, "loss": 1.249906, "loss_bbox": 0.308794, "loss_cls": 0.326675, "loss_mask": 0.373717, "loss_rpn_bbox_fpn2": 0.105289, "loss_rpn_bbox_fpn3": 0.009561, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.076786, "loss_rpn_cls_fpn3": 0.008869, "loss_rpn_cls_fpn4": 0.001929, "loss_rpn_cls_fpn5": 0.000783, "lr": 0.003000, "mb_qsize": 64, "mem": 5946, "time": 0.387611}
json_stats: {"accuracy_cls": 0.846909, "eta": "9:37:36", "iter": 640, "loss": 1.253043, "loss_bbox": 0.292250, "loss_cls": 0.335815, "loss_mask": 0.347584, "loss_rpn_bbox_fpn2": 0.095381, "loss_rpn_bbox_fpn3": 0.015668, "loss_rpn_bbox_fpn4": 0.003873, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.118708, "loss_rpn_cls_fpn3": 0.017335, "loss_rpn_cls_fpn4": 0.005637, "loss_rpn_cls_fpn5": 0.000539, "lr": 0.003000, "mb_qsize": 64, "mem": 5952, "time": 0.387832}
json_stats: {"accuracy_cls": 0.849121, "eta": "9:40:16", "iter": 660, "loss": 1.233416, "loss_bbox": 0.272236, "loss_cls": 0.321459, "loss_mask": 0.349637, "loss_rpn_bbox_fpn2": 0.098184, "loss_rpn_bbox_fpn3": 0.022146, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.090318, "loss_rpn_cls_fpn3": 0.015990, "loss_rpn_cls_fpn4": 0.004791, "loss_rpn_cls_fpn5": 0.000997, "lr": 0.003000, "mb_qsize": 64, "mem": 5953, "time": 0.389704}
json_stats: {"accuracy_cls": 0.860840, "eta": "9:40:14", "iter": 680, "loss": 1.124210, "loss_bbox": 0.255962, "loss_cls": 0.313162, "loss_mask": 0.343213, "loss_rpn_bbox_fpn2": 0.106697, "loss_rpn_bbox_fpn3": 0.010878, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.075062, "loss_rpn_cls_fpn3": 0.012302, "loss_rpn_cls_fpn4": 0.002111, "loss_rpn_cls_fpn5": 0.000441, "lr": 0.003000, "mb_qsize": 64, "mem": 5953, "time": 0.389774}
json_stats: {"accuracy_cls": 0.854980, "eta": "9:41:09", "iter": 700, "loss": 1.189535, "loss_bbox": 0.226714, "loss_cls": 0.326664, "loss_mask": 0.331027, "loss_rpn_bbox_fpn2": 0.142163, "loss_rpn_bbox_fpn3": 0.007883, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.062162, "loss_rpn_cls_fpn3": 0.011005, "loss_rpn_cls_fpn4": 0.000507, "loss_rpn_cls_fpn5": 0.001045, "lr": 0.003000, "mb_qsize": 64, "mem": 5953, "time": 0.390478}
json_stats: {"accuracy_cls": 0.890057, "eta": "9:39:56", "iter": 720, "loss": 1.052632, "loss_bbox": 0.208505, "loss_cls": 0.236577, "loss_mask": 0.358473, "loss_rpn_bbox_fpn2": 0.083536, "loss_rpn_bbox_fpn3": 0.009117, "loss_rpn_bbox_fpn4": 0.001627, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.052581, "loss_rpn_cls_fpn3": 0.018241, "loss_rpn_cls_fpn4": 0.000970, "loss_rpn_cls_fpn5": 0.000730, "lr": 0.003000, "mb_qsize": 64, "mem": 5953, "time": 0.389748}
json_stats: {"accuracy_cls": 0.858398, "eta": "9:40:05", "iter": 740, "loss": 1.183042, "loss_bbox": 0.237927, "loss_cls": 0.301795, "loss_mask": 0.349815, "loss_rpn_bbox_fpn2": 0.156961, "loss_rpn_bbox_fpn3": 0.012363, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.083988, "loss_rpn_cls_fpn3": 0.015794, "loss_rpn_cls_fpn4": 0.001881, "loss_rpn_cls_fpn5": 0.000684, "lr": 0.003000, "mb_qsize": 64, "mem": 5953, "time": 0.389930}
json_stats: {"accuracy_cls": 0.851856, "eta": "9:40:47", "iter": 760, "loss": 1.176982, "loss_bbox": 0.262207, "loss_cls": 0.322048, "loss_mask": 0.346837, "loss_rpn_bbox_fpn2": 0.112318, "loss_rpn_bbox_fpn3": 0.015573, "loss_rpn_bbox_fpn4": 0.001696, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.072473, "loss_rpn_cls_fpn3": 0.016820, "loss_rpn_cls_fpn4": 0.001741, "loss_rpn_cls_fpn5": 0.000860, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390491}
json_stats: {"accuracy_cls": 0.852539, "eta": "9:40:39", "iter": 780, "loss": 1.168379, "loss_bbox": 0.249564, "loss_cls": 0.306991, "loss_mask": 0.362745, "loss_rpn_bbox_fpn2": 0.134656, "loss_rpn_bbox_fpn3": 0.006779, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.077486, "loss_rpn_cls_fpn3": 0.013362, "loss_rpn_cls_fpn4": 0.000554, "loss_rpn_cls_fpn5": 0.000462, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390492}
json_stats: {"accuracy_cls": 0.856934, "eta": "9:40:12", "iter": 800, "loss": 1.218092, "loss_bbox": 0.267085, "loss_cls": 0.317726, "loss_mask": 0.362881, "loss_rpn_bbox_fpn2": 0.119835, "loss_rpn_bbox_fpn3": 0.013716, "loss_rpn_bbox_fpn4": 0.000134, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.086881, "loss_rpn_cls_fpn3": 0.012561, "loss_rpn_cls_fpn4": 0.001903, "loss_rpn_cls_fpn5": 0.000618, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390270}
json_stats: {"accuracy_cls": 0.851074, "eta": "9:40:38", "iter": 820, "loss": 1.271851, "loss_bbox": 0.277634, "loss_cls": 0.335154, "loss_mask": 0.335312, "loss_rpn_bbox_fpn2": 0.151569, "loss_rpn_bbox_fpn3": 0.015475, "loss_rpn_bbox_fpn4": 0.000656, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.084818, "loss_rpn_cls_fpn3": 0.022422, "loss_rpn_cls_fpn4": 0.001334, "loss_rpn_cls_fpn5": 0.000855, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390652}
json_stats: {"accuracy_cls": 0.888672, "eta": "9:40:20", "iter": 840, "loss": 1.079785, "loss_bbox": 0.222992, "loss_cls": 0.264023, "loss_mask": 0.344625, "loss_rpn_bbox_fpn2": 0.105858, "loss_rpn_bbox_fpn3": 0.015839, "loss_rpn_bbox_fpn4": 0.001181, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.077525, "loss_rpn_cls_fpn3": 0.013904, "loss_rpn_cls_fpn4": 0.000950, "loss_rpn_cls_fpn5": 0.000708, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390540}
json_stats: {"accuracy_cls": 0.868565, "eta": "9:39:58", "iter": 860, "loss": 1.142836, "loss_bbox": 0.225628, "loss_cls": 0.291756, "loss_mask": 0.370486, "loss_rpn_bbox_fpn2": 0.118512, "loss_rpn_bbox_fpn3": 0.000970, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.078817, "loss_rpn_cls_fpn3": 0.004533, "loss_rpn_cls_fpn4": 0.000308, "loss_rpn_cls_fpn5": 0.000559, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390379}
json_stats: {"accuracy_cls": 0.857812, "eta": "9:40:08", "iter": 880, "loss": 1.169979, "loss_bbox": 0.264219, "loss_cls": 0.329491, "loss_mask": 0.347499, "loss_rpn_bbox_fpn2": 0.137327, "loss_rpn_bbox_fpn3": 0.011712, "loss_rpn_bbox_fpn4": 0.000384, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.070922, "loss_rpn_cls_fpn3": 0.009602, "loss_rpn_cls_fpn4": 0.001259, "loss_rpn_cls_fpn5": 0.000752, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390576}
json_stats: {"accuracy_cls": 0.880072, "eta": "9:39:49", "iter": 900, "loss": 1.173452, "loss_bbox": 0.228080, "loss_cls": 0.254114, "loss_mask": 0.342946, "loss_rpn_bbox_fpn2": 0.130148, "loss_rpn_bbox_fpn3": 0.009974, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.045878, "loss_rpn_cls_fpn3": 0.012316, "loss_rpn_cls_fpn4": 0.000747, "loss_rpn_cls_fpn5": 0.000591, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390449}
json_stats: {"accuracy_cls": 0.864163, "eta": "9:39:49", "iter": 920, "loss": 1.244659, "loss_bbox": 0.261960, "loss_cls": 0.295844, "loss_mask": 0.356566, "loss_rpn_bbox_fpn2": 0.135923, "loss_rpn_bbox_fpn3": 0.011676, "loss_rpn_bbox_fpn4": 0.000641, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.086210, "loss_rpn_cls_fpn3": 0.016634, "loss_rpn_cls_fpn4": 0.002981, "loss_rpn_cls_fpn5": 0.000236, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390538}
json_stats: {"accuracy_cls": 0.850098, "eta": "9:39:43", "iter": 940, "loss": 1.112848, "loss_bbox": 0.223639, "loss_cls": 0.321388, "loss_mask": 0.351723, "loss_rpn_bbox_fpn2": 0.099796, "loss_rpn_bbox_fpn3": 0.016193, "loss_rpn_bbox_fpn4": 0.001849, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.061277, "loss_rpn_cls_fpn3": 0.022713, "loss_rpn_cls_fpn4": 0.005001, "loss_rpn_cls_fpn5": 0.000298, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390562}
json_stats: {"accuracy_cls": 0.861128, "eta": "9:39:42", "iter": 960, "loss": 1.149842, "loss_bbox": 0.236971, "loss_cls": 0.316601, "loss_mask": 0.360275, "loss_rpn_bbox_fpn2": 0.105828, "loss_rpn_bbox_fpn3": 0.011714, "loss_rpn_bbox_fpn4": 0.001477, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.057549, "loss_rpn_cls_fpn3": 0.015309, "loss_rpn_cls_fpn4": 0.001896, "loss_rpn_cls_fpn5": 0.000279, "lr": 0.003000, "mb_qsize": 64, "mem": 5959, "time": 0.390634}
json_stats: {"accuracy_cls": 0.854492, "eta": "9:40:04", "iter": 980, "loss": 1.234615, "loss_bbox": 0.247904, "loss_cls": 0.342956, "loss_mask": 0.368707, "loss_rpn_bbox_fpn2": 0.142633, "loss_rpn_bbox_fpn3": 0.014116, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.117779, "loss_rpn_cls_fpn3": 0.017142, "loss_rpn_cls_fpn4": 0.001425, "loss_rpn_cls_fpn5": 0.000734, "lr": 0.003000, "mb_qsize": 64, "mem": 5961, "time": 0.390972}
json_stats: {"accuracy_cls": 0.843592, "eta": "9:39:46", "iter": 1000, "loss": 1.138803, "loss_bbox": 0.231636, "loss_cls": 0.339584, "loss_mask": 0.344396, "loss_rpn_bbox_fpn2": 0.108395, "loss_rpn_bbox_fpn3": 0.013157, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.067044, "loss_rpn_cls_fpn3": 0.014451, "loss_rpn_cls_fpn4": 0.001077, "loss_rpn_cls_fpn5": 0.000441, "lr": 0.003000, "mb_qsize": 64, "mem": 5961, "time": 0.390864}
json_stats: {"accuracy_cls": 0.854004, "eta": "9:39:28", "iter": 1020, "loss": 1.236965, "loss_bbox": 0.229268, "loss_cls": 0.319939, "loss_mask": 0.346235, "loss_rpn_bbox_fpn2": 0.106048, "loss_rpn_bbox_fpn3": 0.005305, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.064768, "loss_rpn_cls_fpn3": 0.008882, "loss_rpn_cls_fpn4": 0.000561, "loss_rpn_cls_fpn5": 0.000285, "lr": 0.003000, "mb_qsize": 64, "mem": 5961, "time": 0.390745}
json_stats: {"accuracy_cls": 0.880371, "eta": "9:39:19", "iter": 1040, "loss": 1.052251, "loss_bbox": 0.214270, "loss_cls": 0.276713, "loss_mask": 0.345115, "loss_rpn_bbox_fpn2": 0.107212, "loss_rpn_bbox_fpn3": 0.004582, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.068766, "loss_rpn_cls_fpn3": 0.004042, "loss_rpn_cls_fpn4": 0.000649, "loss_rpn_cls_fpn5": 0.000269, "lr": 0.003000, "mb_qsize": 64, "mem": 5962, "time": 0.390730}
json_stats: {"accuracy_cls": 0.873170, "eta": "9:39:02", "iter": 1060, "loss": 1.008683, "loss_bbox": 0.196915, "loss_cls": 0.279236, "loss_mask": 0.337412, "loss_rpn_bbox_fpn2": 0.082459, "loss_rpn_bbox_fpn3": 0.009501, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.061947, "loss_rpn_cls_fpn3": 0.003910, "loss_rpn_cls_fpn4": 0.000494, "loss_rpn_cls_fpn5": 0.000181, "lr": 0.003000, "mb_qsize": 64, "mem": 5962, "time": 0.390627}
json_stats: {"accuracy_cls": 0.855789, "eta": "9:38:36", "iter": 1080, "loss": 1.109011, "loss_bbox": 0.220897, "loss_cls": 0.313579, "loss_mask": 0.341634, "loss_rpn_bbox_fpn2": 0.110660, "loss_rpn_bbox_fpn3": 0.009587, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.070452, "loss_rpn_cls_fpn3": 0.005794, "loss_rpn_cls_fpn4": 0.000749, "loss_rpn_cls_fpn5": 0.000433, "lr": 0.003000, "mb_qsize": 64, "mem": 5962, "time": 0.390421}
json_stats: {"accuracy_cls": 0.869141, "eta": "9:38:45", "iter": 1100, "loss": 1.033216, "loss_bbox": 0.226259, "loss_cls": 0.283649, "loss_mask": 0.347322, "loss_rpn_bbox_fpn2": 0.074662, "loss_rpn_bbox_fpn3": 0.010755, "loss_rpn_bbox_fpn4": 0.000492, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.069725, "loss_rpn_cls_fpn3": 0.011097, "loss_rpn_cls_fpn4": 0.002334, "loss_rpn_cls_fpn5": 0.000750, "lr": 0.003000, "mb_qsize": 64, "mem": 5962, "time": 0.390618}
json_stats: {"accuracy_cls": 0.873535, "eta": "9:38:09", "iter": 1120, "loss": 0.961541, "loss_bbox": 0.196936, "loss_cls": 0.266699, "loss_mask": 0.345392, "loss_rpn_bbox_fpn2": 0.110660, "loss_rpn_bbox_fpn3": 0.001957, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.048577, "loss_rpn_cls_fpn3": 0.003802, "loss_rpn_cls_fpn4": 0.000372, "loss_rpn_cls_fpn5": 0.000146, "lr": 0.003000, "mb_qsize": 64, "mem": 5962, "time": 0.390293}
json_stats: {"accuracy_cls": 0.882812, "eta": "9:37:42", "iter": 1140, "loss": 0.989581, "loss_bbox": 0.219721, "loss_cls": 0.260402, "loss_mask": 0.326171, "loss_rpn_bbox_fpn2": 0.096765, "loss_rpn_bbox_fpn3": 0.009514, "loss_rpn_bbox_fpn4": 0.002126, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.051075, "loss_rpn_cls_fpn3": 0.008405, "loss_rpn_cls_fpn4": 0.002469, "loss_rpn_cls_fpn5": 0.000369, "lr": 0.003000, "mb_qsize": 64, "mem": 5962, "time": 0.390076}
json_stats: {"accuracy_cls": 0.850443, "eta": "9:37:37", "iter": 1160, "loss": 1.164339, "loss_bbox": 0.214167, "loss_cls": 0.319722, "loss_mask": 0.336673, "loss_rpn_bbox_fpn2": 0.112915, "loss_rpn_bbox_fpn3": 0.016421, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.063047, "loss_rpn_cls_fpn3": 0.012720, "loss_rpn_cls_fpn4": 0.002459, "loss_rpn_cls_fpn5": 0.000341, "lr": 0.003000, "mb_qsize": 64, "mem": 5962, "time": 0.390116}
json_stats: {"accuracy_cls": 0.854004, "eta": "9:37:43", "iter": 1180, "loss": 1.141959, "loss_bbox": 0.230942, "loss_cls": 0.307674, "loss_mask": 0.344681, "loss_rpn_bbox_fpn2": 0.125649, "loss_rpn_bbox_fpn3": 0.011816, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.057087, "loss_rpn_cls_fpn3": 0.011246, "loss_rpn_cls_fpn4": 0.000560, "loss_rpn_cls_fpn5": 0.000486, "lr": 0.003000, "mb_qsize": 64, "mem": 5964, "time": 0.390267}
json_stats: {"accuracy_cls": 0.857002, "eta": "9:37:35", "iter": 1200, "loss": 1.155963, "loss_bbox": 0.249301, "loss_cls": 0.311431, "loss_mask": 0.369776, "loss_rpn_bbox_fpn2": 0.117295, "loss_rpn_bbox_fpn3": 0.012806, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.073035, "loss_rpn_cls_fpn3": 0.011790, "loss_rpn_cls_fpn4": 0.000776, "loss_rpn_cls_fpn5": 0.000424, "lr": 0.003000, "mb_qsize": 64, "mem": 5964, "time": 0.390266}
json_stats: {"accuracy_cls": 0.851238, "eta": "9:37:19", "iter": 1220, "loss": 1.105539, "loss_bbox": 0.241739, "loss_cls": 0.325123, "loss_mask": 0.338209, "loss_rpn_bbox_fpn2": 0.099639, "loss_rpn_bbox_fpn3": 0.011919, "loss_rpn_bbox_fpn4": 0.002060, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.058385, "loss_rpn_cls_fpn3": 0.011541, "loss_rpn_cls_fpn4": 0.002617, "loss_rpn_cls_fpn5": 0.000511, "lr": 0.003000, "mb_qsize": 64, "mem": 5964, "time": 0.390169}
json_stats: {"accuracy_cls": 0.859141, "eta": "9:37:15", "iter": 1240, "loss": 1.189275, "loss_bbox": 0.249434, "loss_cls": 0.321512, "loss_mask": 0.349627, "loss_rpn_bbox_fpn2": 0.110815, "loss_rpn_bbox_fpn3": 0.012871, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.069928, "loss_rpn_cls_fpn3": 0.006059, "loss_rpn_cls_fpn4": 0.000360, "loss_rpn_cls_fpn5": 0.000129, "lr": 0.003000, "mb_qsize": 64, "mem": 5964, "time": 0.390215}
json_stats: {"accuracy_cls": 0.855728, "eta": "9:37:04", "iter": 1260, "loss": 1.226258, "loss_bbox": 0.241866, "loss_cls": 0.320699, "loss_mask": 0.345589, "loss_rpn_bbox_fpn2": 0.114056, "loss_rpn_bbox_fpn3": 0.013347, "loss_rpn_bbox_fpn4": 0.000061, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.066662, "loss_rpn_cls_fpn3": 0.013028, "loss_rpn_cls_fpn4": 0.001256, "loss_rpn_cls_fpn5": 0.000490, "lr": 0.003000, "mb_qsize": 64, "mem": 5971, "time": 0.390177}
json_stats: {"accuracy_cls": 0.861816, "eta": "9:36:50", "iter": 1280, "loss": 1.115792, "loss_bbox": 0.239139, "loss_cls": 0.313106, "loss_mask": 0.352473, "loss_rpn_bbox_fpn2": 0.110911, "loss_rpn_bbox_fpn3": 0.007954, "loss_rpn_bbox_fpn4": 0.000679, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.060739, "loss_rpn_cls_fpn3": 0.009674, "loss_rpn_cls_fpn4": 0.000927, "loss_rpn_cls_fpn5": 0.000426, "lr": 0.003000, "mb_qsize": 64, "mem": 5971, "time": 0.390115}
json_stats: {"accuracy_cls": 0.878906, "eta": "9:36:49", "iter": 1300, "loss": 0.983812, "loss_bbox": 0.200570, "loss_cls": 0.263445, "loss_mask": 0.334236, "loss_rpn_bbox_fpn2": 0.098251, "loss_rpn_bbox_fpn3": 0.012650, "loss_rpn_bbox_fpn4": 0.000366, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.046050, "loss_rpn_cls_fpn3": 0.009577, "loss_rpn_cls_fpn4": 0.001269, "loss_rpn_cls_fpn5": 0.000155, "lr": 0.003000, "mb_qsize": 64, "mem": 5977, "time": 0.390186}
json_stats: {"accuracy_cls": 0.863512, "eta": "9:36:37", "iter": 1320, "loss": 1.101943, "loss_bbox": 0.231783, "loss_cls": 0.312697, "loss_mask": 0.326101, "loss_rpn_bbox_fpn2": 0.131275, "loss_rpn_bbox_fpn3": 0.014850, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.066876, "loss_rpn_cls_fpn3": 0.009287, "loss_rpn_cls_fpn4": 0.002051, "loss_rpn_cls_fpn5": 0.000479, "lr": 0.003000, "mb_qsize": 64, "mem": 5977, "time": 0.390135}
json_stats: {"accuracy_cls": 0.886719, "eta": "9:36:11", "iter": 1340, "loss": 1.040618, "loss_bbox": 0.210316, "loss_cls": 0.249736, "loss_mask": 0.339975, "loss_rpn_bbox_fpn2": 0.111383, "loss_rpn_bbox_fpn3": 0.003489, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.047419, "loss_rpn_cls_fpn3": 0.003704, "loss_rpn_cls_fpn4": 0.000134, "loss_rpn_cls_fpn5": 0.000134, "lr": 0.003000, "mb_qsize": 64, "mem": 5977, "time": 0.389938}
json_stats: {"accuracy_cls": 0.868363, "eta": "9:36:03", "iter": 1360, "loss": 1.054382, "loss_bbox": 0.236258, "loss_cls": 0.282905, "loss_mask": 0.332750, "loss_rpn_bbox_fpn2": 0.117186, "loss_rpn_bbox_fpn3": 0.006783, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.052724, "loss_rpn_cls_fpn3": 0.004935, "loss_rpn_cls_fpn4": 0.000210, "loss_rpn_cls_fpn5": 0.000299, "lr": 0.003000, "mb_qsize": 64, "mem": 5977, "time": 0.389932}
json_stats: {"accuracy_cls": 0.874512, "eta": "9:36:07", "iter": 1380, "loss": 1.108277, "loss_bbox": 0.219408, "loss_cls": 0.291776, "loss_mask": 0.335216, "loss_rpn_bbox_fpn2": 0.112530, "loss_rpn_bbox_fpn3": 0.013678, "loss_rpn_bbox_fpn4": 0.000273, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.065476, "loss_rpn_cls_fpn3": 0.008741, "loss_rpn_cls_fpn4": 0.001114, "loss_rpn_cls_fpn5": 0.000493, "lr": 0.003000, "mb_qsize": 64, "mem": 5978, "time": 0.390067}
json_stats: {"accuracy_cls": 0.862305, "eta": "9:36:48", "iter": 1400, "loss": 1.134394, "loss_bbox": 0.226724, "loss_cls": 0.307463, "loss_mask": 0.318121, "loss_rpn_bbox_fpn2": 0.115509, "loss_rpn_bbox_fpn3": 0.013521, "loss_rpn_bbox_fpn4": 0.003172, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.057128, "loss_rpn_cls_fpn3": 0.009985, "loss_rpn_cls_fpn4": 0.002627, "loss_rpn_cls_fpn5": 0.000101, "lr": 0.003000, "mb_qsize": 64, "mem": 5980, "time": 0.390616}
json_stats: {"accuracy_cls": 0.855957, "eta": "9:36:45", "iter": 1420, "loss": 1.109702, "loss_bbox": 0.259675, "loss_cls": 0.318409, "loss_mask": 0.340900, "loss_rpn_bbox_fpn2": 0.087943, "loss_rpn_bbox_fpn3": 0.018490, "loss_rpn_bbox_fpn4": 0.000622, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.054729, "loss_rpn_cls_fpn3": 0.013164, "loss_rpn_cls_fpn4": 0.004297, "loss_rpn_cls_fpn5": 0.000292, "lr": 0.003000, "mb_qsize": 64, "mem": 5980, "time": 0.390672}
json_stats: {"accuracy_cls": 0.900879, "eta": "9:36:19", "iter": 1440, "loss": 0.888713, "loss_bbox": 0.182586, "loss_cls": 0.209658, "loss_mask": 0.345822, "loss_rpn_bbox_fpn2": 0.083397, "loss_rpn_bbox_fpn3": 0.002468, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038805, "loss_rpn_cls_fpn3": 0.003801, "loss_rpn_cls_fpn4": 0.000292, "loss_rpn_cls_fpn5": 0.000098, "lr": 0.003000, "mb_qsize": 64, "mem": 5980, "time": 0.390465}
json_stats: {"accuracy_cls": 0.872070, "eta": "9:36:18", "iter": 1460, "loss": 1.047264, "loss_bbox": 0.209539, "loss_cls": 0.274038, "loss_mask": 0.347343, "loss_rpn_bbox_fpn2": 0.118801, "loss_rpn_bbox_fpn3": 0.005329, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.055728, "loss_rpn_cls_fpn3": 0.009251, "loss_rpn_cls_fpn4": 0.000118, "loss_rpn_cls_fpn5": 0.000193, "lr": 0.003000, "mb_qsize": 64, "mem": 5980, "time": 0.390543}
json_stats: {"accuracy_cls": 0.878906, "eta": "9:36:08", "iter": 1480, "loss": 1.055356, "loss_bbox": 0.215205, "loss_cls": 0.277051, "loss_mask": 0.342333, "loss_rpn_bbox_fpn2": 0.112426, "loss_rpn_bbox_fpn3": 0.011657, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.053396, "loss_rpn_cls_fpn3": 0.009434, "loss_rpn_cls_fpn4": 0.000320, "loss_rpn_cls_fpn5": 0.000111, "lr": 0.003000, "mb_qsize": 64, "mem": 5980, "time": 0.390511}
json_stats: {"accuracy_cls": 0.883301, "eta": "9:35:53", "iter": 1500, "loss": 0.985292, "loss_bbox": 0.198756, "loss_cls": 0.262041, "loss_mask": 0.331993, "loss_rpn_bbox_fpn2": 0.081521, "loss_rpn_bbox_fpn3": 0.013012, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.060175, "loss_rpn_cls_fpn3": 0.007812, "loss_rpn_cls_fpn4": 0.001483, "loss_rpn_cls_fpn5": 0.000232, "lr": 0.003000, "mb_qsize": 64, "mem": 5980, "time": 0.390437}
json_stats: {"accuracy_cls": 0.861328, "eta": "9:35:55", "iter": 1520, "loss": 1.088518, "loss_bbox": 0.229248, "loss_cls": 0.296422, "loss_mask": 0.337621, "loss_rpn_bbox_fpn2": 0.121841, "loss_rpn_bbox_fpn3": 0.010769, "loss_rpn_bbox_fpn4": 0.000472, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.057502, "loss_rpn_cls_fpn3": 0.011410, "loss_rpn_cls_fpn4": 0.001496, "loss_rpn_cls_fpn5": 0.000265, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390546}
json_stats: {"accuracy_cls": 0.878906, "eta": "9:35:34", "iter": 1540, "loss": 0.941152, "loss_bbox": 0.196209, "loss_cls": 0.265367, "loss_mask": 0.349830, "loss_rpn_bbox_fpn2": 0.081501, "loss_rpn_bbox_fpn3": 0.005619, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.061800, "loss_rpn_cls_fpn3": 0.005447, "loss_rpn_cls_fpn4": 0.000355, "loss_rpn_cls_fpn5": 0.000123, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390395}
json_stats: {"accuracy_cls": 0.861165, "eta": "9:36:06", "iter": 1560, "loss": 0.979696, "loss_bbox": 0.217177, "loss_cls": 0.311300, "loss_mask": 0.320256, "loss_rpn_bbox_fpn2": 0.097440, "loss_rpn_bbox_fpn3": 0.008920, "loss_rpn_bbox_fpn4": 0.000540, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.062186, "loss_rpn_cls_fpn3": 0.006169, "loss_rpn_cls_fpn4": 0.001324, "loss_rpn_cls_fpn5": 0.000412, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390849}
json_stats: {"accuracy_cls": 0.863770, "eta": "9:36:12", "iter": 1580, "loss": 1.024323, "loss_bbox": 0.220831, "loss_cls": 0.294872, "loss_mask": 0.334530, "loss_rpn_bbox_fpn2": 0.107058, "loss_rpn_bbox_fpn3": 0.011184, "loss_rpn_bbox_fpn4": 0.000249, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.054553, "loss_rpn_cls_fpn3": 0.011787, "loss_rpn_cls_fpn4": 0.001797, "loss_rpn_cls_fpn5": 0.000221, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391002}
json_stats: {"accuracy_cls": 0.868044, "eta": "9:36:03", "iter": 1600, "loss": 1.061677, "loss_bbox": 0.191675, "loss_cls": 0.280083, "loss_mask": 0.343457, "loss_rpn_bbox_fpn2": 0.111358, "loss_rpn_bbox_fpn3": 0.008448, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.053004, "loss_rpn_cls_fpn3": 0.004273, "loss_rpn_cls_fpn4": 0.000299, "loss_rpn_cls_fpn5": 0.000054, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390988}
json_stats: {"accuracy_cls": 0.867188, "eta": "9:35:47", "iter": 1620, "loss": 0.922627, "loss_bbox": 0.189202, "loss_cls": 0.282941, "loss_mask": 0.320117, "loss_rpn_bbox_fpn2": 0.079856, "loss_rpn_bbox_fpn3": 0.007059, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.046817, "loss_rpn_cls_fpn3": 0.006035, "loss_rpn_cls_fpn4": 0.000720, "loss_rpn_cls_fpn5": 0.000175, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390893}
json_stats: {"accuracy_cls": 0.879052, "eta": "9:35:36", "iter": 1640, "loss": 0.994318, "loss_bbox": 0.194090, "loss_cls": 0.280474, "loss_mask": 0.342166, "loss_rpn_bbox_fpn2": 0.101971, "loss_rpn_bbox_fpn3": 0.010485, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.048157, "loss_rpn_cls_fpn3": 0.007637, "loss_rpn_cls_fpn4": 0.001037, "loss_rpn_cls_fpn5": 0.000416, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390864}
json_stats: {"accuracy_cls": 0.869141, "eta": "9:35:19", "iter": 1660, "loss": 1.044592, "loss_bbox": 0.222585, "loss_cls": 0.278658, "loss_mask": 0.341747, "loss_rpn_bbox_fpn2": 0.082870, "loss_rpn_bbox_fpn3": 0.013773, "loss_rpn_bbox_fpn4": 0.000329, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.049022, "loss_rpn_cls_fpn3": 0.007459, "loss_rpn_cls_fpn4": 0.001935, "loss_rpn_cls_fpn5": 0.000106, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390759}
json_stats: {"accuracy_cls": 0.880859, "eta": "9:35:23", "iter": 1680, "loss": 1.009147, "loss_bbox": 0.197239, "loss_cls": 0.261969, "loss_mask": 0.339953, "loss_rpn_bbox_fpn2": 0.074230, "loss_rpn_bbox_fpn3": 0.012580, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.042713, "loss_rpn_cls_fpn3": 0.010715, "loss_rpn_cls_fpn4": 0.001777, "loss_rpn_cls_fpn5": 0.000154, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390895}
json_stats: {"accuracy_cls": 0.881348, "eta": "9:34:57", "iter": 1700, "loss": 1.125714, "loss_bbox": 0.232810, "loss_cls": 0.281799, "loss_mask": 0.354822, "loss_rpn_bbox_fpn2": 0.125784, "loss_rpn_bbox_fpn3": 0.013866, "loss_rpn_bbox_fpn4": 0.000664, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.066704, "loss_rpn_cls_fpn3": 0.009149, "loss_rpn_cls_fpn4": 0.000503, "loss_rpn_cls_fpn5": 0.000011, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390688}
json_stats: {"accuracy_cls": 0.888672, "eta": "9:34:42", "iter": 1720, "loss": 0.991015, "loss_bbox": 0.201878, "loss_cls": 0.253904, "loss_mask": 0.322040, "loss_rpn_bbox_fpn2": 0.086629, "loss_rpn_bbox_fpn3": 0.010621, "loss_rpn_bbox_fpn4": 0.000070, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.047688, "loss_rpn_cls_fpn3": 0.004314, "loss_rpn_cls_fpn4": 0.001484, "loss_rpn_cls_fpn5": 0.000046, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390603}
json_stats: {"accuracy_cls": 0.856934, "eta": "9:34:47", "iter": 1740, "loss": 1.022752, "loss_bbox": 0.199135, "loss_cls": 0.316888, "loss_mask": 0.325482, "loss_rpn_bbox_fpn2": 0.104497, "loss_rpn_bbox_fpn3": 0.008670, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.052708, "loss_rpn_cls_fpn3": 0.005879, "loss_rpn_cls_fpn4": 0.000874, "loss_rpn_cls_fpn5": 0.000023, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390749}
json_stats: {"accuracy_cls": 0.853516, "eta": "9:34:39", "iter": 1760, "loss": 1.056558, "loss_bbox": 0.229157, "loss_cls": 0.322282, "loss_mask": 0.346697, "loss_rpn_bbox_fpn2": 0.123339, "loss_rpn_bbox_fpn3": 0.003651, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.048342, "loss_rpn_cls_fpn3": 0.006516, "loss_rpn_cls_fpn4": 0.000156, "loss_rpn_cls_fpn5": 0.000232, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390747}
json_stats: {"accuracy_cls": 0.870605, "eta": "9:34:37", "iter": 1780, "loss": 1.013465, "loss_bbox": 0.208058, "loss_cls": 0.286325, "loss_mask": 0.339769, "loss_rpn_bbox_fpn2": 0.117172, "loss_rpn_bbox_fpn3": 0.010576, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.046324, "loss_rpn_cls_fpn3": 0.008708, "loss_rpn_cls_fpn4": 0.000658, "loss_rpn_cls_fpn5": 0.000140, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390817}
json_stats: {"accuracy_cls": 0.874023, "eta": "9:34:30", "iter": 1800, "loss": 0.975513, "loss_bbox": 0.191659, "loss_cls": 0.275416, "loss_mask": 0.348962, "loss_rpn_bbox_fpn2": 0.091662, "loss_rpn_bbox_fpn3": 0.006942, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034436, "loss_rpn_cls_fpn3": 0.004608, "loss_rpn_cls_fpn4": 0.000716, "loss_rpn_cls_fpn5": 0.000041, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390820}
json_stats: {"accuracy_cls": 0.861816, "eta": "9:34:22", "iter": 1820, "loss": 1.062865, "loss_bbox": 0.238505, "loss_cls": 0.296124, "loss_mask": 0.345439, "loss_rpn_bbox_fpn2": 0.118309, "loss_rpn_bbox_fpn3": 0.011635, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.063649, "loss_rpn_cls_fpn3": 0.008733, "loss_rpn_cls_fpn4": 0.000364, "loss_rpn_cls_fpn5": 0.000084, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390823}
json_stats: {"accuracy_cls": 0.862305, "eta": "9:34:19", "iter": 1840, "loss": 1.135080, "loss_bbox": 0.235016, "loss_cls": 0.316581, "loss_mask": 0.352320, "loss_rpn_bbox_fpn2": 0.107685, "loss_rpn_bbox_fpn3": 0.008793, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.064998, "loss_rpn_cls_fpn3": 0.008417, "loss_rpn_cls_fpn4": 0.000737, "loss_rpn_cls_fpn5": 0.000178, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390870}
json_stats: {"accuracy_cls": 0.871094, "eta": "9:34:18", "iter": 1860, "loss": 0.962243, "loss_bbox": 0.200518, "loss_cls": 0.273374, "loss_mask": 0.324443, "loss_rpn_bbox_fpn2": 0.082603, "loss_rpn_bbox_fpn3": 0.011966, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.053904, "loss_rpn_cls_fpn3": 0.009154, "loss_rpn_cls_fpn4": 0.001257, "loss_rpn_cls_fpn5": 0.000069, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390949}
json_stats: {"accuracy_cls": 0.882324, "eta": "9:34:15", "iter": 1880, "loss": 0.990178, "loss_bbox": 0.194849, "loss_cls": 0.258047, "loss_mask": 0.330716, "loss_rpn_bbox_fpn2": 0.127479, "loss_rpn_bbox_fpn3": 0.008598, "loss_rpn_bbox_fpn4": 0.000537, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.042161, "loss_rpn_cls_fpn3": 0.005726, "loss_rpn_cls_fpn4": 0.000659, "loss_rpn_cls_fpn5": 0.000138, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391002}
json_stats: {"accuracy_cls": 0.872330, "eta": "9:34:11", "iter": 1900, "loss": 1.036312, "loss_bbox": 0.232094, "loss_cls": 0.285485, "loss_mask": 0.329230, "loss_rpn_bbox_fpn2": 0.090557, "loss_rpn_bbox_fpn3": 0.015110, "loss_rpn_bbox_fpn4": 0.000499, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.054778, "loss_rpn_cls_fpn3": 0.012886, "loss_rpn_cls_fpn4": 0.001800, "loss_rpn_cls_fpn5": 0.000173, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391048}
json_stats: {"accuracy_cls": 0.876953, "eta": "9:34:14", "iter": 1920, "loss": 1.020807, "loss_bbox": 0.213807, "loss_cls": 0.274072, "loss_mask": 0.323175, "loss_rpn_bbox_fpn2": 0.099783, "loss_rpn_bbox_fpn3": 0.011882, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.046142, "loss_rpn_cls_fpn3": 0.006607, "loss_rpn_cls_fpn4": 0.000528, "loss_rpn_cls_fpn5": 0.000063, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391173}
json_stats: {"accuracy_cls": 0.862415, "eta": "9:34:10", "iter": 1940, "loss": 0.992119, "loss_bbox": 0.217380, "loss_cls": 0.290881, "loss_mask": 0.345080, "loss_rpn_bbox_fpn2": 0.085797, "loss_rpn_bbox_fpn3": 0.008241, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.048640, "loss_rpn_cls_fpn3": 0.007150, "loss_rpn_cls_fpn4": 0.000603, "loss_rpn_cls_fpn5": 0.000077, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391215}
json_stats: {"accuracy_cls": 0.888184, "eta": "9:33:52", "iter": 1960, "loss": 0.951995, "loss_bbox": 0.185685, "loss_cls": 0.252207, "loss_mask": 0.338483, "loss_rpn_bbox_fpn2": 0.098282, "loss_rpn_bbox_fpn3": 0.006801, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044577, "loss_rpn_cls_fpn3": 0.005978, "loss_rpn_cls_fpn4": 0.000479, "loss_rpn_cls_fpn5": 0.000012, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391106}
json_stats: {"accuracy_cls": 0.879883, "eta": "9:33:46", "iter": 1980, "loss": 0.950682, "loss_bbox": 0.196318, "loss_cls": 0.262795, "loss_mask": 0.337189, "loss_rpn_bbox_fpn2": 0.101228, "loss_rpn_bbox_fpn3": 0.009210, "loss_rpn_bbox_fpn4": 0.000850, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.042539, "loss_rpn_cls_fpn3": 0.006760, "loss_rpn_cls_fpn4": 0.000257, "loss_rpn_cls_fpn5": 0.000083, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391116}
json_stats: {"accuracy_cls": 0.875000, "eta": "9:33:40", "iter": 2000, "loss": 1.000110, "loss_bbox": 0.210995, "loss_cls": 0.271017, "loss_mask": 0.341797, "loss_rpn_bbox_fpn2": 0.107405, "loss_rpn_bbox_fpn3": 0.009605, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038189, "loss_rpn_cls_fpn3": 0.006601, "loss_rpn_cls_fpn4": 0.000895, "loss_rpn_cls_fpn5": 0.000168, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391138}
json_stats: {"accuracy_cls": 0.874512, "eta": "9:33:19", "iter": 2020, "loss": 0.974148, "loss_bbox": 0.195379, "loss_cls": 0.271408, "loss_mask": 0.336766, "loss_rpn_bbox_fpn2": 0.095017, "loss_rpn_bbox_fpn3": 0.005198, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.035047, "loss_rpn_cls_fpn3": 0.003564, "loss_rpn_cls_fpn4": 0.000096, "loss_rpn_cls_fpn5": 0.000019, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390989}
json_stats: {"accuracy_cls": 0.863770, "eta": "9:33:13", "iter": 2040, "loss": 1.110914, "loss_bbox": 0.211853, "loss_cls": 0.298838, "loss_mask": 0.344008, "loss_rpn_bbox_fpn2": 0.129620, "loss_rpn_bbox_fpn3": 0.010820, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.061648, "loss_rpn_cls_fpn3": 0.003894, "loss_rpn_cls_fpn4": 0.000491, "loss_rpn_cls_fpn5": 0.000215, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.391014}
json_stats: {"accuracy_cls": 0.880859, "eta": "9:33:02", "iter": 2060, "loss": 0.998926, "loss_bbox": 0.213721, "loss_cls": 0.243050, "loss_mask": 0.334546, "loss_rpn_bbox_fpn2": 0.089417, "loss_rpn_bbox_fpn3": 0.009221, "loss_rpn_bbox_fpn4": 0.000352, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.050856, "loss_rpn_cls_fpn3": 0.006980, "loss_rpn_cls_fpn4": 0.000464, "loss_rpn_cls_fpn5": 0.000070, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390982}
json_stats: {"accuracy_cls": 0.875028, "eta": "9:32:47", "iter": 2080, "loss": 0.879353, "loss_bbox": 0.188744, "loss_cls": 0.252043, "loss_mask": 0.336497, "loss_rpn_bbox_fpn2": 0.063749, "loss_rpn_bbox_fpn3": 0.004090, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044196, "loss_rpn_cls_fpn3": 0.004310, "loss_rpn_cls_fpn4": 0.000563, "loss_rpn_cls_fpn5": 0.000083, "lr": 0.003000, "mb_qsize": 64, "mem": 5981, "time": 0.390892}
json_stats: {"accuracy_cls": 0.889648, "eta": "9:32:23", "iter": 2100, "loss": 0.978398, "loss_bbox": 0.218413, "loss_cls": 0.242822, "loss_mask": 0.351782, "loss_rpn_bbox_fpn2": 0.112662, "loss_rpn_bbox_fpn3": 0.006102, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.051500, "loss_rpn_cls_fpn3": 0.003468, "loss_rpn_cls_fpn4": 0.000163, "loss_rpn_cls_fpn5": 0.000183, "lr": 0.003000, "mb_qsize": 64, "mem": 5983, "time": 0.390708}
json_stats: {"accuracy_cls": 0.865234, "eta": "9:32:19", "iter": 2120, "loss": 1.098996, "loss_bbox": 0.206353, "loss_cls": 0.293902, "loss_mask": 0.332586, "loss_rpn_bbox_fpn2": 0.102340, "loss_rpn_bbox_fpn3": 0.010896, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.068187, "loss_rpn_cls_fpn3": 0.009309, "loss_rpn_cls_fpn4": 0.000505, "loss_rpn_cls_fpn5": 0.000140, "lr": 0.003000, "mb_qsize": 64, "mem": 5983, "time": 0.390749}
json_stats: {"accuracy_cls": 0.876953, "eta": "9:32:14", "iter": 2140, "loss": 0.989146, "loss_bbox": 0.195282, "loss_cls": 0.270646, "loss_mask": 0.339289, "loss_rpn_bbox_fpn2": 0.107173, "loss_rpn_bbox_fpn3": 0.002713, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039660, "loss_rpn_cls_fpn3": 0.005537, "loss_rpn_cls_fpn4": 0.000129, "loss_rpn_cls_fpn5": 0.000079, "lr": 0.003000, "mb_qsize": 64, "mem": 5984, "time": 0.390784}
json_stats: {"accuracy_cls": 0.878906, "eta": "9:32:16", "iter": 2160, "loss": 1.067193, "loss_bbox": 0.214574, "loss_cls": 0.284419, "loss_mask": 0.338816, "loss_rpn_bbox_fpn2": 0.139770, "loss_rpn_bbox_fpn3": 0.010925, "loss_rpn_bbox_fpn4": 0.001227, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.047950, "loss_rpn_cls_fpn3": 0.007418, "loss_rpn_cls_fpn4": 0.001238, "loss_rpn_cls_fpn5": 0.000240, "lr": 0.003000, "mb_qsize": 64, "mem": 5984, "time": 0.390900}
json_stats: {"accuracy_cls": 0.863770, "eta": "9:32:10", "iter": 2180, "loss": 1.049944, "loss_bbox": 0.200318, "loss_cls": 0.292310, "loss_mask": 0.328104, "loss_rpn_bbox_fpn2": 0.076575, "loss_rpn_bbox_fpn3": 0.008474, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.064770, "loss_rpn_cls_fpn3": 0.009043, "loss_rpn_cls_fpn4": 0.000628, "loss_rpn_cls_fpn5": 0.000080, "lr": 0.003000, "mb_qsize": 64, "mem": 5990, "time": 0.390922}
json_stats: {"accuracy_cls": 0.851562, "eta": "9:31:56", "iter": 2200, "loss": 1.057056, "loss_bbox": 0.191504, "loss_cls": 0.306093, "loss_mask": 0.336393, "loss_rpn_bbox_fpn2": 0.095164, "loss_rpn_bbox_fpn3": 0.009569, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.047162, "loss_rpn_cls_fpn3": 0.006047, "loss_rpn_cls_fpn4": 0.000652, "loss_rpn_cls_fpn5": 0.000068, "lr": 0.003000, "mb_qsize": 64, "mem": 5990, "time": 0.390844}
json_stats: {"accuracy_cls": 0.876985, "eta": "9:31:53", "iter": 2220, "loss": 1.004199, "loss_bbox": 0.197303, "loss_cls": 0.274601, "loss_mask": 0.331664, "loss_rpn_bbox_fpn2": 0.084481, "loss_rpn_bbox_fpn3": 0.008679, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.036212, "loss_rpn_cls_fpn3": 0.004403, "loss_rpn_cls_fpn4": 0.000574, "loss_rpn_cls_fpn5": 0.000016, "lr": 0.003000, "mb_qsize": 64, "mem": 5990, "time": 0.390903}
json_stats: {"accuracy_cls": 0.882812, "eta": "9:31:38", "iter": 2240, "loss": 0.984729, "loss_bbox": 0.206578, "loss_cls": 0.263728, "loss_mask": 0.338056, "loss_rpn_bbox_fpn2": 0.095219, "loss_rpn_bbox_fpn3": 0.004563, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038528, "loss_rpn_cls_fpn3": 0.003703, "loss_rpn_cls_fpn4": 0.000092, "loss_rpn_cls_fpn5": 0.000027, "lr": 0.003000, "mb_qsize": 64, "mem": 5990, "time": 0.390827}
json_stats: {"accuracy_cls": 0.863770, "eta": "9:31:46", "iter": 2260, "loss": 1.116971, "loss_bbox": 0.220563, "loss_cls": 0.315154, "loss_mask": 0.331580, "loss_rpn_bbox_fpn2": 0.104276, "loss_rpn_bbox_fpn3": 0.016409, "loss_rpn_bbox_fpn4": 0.001560, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.064026, "loss_rpn_cls_fpn3": 0.013220, "loss_rpn_cls_fpn4": 0.001595, "loss_rpn_cls_fpn5": 0.000100, "lr": 0.003000, "mb_qsize": 64, "mem": 5990, "time": 0.390997}
json_stats: {"accuracy_cls": 0.861581, "eta": "9:31:47", "iter": 2280, "loss": 0.974682, "loss_bbox": 0.213263, "loss_cls": 0.274264, "loss_mask": 0.321101, "loss_rpn_bbox_fpn2": 0.091976, "loss_rpn_bbox_fpn3": 0.010263, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.048525, "loss_rpn_cls_fpn3": 0.012211, "loss_rpn_cls_fpn4": 0.000424, "loss_rpn_cls_fpn5": 0.000077, "lr": 0.003000, "mb_qsize": 64, "mem": 5990, "time": 0.391107}
json_stats: {"accuracy_cls": 0.868164, "eta": "9:31:47", "iter": 2300, "loss": 1.038903, "loss_bbox": 0.212169, "loss_cls": 0.288480, "loss_mask": 0.331492, "loss_rpn_bbox_fpn2": 0.120967, "loss_rpn_bbox_fpn3": 0.013135, "loss_rpn_bbox_fpn4": 0.000455, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.049603, "loss_rpn_cls_fpn3": 0.007125, "loss_rpn_cls_fpn4": 0.000933, "loss_rpn_cls_fpn5": 0.000071, "lr": 0.003000, "mb_qsize": 64, "mem": 5990, "time": 0.391186}
json_stats: {"accuracy_cls": 0.877930, "eta": "9:31:54", "iter": 2320, "loss": 0.950787, "loss_bbox": 0.208566, "loss_cls": 0.261153, "loss_mask": 0.324520, "loss_rpn_bbox_fpn2": 0.101304, "loss_rpn_bbox_fpn3": 0.009880, "loss_rpn_bbox_fpn4": 0.000398, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.036738, "loss_rpn_cls_fpn3": 0.003744, "loss_rpn_cls_fpn4": 0.000691, "loss_rpn_cls_fpn5": 0.000101, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391363}
json_stats: {"accuracy_cls": 0.895508, "eta": "9:32:02", "iter": 2340, "loss": 0.902049, "loss_bbox": 0.184967, "loss_cls": 0.243855, "loss_mask": 0.327442, "loss_rpn_bbox_fpn2": 0.082711, "loss_rpn_bbox_fpn3": 0.007553, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038870, "loss_rpn_cls_fpn3": 0.008204, "loss_rpn_cls_fpn4": 0.000822, "loss_rpn_cls_fpn5": 0.000099, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391539}
json_stats: {"accuracy_cls": 0.898438, "eta": "9:31:49", "iter": 2360, "loss": 0.906447, "loss_bbox": 0.192394, "loss_cls": 0.242937, "loss_mask": 0.329983, "loss_rpn_bbox_fpn2": 0.083274, "loss_rpn_bbox_fpn3": 0.010040, "loss_rpn_bbox_fpn4": 0.000515, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.040574, "loss_rpn_cls_fpn3": 0.006332, "loss_rpn_cls_fpn4": 0.000369, "loss_rpn_cls_fpn5": 0.000065, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391481}
json_stats: {"accuracy_cls": 0.878418, "eta": "9:31:25", "iter": 2380, "loss": 0.969801, "loss_bbox": 0.180129, "loss_cls": 0.255623, "loss_mask": 0.341101, "loss_rpn_bbox_fpn2": 0.092482, "loss_rpn_bbox_fpn3": 0.007201, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038771, "loss_rpn_cls_fpn3": 0.003412, "loss_rpn_cls_fpn4": 0.000710, "loss_rpn_cls_fpn5": 0.000010, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391294}
json_stats: {"accuracy_cls": 0.882812, "eta": "9:31:24", "iter": 2400, "loss": 1.006028, "loss_bbox": 0.204789, "loss_cls": 0.245012, "loss_mask": 0.327699, "loss_rpn_bbox_fpn2": 0.112511, "loss_rpn_bbox_fpn3": 0.004897, "loss_rpn_bbox_fpn4": 0.000393, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.045934, "loss_rpn_cls_fpn3": 0.006078, "loss_rpn_cls_fpn4": 0.000381, "loss_rpn_cls_fpn5": 0.000066, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391377}
json_stats: {"accuracy_cls": 0.861816, "eta": "9:31:19", "iter": 2420, "loss": 1.073712, "loss_bbox": 0.221494, "loss_cls": 0.301283, "loss_mask": 0.344089, "loss_rpn_bbox_fpn2": 0.113237, "loss_rpn_bbox_fpn3": 0.009621, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.068455, "loss_rpn_cls_fpn3": 0.007184, "loss_rpn_cls_fpn4": 0.000330, "loss_rpn_cls_fpn5": 0.000212, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391410}
json_stats: {"accuracy_cls": 0.878906, "eta": "9:31:04", "iter": 2440, "loss": 0.983965, "loss_bbox": 0.203060, "loss_cls": 0.249544, "loss_mask": 0.339856, "loss_rpn_bbox_fpn2": 0.077791, "loss_rpn_bbox_fpn3": 0.010143, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.046087, "loss_rpn_cls_fpn3": 0.006681, "loss_rpn_cls_fpn4": 0.000794, "loss_rpn_cls_fpn5": 0.000039, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391326}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:30:52", "iter": 2460, "loss": 0.982843, "loss_bbox": 0.197686, "loss_cls": 0.251958, "loss_mask": 0.333869, "loss_rpn_bbox_fpn2": 0.091570, "loss_rpn_bbox_fpn3": 0.006723, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.041041, "loss_rpn_cls_fpn3": 0.004172, "loss_rpn_cls_fpn4": 0.000357, "loss_rpn_cls_fpn5": 0.000021, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391277}
json_stats: {"accuracy_cls": 0.879395, "eta": "9:30:40", "iter": 2480, "loss": 1.034966, "loss_bbox": 0.203582, "loss_cls": 0.276524, "loss_mask": 0.330884, "loss_rpn_bbox_fpn2": 0.097303, "loss_rpn_bbox_fpn3": 0.009109, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.056357, "loss_rpn_cls_fpn3": 0.005024, "loss_rpn_cls_fpn4": 0.000744, "loss_rpn_cls_fpn5": 0.000186, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391229}
json_stats: {"accuracy_cls": 0.889881, "eta": "9:30:34", "iter": 2500, "loss": 0.895449, "loss_bbox": 0.174611, "loss_cls": 0.248314, "loss_mask": 0.335426, "loss_rpn_bbox_fpn2": 0.080229, "loss_rpn_bbox_fpn3": 0.011874, "loss_rpn_bbox_fpn4": 0.000193, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.047727, "loss_rpn_cls_fpn3": 0.005997, "loss_rpn_cls_fpn4": 0.000694, "loss_rpn_cls_fpn5": 0.000045, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391247}
json_stats: {"accuracy_cls": 0.880859, "eta": "9:30:10", "iter": 2520, "loss": 1.003857, "loss_bbox": 0.230600, "loss_cls": 0.273908, "loss_mask": 0.341714, "loss_rpn_bbox_fpn2": 0.082522, "loss_rpn_bbox_fpn3": 0.009673, "loss_rpn_bbox_fpn4": 0.000731, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.033358, "loss_rpn_cls_fpn3": 0.007047, "loss_rpn_cls_fpn4": 0.001133, "loss_rpn_cls_fpn5": 0.000025, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391063}
json_stats: {"accuracy_cls": 0.874167, "eta": "9:30:08", "iter": 2540, "loss": 0.989441, "loss_bbox": 0.195365, "loss_cls": 0.279872, "loss_mask": 0.338637, "loss_rpn_bbox_fpn2": 0.059876, "loss_rpn_bbox_fpn3": 0.007964, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.056851, "loss_rpn_cls_fpn3": 0.010663, "loss_rpn_cls_fpn4": 0.000851, "loss_rpn_cls_fpn5": 0.000018, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391135}
json_stats: {"accuracy_cls": 0.867676, "eta": "9:29:51", "iter": 2560, "loss": 0.995093, "loss_bbox": 0.213661, "loss_cls": 0.285170, "loss_mask": 0.343303, "loss_rpn_bbox_fpn2": 0.109334, "loss_rpn_bbox_fpn3": 0.010046, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038567, "loss_rpn_cls_fpn3": 0.005918, "loss_rpn_cls_fpn4": 0.000591, "loss_rpn_cls_fpn5": 0.000036, "lr": 0.003000, "mb_qsize": 64, "mem": 5995, "time": 0.391031}
json_stats: {"accuracy_cls": 0.854814, "eta": "9:29:50", "iter": 2580, "loss": 1.080832, "loss_bbox": 0.197309, "loss_cls": 0.309593, "loss_mask": 0.340205, "loss_rpn_bbox_fpn2": 0.116306, "loss_rpn_bbox_fpn3": 0.007735, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.050848, "loss_rpn_cls_fpn3": 0.005916, "loss_rpn_cls_fpn4": 0.000644, "loss_rpn_cls_fpn5": 0.000071, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.391101}
json_stats: {"accuracy_cls": 0.876953, "eta": "9:29:43", "iter": 2600, "loss": 0.973893, "loss_bbox": 0.203283, "loss_cls": 0.258475, "loss_mask": 0.348929, "loss_rpn_bbox_fpn2": 0.094470, "loss_rpn_bbox_fpn3": 0.007594, "loss_rpn_bbox_fpn4": 0.000260, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034748, "loss_rpn_cls_fpn3": 0.003408, "loss_rpn_cls_fpn4": 0.000295, "loss_rpn_cls_fpn5": 0.000030, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.391113}
json_stats: {"accuracy_cls": 0.879107, "eta": "9:29:28", "iter": 2620, "loss": 0.962633, "loss_bbox": 0.215617, "loss_cls": 0.263470, "loss_mask": 0.321134, "loss_rpn_bbox_fpn2": 0.075746, "loss_rpn_bbox_fpn3": 0.010870, "loss_rpn_bbox_fpn4": 0.002299, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.045573, "loss_rpn_cls_fpn3": 0.009221, "loss_rpn_cls_fpn4": 0.001390, "loss_rpn_cls_fpn5": 0.000087, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.391032}
json_stats: {"accuracy_cls": 0.856934, "eta": "9:29:17", "iter": 2640, "loss": 1.064121, "loss_bbox": 0.222853, "loss_cls": 0.292495, "loss_mask": 0.346615, "loss_rpn_bbox_fpn2": 0.097148, "loss_rpn_bbox_fpn3": 0.003305, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.052907, "loss_rpn_cls_fpn3": 0.007426, "loss_rpn_cls_fpn4": 0.000358, "loss_rpn_cls_fpn5": 0.000193, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390996}
json_stats: {"accuracy_cls": 0.871094, "eta": "9:28:56", "iter": 2660, "loss": 1.016810, "loss_bbox": 0.213459, "loss_cls": 0.280175, "loss_mask": 0.354400, "loss_rpn_bbox_fpn2": 0.084278, "loss_rpn_bbox_fpn3": 0.007998, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.050741, "loss_rpn_cls_fpn3": 0.005060, "loss_rpn_cls_fpn4": 0.000795, "loss_rpn_cls_fpn5": 0.000122, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390843}
json_stats: {"accuracy_cls": 0.883301, "eta": "9:28:52", "iter": 2680, "loss": 0.987317, "loss_bbox": 0.182649, "loss_cls": 0.259774, "loss_mask": 0.314970, "loss_rpn_bbox_fpn2": 0.102785, "loss_rpn_bbox_fpn3": 0.007499, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032885, "loss_rpn_cls_fpn3": 0.005103, "loss_rpn_cls_fpn4": 0.000203, "loss_rpn_cls_fpn5": 0.000076, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390893}
json_stats: {"accuracy_cls": 0.856101, "eta": "9:28:39", "iter": 2700, "loss": 1.056196, "loss_bbox": 0.223279, "loss_cls": 0.317786, "loss_mask": 0.337006, "loss_rpn_bbox_fpn2": 0.073532, "loss_rpn_bbox_fpn3": 0.009967, "loss_rpn_bbox_fpn4": 0.000522, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.046673, "loss_rpn_cls_fpn3": 0.012388, "loss_rpn_cls_fpn4": 0.001034, "loss_rpn_cls_fpn5": 0.000068, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390835}
json_stats: {"accuracy_cls": 0.883006, "eta": "9:28:27", "iter": 2720, "loss": 0.959032, "loss_bbox": 0.194812, "loss_cls": 0.250715, "loss_mask": 0.325573, "loss_rpn_bbox_fpn2": 0.073108, "loss_rpn_bbox_fpn3": 0.009796, "loss_rpn_bbox_fpn4": 0.000036, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.049282, "loss_rpn_cls_fpn3": 0.008990, "loss_rpn_cls_fpn4": 0.000649, "loss_rpn_cls_fpn5": 0.000022, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390779}
json_stats: {"accuracy_cls": 0.863770, "eta": "9:28:29", "iter": 2740, "loss": 1.044998, "loss_bbox": 0.203597, "loss_cls": 0.303169, "loss_mask": 0.319733, "loss_rpn_bbox_fpn2": 0.109888, "loss_rpn_bbox_fpn3": 0.010673, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.055286, "loss_rpn_cls_fpn3": 0.008597, "loss_rpn_cls_fpn4": 0.001457, "loss_rpn_cls_fpn5": 0.000096, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390894}
json_stats: {"accuracy_cls": 0.882324, "eta": "9:28:16", "iter": 2760, "loss": 0.983833, "loss_bbox": 0.187798, "loss_cls": 0.252776, "loss_mask": 0.352832, "loss_rpn_bbox_fpn2": 0.091466, "loss_rpn_bbox_fpn3": 0.012701, "loss_rpn_bbox_fpn4": 0.000466, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044695, "loss_rpn_cls_fpn3": 0.005002, "loss_rpn_cls_fpn4": 0.000860, "loss_rpn_cls_fpn5": 0.000040, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390838}
json_stats: {"accuracy_cls": 0.865234, "eta": "9:28:17", "iter": 2780, "loss": 1.064401, "loss_bbox": 0.225826, "loss_cls": 0.295269, "loss_mask": 0.329302, "loss_rpn_bbox_fpn2": 0.100680, "loss_rpn_bbox_fpn3": 0.010304, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039652, "loss_rpn_cls_fpn3": 0.008430, "loss_rpn_cls_fpn4": 0.000380, "loss_rpn_cls_fpn5": 0.000014, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390933}
json_stats: {"accuracy_cls": 0.871094, "eta": "9:28:02", "iter": 2800, "loss": 1.000918, "loss_bbox": 0.193337, "loss_cls": 0.287238, "loss_mask": 0.330365, "loss_rpn_bbox_fpn2": 0.127300, "loss_rpn_bbox_fpn3": 0.011542, "loss_rpn_bbox_fpn4": 0.000841, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.057207, "loss_rpn_cls_fpn3": 0.007081, "loss_rpn_cls_fpn4": 0.001289, "loss_rpn_cls_fpn5": 0.000040, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390849}
json_stats: {"accuracy_cls": 0.871094, "eta": "9:28:00", "iter": 2820, "loss": 0.992280, "loss_bbox": 0.185591, "loss_cls": 0.295004, "loss_mask": 0.338529, "loss_rpn_bbox_fpn2": 0.104381, "loss_rpn_bbox_fpn3": 0.008688, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.043075, "loss_rpn_cls_fpn3": 0.007493, "loss_rpn_cls_fpn4": 0.001374, "loss_rpn_cls_fpn5": 0.000146, "lr": 0.003000, "mb_qsize": 64, "mem": 5997, "time": 0.390923}
json_stats: {"accuracy_cls": 0.876465, "eta": "9:27:57", "iter": 2840, "loss": 0.931603, "loss_bbox": 0.180594, "loss_cls": 0.260505, "loss_mask": 0.323742, "loss_rpn_bbox_fpn2": 0.108820, "loss_rpn_bbox_fpn3": 0.008365, "loss_rpn_bbox_fpn4": 0.000362, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.037035, "loss_rpn_cls_fpn3": 0.003905, "loss_rpn_cls_fpn4": 0.000553, "loss_rpn_cls_fpn5": 0.000030, "lr": 0.003000, "mb_qsize": 64, "mem": 5998, "time": 0.390977}
json_stats: {"accuracy_cls": 0.897461, "eta": "9:27:48", "iter": 2860, "loss": 0.948533, "loss_bbox": 0.179553, "loss_cls": 0.226953, "loss_mask": 0.351346, "loss_rpn_bbox_fpn2": 0.112768, "loss_rpn_bbox_fpn3": 0.005598, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.042270, "loss_rpn_cls_fpn3": 0.002427, "loss_rpn_cls_fpn4": 0.000091, "loss_rpn_cls_fpn5": 0.000041, "lr": 0.003000, "mb_qsize": 64, "mem": 5998, "time": 0.390961}
json_stats: {"accuracy_cls": 0.879395, "eta": "9:27:50", "iter": 2880, "loss": 0.968784, "loss_bbox": 0.217569, "loss_cls": 0.257331, "loss_mask": 0.333075, "loss_rpn_bbox_fpn2": 0.077381, "loss_rpn_bbox_fpn3": 0.008545, "loss_rpn_bbox_fpn4": 0.000126, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.037502, "loss_rpn_cls_fpn3": 0.009661, "loss_rpn_cls_fpn4": 0.000377, "loss_rpn_cls_fpn5": 0.000035, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391078}
json_stats: {"accuracy_cls": 0.871094, "eta": "9:27:41", "iter": 2900, "loss": 0.962917, "loss_bbox": 0.217426, "loss_cls": 0.270622, "loss_mask": 0.334725, "loss_rpn_bbox_fpn2": 0.088811, "loss_rpn_bbox_fpn3": 0.011301, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.031057, "loss_rpn_cls_fpn3": 0.006088, "loss_rpn_cls_fpn4": 0.000445, "loss_rpn_cls_fpn5": 0.000026, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391067}
json_stats: {"accuracy_cls": 0.904297, "eta": "9:27:27", "iter": 2920, "loss": 0.922700, "loss_bbox": 0.180074, "loss_cls": 0.225067, "loss_mask": 0.338365, "loss_rpn_bbox_fpn2": 0.074606, "loss_rpn_bbox_fpn3": 0.001621, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.051689, "loss_rpn_cls_fpn3": 0.002244, "loss_rpn_cls_fpn4": 0.000131, "loss_rpn_cls_fpn5": 0.000069, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390991}
json_stats: {"accuracy_cls": 0.875488, "eta": "9:27:25", "iter": 2940, "loss": 0.968219, "loss_bbox": 0.165468, "loss_cls": 0.265188, "loss_mask": 0.330362, "loss_rpn_bbox_fpn2": 0.085480, "loss_rpn_bbox_fpn3": 0.006065, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.051719, "loss_rpn_cls_fpn3": 0.008003, "loss_rpn_cls_fpn4": 0.000312, "loss_rpn_cls_fpn5": 0.000025, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391053}
json_stats: {"accuracy_cls": 0.864746, "eta": "9:27:25", "iter": 2960, "loss": 0.920692, "loss_bbox": 0.167656, "loss_cls": 0.289557, "loss_mask": 0.323194, "loss_rpn_bbox_fpn2": 0.097555, "loss_rpn_bbox_fpn3": 0.007474, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044954, "loss_rpn_cls_fpn3": 0.003666, "loss_rpn_cls_fpn4": 0.000327, "loss_rpn_cls_fpn5": 0.000040, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391147}
json_stats: {"accuracy_cls": 0.877441, "eta": "9:27:18", "iter": 2980, "loss": 0.943654, "loss_bbox": 0.178430, "loss_cls": 0.257680, "loss_mask": 0.330816, "loss_rpn_bbox_fpn2": 0.088126, "loss_rpn_bbox_fpn3": 0.007046, "loss_rpn_bbox_fpn4": 0.001123, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.042432, "loss_rpn_cls_fpn3": 0.006131, "loss_rpn_cls_fpn4": 0.000335, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391162}
json_stats: {"accuracy_cls": 0.866699, "eta": "9:27:04", "iter": 3000, "loss": 1.003635, "loss_bbox": 0.204595, "loss_cls": 0.281127, "loss_mask": 0.346458, "loss_rpn_bbox_fpn2": 0.100985, "loss_rpn_bbox_fpn3": 0.008628, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.047018, "loss_rpn_cls_fpn3": 0.003683, "loss_rpn_cls_fpn4": 0.000443, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391082}
json_stats: {"accuracy_cls": 0.873047, "eta": "9:26:56", "iter": 3020, "loss": 0.919049, "loss_bbox": 0.191671, "loss_cls": 0.261099, "loss_mask": 0.330989, "loss_rpn_bbox_fpn2": 0.078365, "loss_rpn_bbox_fpn3": 0.010011, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.026138, "loss_rpn_cls_fpn3": 0.007039, "loss_rpn_cls_fpn4": 0.000404, "loss_rpn_cls_fpn5": 0.000022, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391089}
json_stats: {"accuracy_cls": 0.870007, "eta": "9:26:45", "iter": 3040, "loss": 1.024059, "loss_bbox": 0.218886, "loss_cls": 0.279185, "loss_mask": 0.336331, "loss_rpn_bbox_fpn2": 0.090180, "loss_rpn_bbox_fpn3": 0.012560, "loss_rpn_bbox_fpn4": 0.001016, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044500, "loss_rpn_cls_fpn3": 0.007680, "loss_rpn_cls_fpn4": 0.000289, "loss_rpn_cls_fpn5": 0.000030, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391050}
json_stats: {"accuracy_cls": 0.879256, "eta": "9:26:37", "iter": 3060, "loss": 1.047614, "loss_bbox": 0.195485, "loss_cls": 0.274635, "loss_mask": 0.334044, "loss_rpn_bbox_fpn2": 0.102080, "loss_rpn_bbox_fpn3": 0.011323, "loss_rpn_bbox_fpn4": 0.000303, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044106, "loss_rpn_cls_fpn3": 0.007934, "loss_rpn_cls_fpn4": 0.000311, "loss_rpn_cls_fpn5": 0.000039, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391048}
json_stats: {"accuracy_cls": 0.885742, "eta": "9:26:33", "iter": 3080, "loss": 0.934840, "loss_bbox": 0.168426, "loss_cls": 0.254481, "loss_mask": 0.351706, "loss_rpn_bbox_fpn2": 0.095138, "loss_rpn_bbox_fpn3": 0.001549, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.040349, "loss_rpn_cls_fpn3": 0.000682, "loss_rpn_cls_fpn4": 0.000056, "loss_rpn_cls_fpn5": 0.000025, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391085}
json_stats: {"accuracy_cls": 0.885742, "eta": "9:26:22", "iter": 3100, "loss": 0.949516, "loss_bbox": 0.191462, "loss_cls": 0.266801, "loss_mask": 0.347494, "loss_rpn_bbox_fpn2": 0.062464, "loss_rpn_bbox_fpn3": 0.003425, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028661, "loss_rpn_cls_fpn3": 0.002104, "loss_rpn_cls_fpn4": 0.000070, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391054}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:26:05", "iter": 3120, "loss": 0.955741, "loss_bbox": 0.187038, "loss_cls": 0.263154, "loss_mask": 0.336773, "loss_rpn_bbox_fpn2": 0.075650, "loss_rpn_bbox_fpn3": 0.006531, "loss_rpn_bbox_fpn4": 0.000872, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.031326, "loss_rpn_cls_fpn3": 0.005038, "loss_rpn_cls_fpn4": 0.000187, "loss_rpn_cls_fpn5": 0.000006, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390952}
json_stats: {"accuracy_cls": 0.868164, "eta": "9:25:56", "iter": 3140, "loss": 1.014685, "loss_bbox": 0.215057, "loss_cls": 0.296103, "loss_mask": 0.332676, "loss_rpn_bbox_fpn2": 0.081033, "loss_rpn_bbox_fpn3": 0.008923, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.041473, "loss_rpn_cls_fpn3": 0.007794, "loss_rpn_cls_fpn4": 0.000320, "loss_rpn_cls_fpn5": 0.000019, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390930}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:25:57", "iter": 3160, "loss": 1.000121, "loss_bbox": 0.198052, "loss_cls": 0.266369, "loss_mask": 0.324278, "loss_rpn_bbox_fpn2": 0.088083, "loss_rpn_bbox_fpn3": 0.012473, "loss_rpn_bbox_fpn4": 0.000488, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044822, "loss_rpn_cls_fpn3": 0.005991, "loss_rpn_cls_fpn4": 0.000217, "loss_rpn_cls_fpn5": 0.000101, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391032}
json_stats: {"accuracy_cls": 0.887695, "eta": "9:25:48", "iter": 3180, "loss": 1.002676, "loss_bbox": 0.179421, "loss_cls": 0.262572, "loss_mask": 0.333471, "loss_rpn_bbox_fpn2": 0.072349, "loss_rpn_bbox_fpn3": 0.007231, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.033452, "loss_rpn_cls_fpn3": 0.004873, "loss_rpn_cls_fpn4": 0.000231, "loss_rpn_cls_fpn5": 0.000020, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.391025}
json_stats: {"accuracy_cls": 0.889440, "eta": "9:25:28", "iter": 3200, "loss": 0.929208, "loss_bbox": 0.177537, "loss_cls": 0.239962, "loss_mask": 0.333411, "loss_rpn_bbox_fpn2": 0.079521, "loss_rpn_bbox_fpn3": 0.004451, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034278, "loss_rpn_cls_fpn3": 0.005463, "loss_rpn_cls_fpn4": 0.000256, "loss_rpn_cls_fpn5": 0.000034, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390877}
json_stats: {"accuracy_cls": 0.870384, "eta": "9:25:23", "iter": 3220, "loss": 1.057253, "loss_bbox": 0.224481, "loss_cls": 0.285635, "loss_mask": 0.341584, "loss_rpn_bbox_fpn2": 0.106084, "loss_rpn_bbox_fpn3": 0.008032, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.045144, "loss_rpn_cls_fpn3": 0.004099, "loss_rpn_cls_fpn4": 0.000381, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390909}
json_stats: {"accuracy_cls": 0.885254, "eta": "9:25:12", "iter": 3240, "loss": 0.884069, "loss_bbox": 0.176315, "loss_cls": 0.237988, "loss_mask": 0.322060, "loss_rpn_bbox_fpn2": 0.079545, "loss_rpn_bbox_fpn3": 0.005318, "loss_rpn_bbox_fpn4": 0.000266, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.042815, "loss_rpn_cls_fpn3": 0.004812, "loss_rpn_cls_fpn4": 0.000355, "loss_rpn_cls_fpn5": 0.000031, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390875}
json_stats: {"accuracy_cls": 0.896484, "eta": "9:25:09", "iter": 3260, "loss": 0.960645, "loss_bbox": 0.192046, "loss_cls": 0.236959, "loss_mask": 0.326514, "loss_rpn_bbox_fpn2": 0.100544, "loss_rpn_bbox_fpn3": 0.002684, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.052428, "loss_rpn_cls_fpn3": 0.002619, "loss_rpn_cls_fpn4": 0.000267, "loss_rpn_cls_fpn5": 0.000017, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390928}
json_stats: {"accuracy_cls": 0.897461, "eta": "9:25:00", "iter": 3280, "loss": 0.843149, "loss_bbox": 0.173936, "loss_cls": 0.222669, "loss_mask": 0.329267, "loss_rpn_bbox_fpn2": 0.063933, "loss_rpn_bbox_fpn3": 0.008384, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032508, "loss_rpn_cls_fpn3": 0.004037, "loss_rpn_cls_fpn4": 0.000048, "loss_rpn_cls_fpn5": 0.000046, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390916}
json_stats: {"accuracy_cls": 0.886230, "eta": "9:24:46", "iter": 3300, "loss": 0.861647, "loss_bbox": 0.171876, "loss_cls": 0.244336, "loss_mask": 0.330131, "loss_rpn_bbox_fpn2": 0.078447, "loss_rpn_bbox_fpn3": 0.009516, "loss_rpn_bbox_fpn4": 0.000592, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032599, "loss_rpn_cls_fpn3": 0.006374, "loss_rpn_cls_fpn4": 0.000504, "loss_rpn_cls_fpn5": 0.000052, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390847}
json_stats: {"accuracy_cls": 0.871094, "eta": "9:24:37", "iter": 3320, "loss": 1.024205, "loss_bbox": 0.187529, "loss_cls": 0.282260, "loss_mask": 0.332963, "loss_rpn_bbox_fpn2": 0.105207, "loss_rpn_bbox_fpn3": 0.008468, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.046946, "loss_rpn_cls_fpn3": 0.007047, "loss_rpn_cls_fpn4": 0.000024, "loss_rpn_cls_fpn5": 0.000015, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390833}
json_stats: {"accuracy_cls": 0.873771, "eta": "9:24:35", "iter": 3340, "loss": 0.989926, "loss_bbox": 0.195899, "loss_cls": 0.262187, "loss_mask": 0.311522, "loss_rpn_bbox_fpn2": 0.078159, "loss_rpn_bbox_fpn3": 0.008453, "loss_rpn_bbox_fpn4": 0.001473, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.040891, "loss_rpn_cls_fpn3": 0.004890, "loss_rpn_cls_fpn4": 0.000924, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390898}
json_stats: {"accuracy_cls": 0.871582, "eta": "9:24:17", "iter": 3360, "loss": 0.999914, "loss_bbox": 0.201677, "loss_cls": 0.276263, "loss_mask": 0.344228, "loss_rpn_bbox_fpn2": 0.081274, "loss_rpn_bbox_fpn3": 0.005232, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039683, "loss_rpn_cls_fpn3": 0.008576, "loss_rpn_cls_fpn4": 0.001082, "loss_rpn_cls_fpn5": 0.000022, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390786}
json_stats: {"accuracy_cls": 0.874023, "eta": "9:24:06", "iter": 3380, "loss": 0.962814, "loss_bbox": 0.189164, "loss_cls": 0.274801, "loss_mask": 0.329596, "loss_rpn_bbox_fpn2": 0.091789, "loss_rpn_bbox_fpn3": 0.007648, "loss_rpn_bbox_fpn4": 0.000792, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032837, "loss_rpn_cls_fpn3": 0.002859, "loss_rpn_cls_fpn4": 0.000986, "loss_rpn_cls_fpn5": 0.000039, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390742}
json_stats: {"accuracy_cls": 0.887839, "eta": "9:23:50", "iter": 3400, "loss": 0.860350, "loss_bbox": 0.169250, "loss_cls": 0.231865, "loss_mask": 0.341226, "loss_rpn_bbox_fpn2": 0.063152, "loss_rpn_bbox_fpn3": 0.005835, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.026457, "loss_rpn_cls_fpn3": 0.003765, "loss_rpn_cls_fpn4": 0.000246, "loss_rpn_cls_fpn5": 0.000002, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390652}
json_stats: {"accuracy_cls": 0.871094, "eta": "9:23:37", "iter": 3420, "loss": 0.964493, "loss_bbox": 0.213686, "loss_cls": 0.277135, "loss_mask": 0.337193, "loss_rpn_bbox_fpn2": 0.085726, "loss_rpn_bbox_fpn3": 0.008958, "loss_rpn_bbox_fpn4": 0.000457, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.030334, "loss_rpn_cls_fpn3": 0.011715, "loss_rpn_cls_fpn4": 0.001760, "loss_rpn_cls_fpn5": 0.000030, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390594}
json_stats: {"accuracy_cls": 0.870605, "eta": "9:23:31", "iter": 3440, "loss": 0.949738, "loss_bbox": 0.192548, "loss_cls": 0.265667, "loss_mask": 0.334574, "loss_rpn_bbox_fpn2": 0.073815, "loss_rpn_bbox_fpn3": 0.006544, "loss_rpn_bbox_fpn4": 0.000100, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034432, "loss_rpn_cls_fpn3": 0.003714, "loss_rpn_cls_fpn4": 0.000470, "loss_rpn_cls_fpn5": 0.000028, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390618}
json_stats: {"accuracy_cls": 0.877930, "eta": "9:23:27", "iter": 3460, "loss": 0.919355, "loss_bbox": 0.180596, "loss_cls": 0.251554, "loss_mask": 0.315393, "loss_rpn_bbox_fpn2": 0.101948, "loss_rpn_bbox_fpn3": 0.007394, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028785, "loss_rpn_cls_fpn3": 0.003850, "loss_rpn_cls_fpn4": 0.000123, "loss_rpn_cls_fpn5": 0.000017, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390652}
json_stats: {"accuracy_cls": 0.873047, "eta": "9:23:23", "iter": 3480, "loss": 1.023128, "loss_bbox": 0.197750, "loss_cls": 0.278822, "loss_mask": 0.344619, "loss_rpn_bbox_fpn2": 0.071050, "loss_rpn_bbox_fpn3": 0.012269, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.054019, "loss_rpn_cls_fpn3": 0.007185, "loss_rpn_cls_fpn4": 0.000635, "loss_rpn_cls_fpn5": 0.000017, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390703}
json_stats: {"accuracy_cls": 0.864258, "eta": "9:23:19", "iter": 3500, "loss": 1.002307, "loss_bbox": 0.203415, "loss_cls": 0.301874, "loss_mask": 0.328506, "loss_rpn_bbox_fpn2": 0.100969, "loss_rpn_bbox_fpn3": 0.014278, "loss_rpn_bbox_fpn4": 0.000773, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038202, "loss_rpn_cls_fpn3": 0.007885, "loss_rpn_cls_fpn4": 0.000534, "loss_rpn_cls_fpn5": 0.000012, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390744}
json_stats: {"accuracy_cls": 0.864258, "eta": "9:23:14", "iter": 3520, "loss": 1.022871, "loss_bbox": 0.211992, "loss_cls": 0.280022, "loss_mask": 0.331956, "loss_rpn_bbox_fpn2": 0.090963, "loss_rpn_bbox_fpn3": 0.005199, "loss_rpn_bbox_fpn4": 0.001905, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.057405, "loss_rpn_cls_fpn3": 0.005605, "loss_rpn_cls_fpn4": 0.002700, "loss_rpn_cls_fpn5": 0.000012, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390779}
json_stats: {"accuracy_cls": 0.898438, "eta": "9:23:03", "iter": 3540, "loss": 0.857771, "loss_bbox": 0.159858, "loss_cls": 0.217712, "loss_mask": 0.347091, "loss_rpn_bbox_fpn2": 0.053285, "loss_rpn_bbox_fpn3": 0.003595, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.027305, "loss_rpn_cls_fpn3": 0.005304, "loss_rpn_cls_fpn4": 0.000099, "loss_rpn_cls_fpn5": 0.000013, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390740}
json_stats: {"accuracy_cls": 0.875977, "eta": "9:23:03", "iter": 3560, "loss": 0.958353, "loss_bbox": 0.195029, "loss_cls": 0.280141, "loss_mask": 0.303556, "loss_rpn_bbox_fpn2": 0.086712, "loss_rpn_bbox_fpn3": 0.011035, "loss_rpn_bbox_fpn4": 0.000420, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.043424, "loss_rpn_cls_fpn3": 0.012085, "loss_rpn_cls_fpn4": 0.000909, "loss_rpn_cls_fpn5": 0.000012, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390832}
json_stats: {"accuracy_cls": 0.899414, "eta": "9:23:08", "iter": 3580, "loss": 0.825698, "loss_bbox": 0.176792, "loss_cls": 0.235728, "loss_mask": 0.311151, "loss_rpn_bbox_fpn2": 0.080250, "loss_rpn_bbox_fpn3": 0.006210, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.026015, "loss_rpn_cls_fpn3": 0.003035, "loss_rpn_cls_fpn4": 0.000283, "loss_rpn_cls_fpn5": 0.000016, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390977}
json_stats: {"accuracy_cls": 0.871582, "eta": "9:22:52", "iter": 3600, "loss": 0.977680, "loss_bbox": 0.174143, "loss_cls": 0.272041, "loss_mask": 0.330669, "loss_rpn_bbox_fpn2": 0.084018, "loss_rpn_bbox_fpn3": 0.009083, "loss_rpn_bbox_fpn4": 0.000070, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.052037, "loss_rpn_cls_fpn3": 0.006066, "loss_rpn_cls_fpn4": 0.000590, "loss_rpn_cls_fpn5": 0.000019, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390890}
json_stats: {"accuracy_cls": 0.888184, "eta": "9:22:40", "iter": 3620, "loss": 0.868966, "loss_bbox": 0.168375, "loss_cls": 0.229317, "loss_mask": 0.334999, "loss_rpn_bbox_fpn2": 0.066263, "loss_rpn_bbox_fpn3": 0.004084, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.037282, "loss_rpn_cls_fpn3": 0.004936, "loss_rpn_cls_fpn4": 0.000127, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390838}
json_stats: {"accuracy_cls": 0.891348, "eta": "9:22:35", "iter": 3640, "loss": 0.858401, "loss_bbox": 0.167667, "loss_cls": 0.227710, "loss_mask": 0.325190, "loss_rpn_bbox_fpn2": 0.086821, "loss_rpn_bbox_fpn3": 0.003161, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.025914, "loss_rpn_cls_fpn3": 0.003010, "loss_rpn_cls_fpn4": 0.000080, "loss_rpn_cls_fpn5": 0.000002, "lr": 0.003000, "mb_qsize": 64, "mem": 5999, "time": 0.390864}
json_stats: {"accuracy_cls": 0.882812, "eta": "9:22:40", "iter": 3660, "loss": 0.891433, "loss_bbox": 0.186024, "loss_cls": 0.265795, "loss_mask": 0.317316, "loss_rpn_bbox_fpn2": 0.073242, "loss_rpn_bbox_fpn3": 0.010155, "loss_rpn_bbox_fpn4": 0.000311, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.035606, "loss_rpn_cls_fpn3": 0.006910, "loss_rpn_cls_fpn4": 0.000147, "loss_rpn_cls_fpn5": 0.000078, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.391023}
json_stats: {"accuracy_cls": 0.869141, "eta": "9:22:26", "iter": 3680, "loss": 1.006661, "loss_bbox": 0.201662, "loss_cls": 0.277895, "loss_mask": 0.341084, "loss_rpn_bbox_fpn2": 0.076346, "loss_rpn_bbox_fpn3": 0.011930, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.052559, "loss_rpn_cls_fpn3": 0.005607, "loss_rpn_cls_fpn4": 0.000587, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390948}
json_stats: {"accuracy_cls": 0.896730, "eta": "9:22:12", "iter": 3700, "loss": 0.953345, "loss_bbox": 0.180145, "loss_cls": 0.246681, "loss_mask": 0.335355, "loss_rpn_bbox_fpn2": 0.092748, "loss_rpn_bbox_fpn3": 0.007845, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.035983, "loss_rpn_cls_fpn3": 0.003998, "loss_rpn_cls_fpn4": 0.000247, "loss_rpn_cls_fpn5": 0.000057, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390873}
json_stats: {"accuracy_cls": 0.877930, "eta": "9:22:03", "iter": 3720, "loss": 0.993505, "loss_bbox": 0.197786, "loss_cls": 0.258642, "loss_mask": 0.317632, "loss_rpn_bbox_fpn2": 0.103183, "loss_rpn_bbox_fpn3": 0.009918, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044674, "loss_rpn_cls_fpn3": 0.004791, "loss_rpn_cls_fpn4": 0.000605, "loss_rpn_cls_fpn5": 0.000006, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390862}
json_stats: {"accuracy_cls": 0.893555, "eta": "9:21:53", "iter": 3740, "loss": 0.902511, "loss_bbox": 0.189493, "loss_cls": 0.241408, "loss_mask": 0.346747, "loss_rpn_bbox_fpn2": 0.095758, "loss_rpn_bbox_fpn3": 0.001496, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044506, "loss_rpn_cls_fpn3": 0.001295, "loss_rpn_cls_fpn4": 0.000057, "loss_rpn_cls_fpn5": 0.000024, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390839}
json_stats: {"accuracy_cls": 0.875977, "eta": "9:21:50", "iter": 3760, "loss": 0.933090, "loss_bbox": 0.173538, "loss_cls": 0.276551, "loss_mask": 0.321616, "loss_rpn_bbox_fpn2": 0.079331, "loss_rpn_bbox_fpn3": 0.009983, "loss_rpn_bbox_fpn4": 0.000771, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039817, "loss_rpn_cls_fpn3": 0.006468, "loss_rpn_cls_fpn4": 0.000909, "loss_rpn_cls_fpn5": 0.000022, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390889}
json_stats: {"accuracy_cls": 0.887695, "eta": "9:21:37", "iter": 3780, "loss": 0.899709, "loss_bbox": 0.180633, "loss_cls": 0.248603, "loss_mask": 0.332874, "loss_rpn_bbox_fpn2": 0.084628, "loss_rpn_bbox_fpn3": 0.005173, "loss_rpn_bbox_fpn4": 0.000331, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.024294, "loss_rpn_cls_fpn3": 0.005716, "loss_rpn_cls_fpn4": 0.000224, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390828}
json_stats: {"accuracy_cls": 0.896973, "eta": "9:21:22", "iter": 3800, "loss": 0.888333, "loss_bbox": 0.161926, "loss_cls": 0.218221, "loss_mask": 0.336281, "loss_rpn_bbox_fpn2": 0.091447, "loss_rpn_bbox_fpn3": 0.003199, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.040880, "loss_rpn_cls_fpn3": 0.001368, "loss_rpn_cls_fpn4": 0.000105, "loss_rpn_cls_fpn5": 0.000013, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390752}
json_stats: {"accuracy_cls": 0.887207, "eta": "9:21:10", "iter": 3820, "loss": 0.925583, "loss_bbox": 0.173957, "loss_cls": 0.229822, "loss_mask": 0.342215, "loss_rpn_bbox_fpn2": 0.080241, "loss_rpn_bbox_fpn3": 0.003772, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.045442, "loss_rpn_cls_fpn3": 0.002604, "loss_rpn_cls_fpn4": 0.000093, "loss_rpn_cls_fpn5": 0.000015, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390695}
json_stats: {"accuracy_cls": 0.887292, "eta": "9:21:02", "iter": 3840, "loss": 0.981519, "loss_bbox": 0.191855, "loss_cls": 0.253459, "loss_mask": 0.330144, "loss_rpn_bbox_fpn2": 0.093008, "loss_rpn_bbox_fpn3": 0.008292, "loss_rpn_bbox_fpn4": 0.000101, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038048, "loss_rpn_cls_fpn3": 0.003984, "loss_rpn_cls_fpn4": 0.000400, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390692}
json_stats: {"accuracy_cls": 0.883867, "eta": "9:20:57", "iter": 3860, "loss": 0.933580, "loss_bbox": 0.181701, "loss_cls": 0.255299, "loss_mask": 0.325564, "loss_rpn_bbox_fpn2": 0.079313, "loss_rpn_bbox_fpn3": 0.006656, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.029954, "loss_rpn_cls_fpn3": 0.004548, "loss_rpn_cls_fpn4": 0.000127, "loss_rpn_cls_fpn5": 0.000014, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390733}
json_stats: {"accuracy_cls": 0.893555, "eta": "9:20:55", "iter": 3880, "loss": 0.919483, "loss_bbox": 0.167818, "loss_cls": 0.246143, "loss_mask": 0.335649, "loss_rpn_bbox_fpn2": 0.087383, "loss_rpn_bbox_fpn3": 0.001265, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.042296, "loss_rpn_cls_fpn3": 0.002398, "loss_rpn_cls_fpn4": 0.000031, "loss_rpn_cls_fpn5": 0.000048, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390796}
json_stats: {"accuracy_cls": 0.875977, "eta": "9:20:42", "iter": 3900, "loss": 0.964331, "loss_bbox": 0.205680, "loss_cls": 0.249839, "loss_mask": 0.333236, "loss_rpn_bbox_fpn2": 0.074299, "loss_rpn_bbox_fpn3": 0.010053, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032477, "loss_rpn_cls_fpn3": 0.007895, "loss_rpn_cls_fpn4": 0.000465, "loss_rpn_cls_fpn5": 0.000017, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390743}
json_stats: {"accuracy_cls": 0.886719, "eta": "9:20:27", "iter": 3920, "loss": 0.886638, "loss_bbox": 0.183970, "loss_cls": 0.236272, "loss_mask": 0.326496, "loss_rpn_bbox_fpn2": 0.068846, "loss_rpn_bbox_fpn3": 0.005795, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.021570, "loss_rpn_cls_fpn3": 0.002466, "loss_rpn_cls_fpn4": 0.000193, "loss_rpn_cls_fpn5": 0.000009, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390656}
json_stats: {"accuracy_cls": 0.881348, "eta": "9:20:22", "iter": 3940, "loss": 0.907855, "loss_bbox": 0.185999, "loss_cls": 0.254033, "loss_mask": 0.335654, "loss_rpn_bbox_fpn2": 0.100007, "loss_rpn_bbox_fpn3": 0.008499, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039942, "loss_rpn_cls_fpn3": 0.003640, "loss_rpn_cls_fpn4": 0.000150, "loss_rpn_cls_fpn5": 0.000012, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390688}
json_stats: {"accuracy_cls": 0.890625, "eta": "9:20:13", "iter": 3960, "loss": 0.871462, "loss_bbox": 0.166297, "loss_cls": 0.236255, "loss_mask": 0.334040, "loss_rpn_bbox_fpn2": 0.086744, "loss_rpn_bbox_fpn3": 0.008100, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.031700, "loss_rpn_cls_fpn3": 0.001808, "loss_rpn_cls_fpn4": 0.000121, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6002, "time": 0.390674}
json_stats: {"accuracy_cls": 0.873535, "eta": "9:20:04", "iter": 3980, "loss": 0.941202, "loss_bbox": 0.182937, "loss_cls": 0.287734, "loss_mask": 0.354801, "loss_rpn_bbox_fpn2": 0.065313, "loss_rpn_bbox_fpn3": 0.003711, "loss_rpn_bbox_fpn4": 0.000189, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034027, "loss_rpn_cls_fpn3": 0.006563, "loss_rpn_cls_fpn4": 0.000176, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390655}
json_stats: {"accuracy_cls": 0.885254, "eta": "9:20:04", "iter": 4000, "loss": 0.935055, "loss_bbox": 0.188084, "loss_cls": 0.257404, "loss_mask": 0.330684, "loss_rpn_bbox_fpn2": 0.089453, "loss_rpn_bbox_fpn3": 0.006734, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039405, "loss_rpn_cls_fpn3": 0.002759, "loss_rpn_cls_fpn4": 0.000294, "loss_rpn_cls_fpn5": 0.000002, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390750}
json_stats: {"accuracy_cls": 0.873047, "eta": "9:19:54", "iter": 4020, "loss": 0.951736, "loss_bbox": 0.176684, "loss_cls": 0.283738, "loss_mask": 0.332798, "loss_rpn_bbox_fpn2": 0.109766, "loss_rpn_bbox_fpn3": 0.011197, "loss_rpn_bbox_fpn4": 0.000329, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.029032, "loss_rpn_cls_fpn3": 0.006858, "loss_rpn_cls_fpn4": 0.000658, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390729}
json_stats: {"accuracy_cls": 0.878906, "eta": "9:19:51", "iter": 4040, "loss": 0.985356, "loss_bbox": 0.198187, "loss_cls": 0.253117, "loss_mask": 0.331693, "loss_rpn_bbox_fpn2": 0.101259, "loss_rpn_bbox_fpn3": 0.011164, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038248, "loss_rpn_cls_fpn3": 0.004364, "loss_rpn_cls_fpn4": 0.000550, "loss_rpn_cls_fpn5": 0.000002, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390778}
json_stats: {"accuracy_cls": 0.887207, "eta": "9:19:35", "iter": 4060, "loss": 0.870665, "loss_bbox": 0.184887, "loss_cls": 0.232388, "loss_mask": 0.338062, "loss_rpn_bbox_fpn2": 0.072143, "loss_rpn_bbox_fpn3": 0.009037, "loss_rpn_bbox_fpn4": 0.000940, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034123, "loss_rpn_cls_fpn3": 0.004627, "loss_rpn_cls_fpn4": 0.000175, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390685}
json_stats: {"accuracy_cls": 0.868652, "eta": "9:19:29", "iter": 4080, "loss": 0.954773, "loss_bbox": 0.183277, "loss_cls": 0.256175, "loss_mask": 0.333637, "loss_rpn_bbox_fpn2": 0.089067, "loss_rpn_bbox_fpn3": 0.008234, "loss_rpn_bbox_fpn4": 0.000329, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.029777, "loss_rpn_cls_fpn3": 0.003546, "loss_rpn_cls_fpn4": 0.000202, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390711}
json_stats: {"accuracy_cls": 0.888672, "eta": "9:19:24", "iter": 4100, "loss": 0.894605, "loss_bbox": 0.172500, "loss_cls": 0.240134, "loss_mask": 0.322349, "loss_rpn_bbox_fpn2": 0.085922, "loss_rpn_bbox_fpn3": 0.008860, "loss_rpn_bbox_fpn4": 0.000280, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039517, "loss_rpn_cls_fpn3": 0.006976, "loss_rpn_cls_fpn4": 0.000406, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390744}
json_stats: {"accuracy_cls": 0.868652, "eta": "9:19:20", "iter": 4120, "loss": 1.045816, "loss_bbox": 0.200738, "loss_cls": 0.282956, "loss_mask": 0.329273, "loss_rpn_bbox_fpn2": 0.116476, "loss_rpn_bbox_fpn3": 0.007390, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.061133, "loss_rpn_cls_fpn3": 0.005282, "loss_rpn_cls_fpn4": 0.000183, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390781}
json_stats: {"accuracy_cls": 0.889160, "eta": "9:19:15", "iter": 4140, "loss": 0.920610, "loss_bbox": 0.167587, "loss_cls": 0.245833, "loss_mask": 0.339181, "loss_rpn_bbox_fpn2": 0.102471, "loss_rpn_bbox_fpn3": 0.005725, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039467, "loss_rpn_cls_fpn3": 0.002682, "loss_rpn_cls_fpn4": 0.000141, "loss_rpn_cls_fpn5": 0.000013, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390816}
json_stats: {"accuracy_cls": 0.886719, "eta": "9:19:02", "iter": 4160, "loss": 0.885680, "loss_bbox": 0.156983, "loss_cls": 0.238581, "loss_mask": 0.347033, "loss_rpn_bbox_fpn2": 0.101562, "loss_rpn_bbox_fpn3": 0.003075, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.041309, "loss_rpn_cls_fpn3": 0.002141, "loss_rpn_cls_fpn4": 0.000048, "loss_rpn_cls_fpn5": 0.000009, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390755}
json_stats: {"accuracy_cls": 0.879883, "eta": "9:18:56", "iter": 4180, "loss": 0.965640, "loss_bbox": 0.180216, "loss_cls": 0.267907, "loss_mask": 0.316624, "loss_rpn_bbox_fpn2": 0.084211, "loss_rpn_bbox_fpn3": 0.012521, "loss_rpn_bbox_fpn4": 0.002746, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038796, "loss_rpn_cls_fpn3": 0.007063, "loss_rpn_cls_fpn4": 0.001105, "loss_rpn_cls_fpn5": 0.000011, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390777}
json_stats: {"accuracy_cls": 0.872156, "eta": "9:18:51", "iter": 4200, "loss": 0.918595, "loss_bbox": 0.187643, "loss_cls": 0.274889, "loss_mask": 0.324008, "loss_rpn_bbox_fpn2": 0.081501, "loss_rpn_bbox_fpn3": 0.007536, "loss_rpn_bbox_fpn4": 0.000077, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.040038, "loss_rpn_cls_fpn3": 0.004843, "loss_rpn_cls_fpn4": 0.000624, "loss_rpn_cls_fpn5": 0.000027, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390814}
json_stats: {"accuracy_cls": 0.875488, "eta": "9:18:44", "iter": 4220, "loss": 0.983569, "loss_bbox": 0.177493, "loss_cls": 0.265459, "loss_mask": 0.325662, "loss_rpn_bbox_fpn2": 0.085455, "loss_rpn_bbox_fpn3": 0.009798, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.054565, "loss_rpn_cls_fpn3": 0.006321, "loss_rpn_cls_fpn4": 0.000122, "loss_rpn_cls_fpn5": 0.000075, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390814}
json_stats: {"accuracy_cls": 0.864279, "eta": "9:18:42", "iter": 4240, "loss": 0.966683, "loss_bbox": 0.199643, "loss_cls": 0.280036, "loss_mask": 0.348251, "loss_rpn_bbox_fpn2": 0.089652, "loss_rpn_bbox_fpn3": 0.003585, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.031774, "loss_rpn_cls_fpn3": 0.004857, "loss_rpn_cls_fpn4": 0.000455, "loss_rpn_cls_fpn5": 0.000070, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390891}
json_stats: {"accuracy_cls": 0.887207, "eta": "9:18:37", "iter": 4260, "loss": 0.886711, "loss_bbox": 0.163948, "loss_cls": 0.248118, "loss_mask": 0.312784, "loss_rpn_bbox_fpn2": 0.066377, "loss_rpn_bbox_fpn3": 0.008116, "loss_rpn_bbox_fpn4": 0.000245, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.035292, "loss_rpn_cls_fpn3": 0.003243, "loss_rpn_cls_fpn4": 0.000366, "loss_rpn_cls_fpn5": 0.000013, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390917}
json_stats: {"accuracy_cls": 0.878774, "eta": "9:18:34", "iter": 4280, "loss": 0.921215, "loss_bbox": 0.194263, "loss_cls": 0.283957, "loss_mask": 0.315038, "loss_rpn_bbox_fpn2": 0.084868, "loss_rpn_bbox_fpn3": 0.008088, "loss_rpn_bbox_fpn4": 0.000175, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.041999, "loss_rpn_cls_fpn3": 0.012302, "loss_rpn_cls_fpn4": 0.000295, "loss_rpn_cls_fpn5": 0.000028, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390982}
json_stats: {"accuracy_cls": 0.880784, "eta": "9:18:32", "iter": 4300, "loss": 0.960045, "loss_bbox": 0.191734, "loss_cls": 0.270209, "loss_mask": 0.318926, "loss_rpn_bbox_fpn2": 0.098220, "loss_rpn_bbox_fpn3": 0.012407, "loss_rpn_bbox_fpn4": 0.000102, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.044375, "loss_rpn_cls_fpn3": 0.008396, "loss_rpn_cls_fpn4": 0.000188, "loss_rpn_cls_fpn5": 0.000010, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.391047}
json_stats: {"accuracy_cls": 0.900391, "eta": "9:18:21", "iter": 4320, "loss": 0.865700, "loss_bbox": 0.181939, "loss_cls": 0.230194, "loss_mask": 0.333205, "loss_rpn_bbox_fpn2": 0.071469, "loss_rpn_bbox_fpn3": 0.005687, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.024552, "loss_rpn_cls_fpn3": 0.005546, "loss_rpn_cls_fpn4": 0.000092, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.391006}
json_stats: {"accuracy_cls": 0.862305, "eta": "9:18:17", "iter": 4340, "loss": 0.963327, "loss_bbox": 0.181021, "loss_cls": 0.276101, "loss_mask": 0.313160, "loss_rpn_bbox_fpn2": 0.095992, "loss_rpn_bbox_fpn3": 0.009841, "loss_rpn_bbox_fpn4": 0.000362, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034059, "loss_rpn_cls_fpn3": 0.005255, "loss_rpn_cls_fpn4": 0.001032, "loss_rpn_cls_fpn5": 0.000047, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.391056}
json_stats: {"accuracy_cls": 0.883789, "eta": "9:18:05", "iter": 4360, "loss": 0.987286, "loss_bbox": 0.208966, "loss_cls": 0.254102, "loss_mask": 0.337662, "loss_rpn_bbox_fpn2": 0.101800, "loss_rpn_bbox_fpn3": 0.006031, "loss_rpn_bbox_fpn4": 0.000098, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.047893, "loss_rpn_cls_fpn3": 0.004995, "loss_rpn_cls_fpn4": 0.000737, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.391005}
json_stats: {"accuracy_cls": 0.886719, "eta": "9:17:51", "iter": 4380, "loss": 0.852878, "loss_bbox": 0.158076, "loss_cls": 0.228530, "loss_mask": 0.329498, "loss_rpn_bbox_fpn2": 0.059803, "loss_rpn_bbox_fpn3": 0.002402, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.033275, "loss_rpn_cls_fpn3": 0.001055, "loss_rpn_cls_fpn4": 0.000066, "loss_rpn_cls_fpn5": 0.000024, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390936}
json_stats: {"accuracy_cls": 0.897461, "eta": "9:17:46", "iter": 4400, "loss": 0.829462, "loss_bbox": 0.168099, "loss_cls": 0.224749, "loss_mask": 0.311973, "loss_rpn_bbox_fpn2": 0.074711, "loss_rpn_bbox_fpn3": 0.001111, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.023736, "loss_rpn_cls_fpn3": 0.001578, "loss_rpn_cls_fpn4": 0.000030, "loss_rpn_cls_fpn5": 0.000001, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390967}
json_stats: {"accuracy_cls": 0.877930, "eta": "9:17:40", "iter": 4420, "loss": 0.906605, "loss_bbox": 0.186354, "loss_cls": 0.252794, "loss_mask": 0.338740, "loss_rpn_bbox_fpn2": 0.072761, "loss_rpn_bbox_fpn3": 0.008592, "loss_rpn_bbox_fpn4": 0.000085, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032026, "loss_rpn_cls_fpn3": 0.004514, "loss_rpn_cls_fpn4": 0.001272, "loss_rpn_cls_fpn5": 0.000031, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.390984}
json_stats: {"accuracy_cls": 0.882812, "eta": "9:17:36", "iter": 4440, "loss": 0.913099, "loss_bbox": 0.174718, "loss_cls": 0.260086, "loss_mask": 0.331545, "loss_rpn_bbox_fpn2": 0.075916, "loss_rpn_bbox_fpn3": 0.007416, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038785, "loss_rpn_cls_fpn3": 0.004302, "loss_rpn_cls_fpn4": 0.000318, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.391030}
json_stats: {"accuracy_cls": 0.908691, "eta": "9:17:29", "iter": 4460, "loss": 0.801520, "loss_bbox": 0.152210, "loss_cls": 0.194374, "loss_mask": 0.326435, "loss_rpn_bbox_fpn2": 0.062020, "loss_rpn_bbox_fpn3": 0.001894, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032956, "loss_rpn_cls_fpn3": 0.002885, "loss_rpn_cls_fpn4": 0.000029, "loss_rpn_cls_fpn5": 0.000019, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.391035}
json_stats: {"accuracy_cls": 0.885742, "eta": "9:17:26", "iter": 4480, "loss": 0.884656, "loss_bbox": 0.184648, "loss_cls": 0.240014, "loss_mask": 0.319670, "loss_rpn_bbox_fpn2": 0.090407, "loss_rpn_bbox_fpn3": 0.009363, "loss_rpn_bbox_fpn4": 0.001139, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.027784, "loss_rpn_cls_fpn3": 0.004798, "loss_rpn_cls_fpn4": 0.000203, "loss_rpn_cls_fpn5": 0.000011, "lr": 0.003000, "mb_qsize": 64, "mem": 6003, "time": 0.391090}
json_stats: {"accuracy_cls": 0.906250, "eta": "9:17:15", "iter": 4500, "loss": 0.775458, "loss_bbox": 0.157337, "loss_cls": 0.192233, "loss_mask": 0.330044, "loss_rpn_bbox_fpn2": 0.061517, "loss_rpn_bbox_fpn3": 0.000886, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.019807, "loss_rpn_cls_fpn3": 0.000944, "loss_rpn_cls_fpn4": 0.000013, "loss_rpn_cls_fpn5": 0.000010, "lr": 0.003000, "mb_qsize": 64, "mem": 6004, "time": 0.391064}
json_stats: {"accuracy_cls": 0.882582, "eta": "9:17:09", "iter": 4520, "loss": 0.921521, "loss_bbox": 0.179339, "loss_cls": 0.245231, "loss_mask": 0.330243, "loss_rpn_bbox_fpn2": 0.091586, "loss_rpn_bbox_fpn3": 0.010197, "loss_rpn_bbox_fpn4": 0.001213, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034202, "loss_rpn_cls_fpn3": 0.005048, "loss_rpn_cls_fpn4": 0.000585, "loss_rpn_cls_fpn5": 0.000021, "lr": 0.003000, "mb_qsize": 64, "mem": 6004, "time": 0.391084}
json_stats: {"accuracy_cls": 0.882812, "eta": "9:17:02", "iter": 4540, "loss": 0.894551, "loss_bbox": 0.178569, "loss_cls": 0.252811, "loss_mask": 0.342989, "loss_rpn_bbox_fpn2": 0.095858, "loss_rpn_bbox_fpn3": 0.007341, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032642, "loss_rpn_cls_fpn3": 0.002560, "loss_rpn_cls_fpn4": 0.000156, "loss_rpn_cls_fpn5": 0.000000, "lr": 0.003000, "mb_qsize": 64, "mem": 6004, "time": 0.391088}
json_stats: {"accuracy_cls": 0.875977, "eta": "9:16:53", "iter": 4560, "loss": 0.924625, "loss_bbox": 0.175441, "loss_cls": 0.263459, "loss_mask": 0.308862, "loss_rpn_bbox_fpn2": 0.100058, "loss_rpn_bbox_fpn3": 0.009610, "loss_rpn_bbox_fpn4": 0.000699, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028365, "loss_rpn_cls_fpn3": 0.004665, "loss_rpn_cls_fpn4": 0.000971, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6004, "time": 0.391070}
json_stats: {"accuracy_cls": 0.877441, "eta": "9:16:44", "iter": 4580, "loss": 0.853812, "loss_bbox": 0.171873, "loss_cls": 0.252064, "loss_mask": 0.315095, "loss_rpn_bbox_fpn2": 0.069450, "loss_rpn_bbox_fpn3": 0.010842, "loss_rpn_bbox_fpn4": 0.000385, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.030120, "loss_rpn_cls_fpn3": 0.008292, "loss_rpn_cls_fpn4": 0.000775, "loss_rpn_cls_fpn5": 0.000010, "lr": 0.003000, "mb_qsize": 64, "mem": 6004, "time": 0.391062}
json_stats: {"accuracy_cls": 0.879395, "eta": "9:16:34", "iter": 4600, "loss": 0.883826, "loss_bbox": 0.171163, "loss_cls": 0.259743, "loss_mask": 0.323963, "loss_rpn_bbox_fpn2": 0.066270, "loss_rpn_bbox_fpn3": 0.006378, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038458, "loss_rpn_cls_fpn3": 0.004140, "loss_rpn_cls_fpn4": 0.000171, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6004, "time": 0.391042}
json_stats: {"accuracy_cls": 0.875000, "eta": "9:16:32", "iter": 4620, "loss": 0.847364, "loss_bbox": 0.172668, "loss_cls": 0.267908, "loss_mask": 0.318894, "loss_rpn_bbox_fpn2": 0.060215, "loss_rpn_bbox_fpn3": 0.011486, "loss_rpn_bbox_fpn4": 0.000304, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.021176, "loss_rpn_cls_fpn3": 0.007396, "loss_rpn_cls_fpn4": 0.000469, "loss_rpn_cls_fpn5": 0.000014, "lr": 0.003000, "mb_qsize": 64, "mem": 6004, "time": 0.391106}
json_stats: {"accuracy_cls": 0.893555, "eta": "9:16:23", "iter": 4640, "loss": 0.843956, "loss_bbox": 0.164932, "loss_cls": 0.227508, "loss_mask": 0.323525, "loss_rpn_bbox_fpn2": 0.084290, "loss_rpn_bbox_fpn3": 0.007505, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.035398, "loss_rpn_cls_fpn3": 0.004044, "loss_rpn_cls_fpn4": 0.000191, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6004, "time": 0.391095}
json_stats: {"accuracy_cls": 0.876465, "eta": "9:16:24", "iter": 4660, "loss": 0.959011, "loss_bbox": 0.175286, "loss_cls": 0.267994, "loss_mask": 0.308843, "loss_rpn_bbox_fpn2": 0.102730, "loss_rpn_bbox_fpn3": 0.004611, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.050788, "loss_rpn_cls_fpn3": 0.003696, "loss_rpn_cls_fpn4": 0.000083, "loss_rpn_cls_fpn5": 0.000008, "lr": 0.003000, "mb_qsize": 64, "mem": 6006, "time": 0.391196}
json_stats: {"accuracy_cls": 0.878418, "eta": "9:16:16", "iter": 4680, "loss": 0.895440, "loss_bbox": 0.183208, "loss_cls": 0.264475, "loss_mask": 0.320373, "loss_rpn_bbox_fpn2": 0.079995, "loss_rpn_bbox_fpn3": 0.005368, "loss_rpn_bbox_fpn4": 0.000086, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.026377, "loss_rpn_cls_fpn3": 0.002831, "loss_rpn_cls_fpn4": 0.000066, "loss_rpn_cls_fpn5": 0.000007, "lr": 0.003000, "mb_qsize": 64, "mem": 6006, "time": 0.391194}
json_stats: {"accuracy_cls": 0.893066, "eta": "9:16:08", "iter": 4700, "loss": 0.845763, "loss_bbox": 0.157678, "loss_cls": 0.229391, "loss_mask": 0.327605, "loss_rpn_bbox_fpn2": 0.074734, "loss_rpn_bbox_fpn3": 0.005286, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028488, "loss_rpn_cls_fpn3": 0.002306, "loss_rpn_cls_fpn4": 0.000237, "loss_rpn_cls_fpn5": 0.000020, "lr": 0.003000, "mb_qsize": 64, "mem": 6006, "time": 0.391194}
json_stats: {"accuracy_cls": 0.890625, "eta": "9:15:55", "iter": 4720, "loss": 0.923794, "loss_bbox": 0.164095, "loss_cls": 0.228594, "loss_mask": 0.335476, "loss_rpn_bbox_fpn2": 0.086743, "loss_rpn_bbox_fpn3": 0.003878, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.051078, "loss_rpn_cls_fpn3": 0.002354, "loss_rpn_cls_fpn4": 0.000338, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6006, "time": 0.391131}
json_stats: {"accuracy_cls": 0.892578, "eta": "9:15:48", "iter": 4740, "loss": 0.974102, "loss_bbox": 0.166578, "loss_cls": 0.236430, "loss_mask": 0.332524, "loss_rpn_bbox_fpn2": 0.112327, "loss_rpn_bbox_fpn3": 0.002690, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.046185, "loss_rpn_cls_fpn3": 0.002785, "loss_rpn_cls_fpn4": 0.000140, "loss_rpn_cls_fpn5": 0.000010, "lr": 0.003000, "mb_qsize": 64, "mem": 6006, "time": 0.391139}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:15:39", "iter": 4760, "loss": 0.886759, "loss_bbox": 0.176757, "loss_cls": 0.266133, "loss_mask": 0.341923, "loss_rpn_bbox_fpn2": 0.073566, "loss_rpn_bbox_fpn3": 0.006377, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.041891, "loss_rpn_cls_fpn3": 0.007437, "loss_rpn_cls_fpn4": 0.000242, "loss_rpn_cls_fpn5": 0.000001, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391129}
json_stats: {"accuracy_cls": 0.868164, "eta": "9:15:27", "iter": 4780, "loss": 1.017019, "loss_bbox": 0.189022, "loss_cls": 0.280578, "loss_mask": 0.336728, "loss_rpn_bbox_fpn2": 0.091668, "loss_rpn_bbox_fpn3": 0.011973, "loss_rpn_bbox_fpn4": 0.000367, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.050070, "loss_rpn_cls_fpn3": 0.005132, "loss_rpn_cls_fpn4": 0.000837, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391073}
json_stats: {"accuracy_cls": 0.884277, "eta": "9:15:14", "iter": 4800, "loss": 0.952647, "loss_bbox": 0.197063, "loss_cls": 0.243319, "loss_mask": 0.345976, "loss_rpn_bbox_fpn2": 0.071766, "loss_rpn_bbox_fpn3": 0.003614, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.039515, "loss_rpn_cls_fpn3": 0.003822, "loss_rpn_cls_fpn4": 0.000202, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391011}
json_stats: {"accuracy_cls": 0.873746, "eta": "9:15:11", "iter": 4820, "loss": 0.918010, "loss_bbox": 0.190338, "loss_cls": 0.285925, "loss_mask": 0.316281, "loss_rpn_bbox_fpn2": 0.064927, "loss_rpn_bbox_fpn3": 0.015511, "loss_rpn_bbox_fpn4": 0.000133, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.030446, "loss_rpn_cls_fpn3": 0.010171, "loss_rpn_cls_fpn4": 0.000475, "loss_rpn_cls_fpn5": 0.000032, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391076}
json_stats: {"accuracy_cls": 0.883301, "eta": "9:15:03", "iter": 4840, "loss": 0.788454, "loss_bbox": 0.143197, "loss_cls": 0.232147, "loss_mask": 0.324229, "loss_rpn_bbox_fpn2": 0.075954, "loss_rpn_bbox_fpn3": 0.004313, "loss_rpn_bbox_fpn4": 0.000661, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.017530, "loss_rpn_cls_fpn3": 0.003402, "loss_rpn_cls_fpn4": 0.000474, "loss_rpn_cls_fpn5": 0.000013, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391066}
json_stats: {"accuracy_cls": 0.867188, "eta": "9:15:05", "iter": 4860, "loss": 1.028493, "loss_bbox": 0.174539, "loss_cls": 0.298671, "loss_mask": 0.316606, "loss_rpn_bbox_fpn2": 0.085980, "loss_rpn_bbox_fpn3": 0.008402, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034220, "loss_rpn_cls_fpn3": 0.007904, "loss_rpn_cls_fpn4": 0.000171, "loss_rpn_cls_fpn5": 0.000002, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391185}
json_stats: {"accuracy_cls": 0.878906, "eta": "9:14:56", "iter": 4880, "loss": 0.970562, "loss_bbox": 0.186873, "loss_cls": 0.260122, "loss_mask": 0.325042, "loss_rpn_bbox_fpn2": 0.096908, "loss_rpn_bbox_fpn3": 0.009046, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.040812, "loss_rpn_cls_fpn3": 0.005677, "loss_rpn_cls_fpn4": 0.000186, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391174}
json_stats: {"accuracy_cls": 0.894531, "eta": "9:14:48", "iter": 4900, "loss": 0.859359, "loss_bbox": 0.179876, "loss_cls": 0.229535, "loss_mask": 0.329130, "loss_rpn_bbox_fpn2": 0.080313, "loss_rpn_bbox_fpn3": 0.007093, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028664, "loss_rpn_cls_fpn3": 0.002196, "loss_rpn_cls_fpn4": 0.000171, "loss_rpn_cls_fpn5": 0.000006, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391164}
json_stats: {"accuracy_cls": 0.892578, "eta": "9:14:38", "iter": 4920, "loss": 0.848549, "loss_bbox": 0.155541, "loss_cls": 0.217026, "loss_mask": 0.344687, "loss_rpn_bbox_fpn2": 0.082829, "loss_rpn_bbox_fpn3": 0.001489, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034421, "loss_rpn_cls_fpn3": 0.001264, "loss_rpn_cls_fpn4": 0.000051, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391142}
json_stats: {"accuracy_cls": 0.881105, "eta": "9:14:32", "iter": 4940, "loss": 0.963810, "loss_bbox": 0.183932, "loss_cls": 0.261323, "loss_mask": 0.327604, "loss_rpn_bbox_fpn2": 0.101898, "loss_rpn_bbox_fpn3": 0.005871, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.037731, "loss_rpn_cls_fpn3": 0.003274, "loss_rpn_cls_fpn4": 0.000386, "loss_rpn_cls_fpn5": 0.000002, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391164}
json_stats: {"accuracy_cls": 0.885254, "eta": "9:14:20", "iter": 4960, "loss": 0.849526, "loss_bbox": 0.170017, "loss_cls": 0.243157, "loss_mask": 0.335433, "loss_rpn_bbox_fpn2": 0.052697, "loss_rpn_bbox_fpn3": 0.010596, "loss_rpn_bbox_fpn4": 0.000104, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.024990, "loss_rpn_cls_fpn3": 0.005903, "loss_rpn_cls_fpn4": 0.000361, "loss_rpn_cls_fpn5": 0.000011, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391119}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:14:13", "iter": 4980, "loss": 0.906664, "loss_bbox": 0.169389, "loss_cls": 0.265426, "loss_mask": 0.321739, "loss_rpn_bbox_fpn2": 0.093011, "loss_rpn_bbox_fpn3": 0.005066, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.032028, "loss_rpn_cls_fpn3": 0.002697, "loss_rpn_cls_fpn4": 0.000149, "loss_rpn_cls_fpn5": 0.000029, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391120}
json_stats: {"accuracy_cls": 0.892990, "eta": "9:14:03", "iter": 5000, "loss": 0.858756, "loss_bbox": 0.159461, "loss_cls": 0.223854, "loss_mask": 0.327178, "loss_rpn_bbox_fpn2": 0.068030, "loss_rpn_bbox_fpn3": 0.003760, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.050815, "loss_rpn_cls_fpn3": 0.000595, "loss_rpn_cls_fpn4": 0.000034, "loss_rpn_cls_fpn5": 0.000006, "lr": 0.003000, "mb_qsize": 64, "mem": 6007, "time": 0.391096}
json_stats: {"accuracy_cls": 0.891763, "eta": "9:13:54", "iter": 5020, "loss": 0.912308, "loss_bbox": 0.172721, "loss_cls": 0.249160, "loss_mask": 0.330687, "loss_rpn_bbox_fpn2": 0.065847, "loss_rpn_bbox_fpn3": 0.008362, "loss_rpn_bbox_fpn4": 0.000390, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028148, "loss_rpn_cls_fpn3": 0.005084, "loss_rpn_cls_fpn4": 0.000366, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391085}
json_stats: {"accuracy_cls": 0.886719, "eta": "9:13:46", "iter": 5040, "loss": 0.925899, "loss_bbox": 0.191782, "loss_cls": 0.253151, "loss_mask": 0.343525, "loss_rpn_bbox_fpn2": 0.092663, "loss_rpn_bbox_fpn3": 0.003945, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.047075, "loss_rpn_cls_fpn3": 0.001620, "loss_rpn_cls_fpn4": 0.000098, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391084}
json_stats: {"accuracy_cls": 0.888672, "eta": "9:13:36", "iter": 5060, "loss": 0.815419, "loss_bbox": 0.148064, "loss_cls": 0.240908, "loss_mask": 0.322445, "loss_rpn_bbox_fpn2": 0.062082, "loss_rpn_bbox_fpn3": 0.002426, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.031312, "loss_rpn_cls_fpn3": 0.002742, "loss_rpn_cls_fpn4": 0.000080, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391054}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:13:32", "iter": 5080, "loss": 0.917278, "loss_bbox": 0.177656, "loss_cls": 0.254608, "loss_mask": 0.322173, "loss_rpn_bbox_fpn2": 0.064106, "loss_rpn_bbox_fpn3": 0.006191, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.035292, "loss_rpn_cls_fpn3": 0.003368, "loss_rpn_cls_fpn4": 0.000648, "loss_rpn_cls_fpn5": 0.000018, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391106}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:13:23", "iter": 5100, "loss": 0.853007, "loss_bbox": 0.184414, "loss_cls": 0.238957, "loss_mask": 0.333976, "loss_rpn_bbox_fpn2": 0.063495, "loss_rpn_bbox_fpn3": 0.006437, "loss_rpn_bbox_fpn4": 0.000675, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.025621, "loss_rpn_cls_fpn3": 0.003570, "loss_rpn_cls_fpn4": 0.000359, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391093}
json_stats: {"accuracy_cls": 0.878906, "eta": "9:13:18", "iter": 5120, "loss": 0.881382, "loss_bbox": 0.179385, "loss_cls": 0.265558, "loss_mask": 0.336366, "loss_rpn_bbox_fpn2": 0.070545, "loss_rpn_bbox_fpn3": 0.009508, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.037280, "loss_rpn_cls_fpn3": 0.005633, "loss_rpn_cls_fpn4": 0.000256, "loss_rpn_cls_fpn5": 0.000008, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391124}
json_stats: {"accuracy_cls": 0.878615, "eta": "9:13:10", "iter": 5140, "loss": 0.912417, "loss_bbox": 0.168950, "loss_cls": 0.272186, "loss_mask": 0.330293, "loss_rpn_bbox_fpn2": 0.073793, "loss_rpn_bbox_fpn3": 0.002492, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028212, "loss_rpn_cls_fpn3": 0.002295, "loss_rpn_cls_fpn4": 0.000033, "loss_rpn_cls_fpn5": 0.000019, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391117}
json_stats: {"accuracy_cls": 0.892090, "eta": "9:12:57", "iter": 5160, "loss": 0.863174, "loss_bbox": 0.160086, "loss_cls": 0.221210, "loss_mask": 0.334850, "loss_rpn_bbox_fpn2": 0.066152, "loss_rpn_bbox_fpn3": 0.003344, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.026938, "loss_rpn_cls_fpn3": 0.002421, "loss_rpn_cls_fpn4": 0.000175, "loss_rpn_cls_fpn5": 0.000008, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391064}
json_stats: {"accuracy_cls": 0.891113, "eta": "9:12:49", "iter": 5180, "loss": 0.855282, "loss_bbox": 0.172983, "loss_cls": 0.241872, "loss_mask": 0.306635, "loss_rpn_bbox_fpn2": 0.074530, "loss_rpn_bbox_fpn3": 0.009243, "loss_rpn_bbox_fpn4": 0.000945, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.037404, "loss_rpn_cls_fpn3": 0.002505, "loss_rpn_cls_fpn4": 0.000363, "loss_rpn_cls_fpn5": 0.000018, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391052}
json_stats: {"accuracy_cls": 0.911133, "eta": "9:12:37", "iter": 5200, "loss": 0.866621, "loss_bbox": 0.153917, "loss_cls": 0.199961, "loss_mask": 0.313878, "loss_rpn_bbox_fpn2": 0.070612, "loss_rpn_bbox_fpn3": 0.004474, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.045011, "loss_rpn_cls_fpn3": 0.002888, "loss_rpn_cls_fpn4": 0.000312, "loss_rpn_cls_fpn5": 0.000014, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391009}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:12:32", "iter": 5220, "loss": 0.928936, "loss_bbox": 0.168793, "loss_cls": 0.253429, "loss_mask": 0.303742, "loss_rpn_bbox_fpn2": 0.092874, "loss_rpn_bbox_fpn3": 0.009720, "loss_rpn_bbox_fpn4": 0.000150, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.038326, "loss_rpn_cls_fpn3": 0.003704, "loss_rpn_cls_fpn4": 0.001728, "loss_rpn_cls_fpn5": 0.000031, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391036}
json_stats: {"accuracy_cls": 0.859248, "eta": "9:12:27", "iter": 5240, "loss": 1.015913, "loss_bbox": 0.190047, "loss_cls": 0.291716, "loss_mask": 0.338170, "loss_rpn_bbox_fpn2": 0.092183, "loss_rpn_bbox_fpn3": 0.013617, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.042555, "loss_rpn_cls_fpn3": 0.008839, "loss_rpn_cls_fpn4": 0.001160, "loss_rpn_cls_fpn5": 0.000019, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391074}
json_stats: {"accuracy_cls": 0.879395, "eta": "9:12:25", "iter": 5260, "loss": 0.865500, "loss_bbox": 0.176418, "loss_cls": 0.266085, "loss_mask": 0.318830, "loss_rpn_bbox_fpn2": 0.064043, "loss_rpn_bbox_fpn3": 0.009192, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028164, "loss_rpn_cls_fpn3": 0.006259, "loss_rpn_cls_fpn4": 0.000374, "loss_rpn_cls_fpn5": 0.000007, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391138}
json_stats: {"accuracy_cls": 0.895020, "eta": "9:12:20", "iter": 5280, "loss": 0.865557, "loss_bbox": 0.167114, "loss_cls": 0.229306, "loss_mask": 0.324315, "loss_rpn_bbox_fpn2": 0.090112, "loss_rpn_bbox_fpn3": 0.007888, "loss_rpn_bbox_fpn4": 0.000359, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028767, "loss_rpn_cls_fpn3": 0.001455, "loss_rpn_cls_fpn4": 0.000314, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391180}
json_stats: {"accuracy_cls": 0.893555, "eta": "9:12:12", "iter": 5300, "loss": 0.848729, "loss_bbox": 0.191192, "loss_cls": 0.239842, "loss_mask": 0.338544, "loss_rpn_bbox_fpn2": 0.064040, "loss_rpn_bbox_fpn3": 0.002773, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.020407, "loss_rpn_cls_fpn3": 0.002753, "loss_rpn_cls_fpn4": 0.000074, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391173}
json_stats: {"accuracy_cls": 0.886719, "eta": "9:12:03", "iter": 5320, "loss": 0.936279, "loss_bbox": 0.180025, "loss_cls": 0.251191, "loss_mask": 0.338799, "loss_rpn_bbox_fpn2": 0.110293, "loss_rpn_bbox_fpn3": 0.005677, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.033101, "loss_rpn_cls_fpn3": 0.005777, "loss_rpn_cls_fpn4": 0.000223, "loss_rpn_cls_fpn5": 0.000007, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391158}
json_stats: {"accuracy_cls": 0.899414, "eta": "9:11:58", "iter": 5340, "loss": 0.863853, "loss_bbox": 0.183555, "loss_cls": 0.234639, "loss_mask": 0.319771, "loss_rpn_bbox_fpn2": 0.060469, "loss_rpn_bbox_fpn3": 0.013759, "loss_rpn_bbox_fpn4": 0.001082, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028403, "loss_rpn_cls_fpn3": 0.011211, "loss_rpn_cls_fpn4": 0.000510, "loss_rpn_cls_fpn5": 0.000006, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391197}
json_stats: {"accuracy_cls": 0.881836, "eta": "9:11:54", "iter": 5360, "loss": 0.847342, "loss_bbox": 0.166807, "loss_cls": 0.239962, "loss_mask": 0.320544, "loss_rpn_bbox_fpn2": 0.067093, "loss_rpn_bbox_fpn3": 0.004181, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.028016, "loss_rpn_cls_fpn3": 0.003039, "loss_rpn_cls_fpn4": 0.000047, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391243}
json_stats: {"accuracy_cls": 0.901855, "eta": "9:11:41", "iter": 5380, "loss": 0.815400, "loss_bbox": 0.143995, "loss_cls": 0.204569, "loss_mask": 0.325191, "loss_rpn_bbox_fpn2": 0.071343, "loss_rpn_bbox_fpn3": 0.006035, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.016519, "loss_rpn_cls_fpn3": 0.002035, "loss_rpn_cls_fpn4": 0.000282, "loss_rpn_cls_fpn5": 0.000018, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391183}
json_stats: {"accuracy_cls": 0.898926, "eta": "9:11:34", "iter": 5400, "loss": 0.801489, "loss_bbox": 0.154659, "loss_cls": 0.231995, "loss_mask": 0.328278, "loss_rpn_bbox_fpn2": 0.055444, "loss_rpn_bbox_fpn3": 0.004039, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.024188, "loss_rpn_cls_fpn3": 0.001245, "loss_rpn_cls_fpn4": 0.000050, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391190}
json_stats: {"accuracy_cls": 0.895020, "eta": "9:11:34", "iter": 5420, "loss": 0.833108, "loss_bbox": 0.171882, "loss_cls": 0.235476, "loss_mask": 0.314605, "loss_rpn_bbox_fpn2": 0.045923, "loss_rpn_bbox_fpn3": 0.010951, "loss_rpn_bbox_fpn4": 0.001954, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.024496, "loss_rpn_cls_fpn3": 0.005089, "loss_rpn_cls_fpn4": 0.000706, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391276}
json_stats: {"accuracy_cls": 0.883970, "eta": "9:11:26", "iter": 5440, "loss": 0.843601, "loss_bbox": 0.153052, "loss_cls": 0.255054, "loss_mask": 0.331570, "loss_rpn_bbox_fpn2": 0.061331, "loss_rpn_bbox_fpn3": 0.004423, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.025840, "loss_rpn_cls_fpn3": 0.002576, "loss_rpn_cls_fpn4": 0.000077, "loss_rpn_cls_fpn5": 0.000002, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391280}
json_stats: {"accuracy_cls": 0.881348, "eta": "9:11:20", "iter": 5460, "loss": 0.869362, "loss_bbox": 0.171969, "loss_cls": 0.242576, "loss_mask": 0.334963, "loss_rpn_bbox_fpn2": 0.085391, "loss_rpn_bbox_fpn3": 0.004134, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.027598, "loss_rpn_cls_fpn3": 0.001866, "loss_rpn_cls_fpn4": 0.000054, "loss_rpn_cls_fpn5": 0.000001, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391302}
json_stats: {"accuracy_cls": 0.887695, "eta": "9:11:11", "iter": 5480, "loss": 0.870637, "loss_bbox": 0.161248, "loss_cls": 0.243763, "loss_mask": 0.326086, "loss_rpn_bbox_fpn2": 0.082860, "loss_rpn_bbox_fpn3": 0.003283, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.027966, "loss_rpn_cls_fpn3": 0.001113, "loss_rpn_cls_fpn4": 0.000057, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391289}
json_stats: {"accuracy_cls": 0.897949, "eta": "9:11:01", "iter": 5500, "loss": 0.856298, "loss_bbox": 0.181936, "loss_cls": 0.237339, "loss_mask": 0.324751, "loss_rpn_bbox_fpn2": 0.070764, "loss_rpn_bbox_fpn3": 0.007965, "loss_rpn_bbox_fpn4": 0.000115, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.033221, "loss_rpn_cls_fpn3": 0.003827, "loss_rpn_cls_fpn4": 0.000110, "loss_rpn_cls_fpn5": 0.000004, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391265}
json_stats: {"accuracy_cls": 0.891113, "eta": "9:10:51", "iter": 5520, "loss": 0.902062, "loss_bbox": 0.186415, "loss_cls": 0.232794, "loss_mask": 0.318901, "loss_rpn_bbox_fpn2": 0.107821, "loss_rpn_bbox_fpn3": 0.003902, "loss_rpn_bbox_fpn4": 0.000985, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.022260, "loss_rpn_cls_fpn3": 0.002784, "loss_rpn_cls_fpn4": 0.000304, "loss_rpn_cls_fpn5": 0.000013, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391232}
json_stats: {"accuracy_cls": 0.884277, "eta": "9:10:41", "iter": 5540, "loss": 0.875018, "loss_bbox": 0.163527, "loss_cls": 0.250493, "loss_mask": 0.334730, "loss_rpn_bbox_fpn2": 0.070356, "loss_rpn_bbox_fpn3": 0.007251, "loss_rpn_bbox_fpn4": 0.000194, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.031470, "loss_rpn_cls_fpn3": 0.004945, "loss_rpn_cls_fpn4": 0.000247, "loss_rpn_cls_fpn5": 0.000010, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391209}
json_stats: {"accuracy_cls": 0.881482, "eta": "9:10:36", "iter": 5560, "loss": 0.947586, "loss_bbox": 0.198506, "loss_cls": 0.244815, "loss_mask": 0.337401, "loss_rpn_bbox_fpn2": 0.088764, "loss_rpn_bbox_fpn3": 0.007610, "loss_rpn_bbox_fpn4": 0.000846, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.034959, "loss_rpn_cls_fpn3": 0.003338, "loss_rpn_cls_fpn4": 0.000266, "loss_rpn_cls_fpn5": 0.000002, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391247}
json_stats: {"accuracy_cls": 0.874512, "eta": "9:10:32", "iter": 5580, "loss": 0.892046, "loss_bbox": 0.182364, "loss_cls": 0.263239, "loss_mask": 0.316412, "loss_rpn_bbox_fpn2": 0.070325, "loss_rpn_bbox_fpn3": 0.007532, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.030168, "loss_rpn_cls_fpn3": 0.002987, "loss_rpn_cls_fpn4": 0.000278, "loss_rpn_cls_fpn5": 0.000003, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391285}
json_stats: {"accuracy_cls": 0.881348, "eta": "9:10:27", "iter": 5600, "loss": 0.847816, "loss_bbox": 0.170743, "loss_cls": 0.256373, "loss_mask": 0.307921, "loss_rpn_bbox_fpn2": 0.062903, "loss_rpn_bbox_fpn3": 0.009904, "loss_rpn_bbox_fpn4": 0.001159, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.022556, "loss_rpn_cls_fpn3": 0.004475, "loss_rpn_cls_fpn4": 0.000422, "loss_rpn_cls_fpn5": 0.000035, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391326}
json_stats: {"accuracy_cls": 0.886230, "eta": "9:10:17", "iter": 5620, "loss": 0.904733, "loss_bbox": 0.165217, "loss_cls": 0.238276, "loss_mask": 0.331967, "loss_rpn_bbox_fpn2": 0.077018, "loss_rpn_bbox_fpn3": 0.006335, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.035866, "loss_rpn_cls_fpn3": 0.004553, "loss_rpn_cls_fpn4": 0.000331, "loss_rpn_cls_fpn5": 0.000023, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391289}
json_stats: {"accuracy_cls": 0.895508, "eta": "9:10:05", "iter": 5640, "loss": 0.854700, "loss_bbox": 0.155961, "loss_cls": 0.233343, "loss_mask": 0.322004, "loss_rpn_bbox_fpn2": 0.062361, "loss_rpn_bbox_fpn3": 0.006377, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.030773, "loss_rpn_cls_fpn3": 0.002913, "loss_rpn_cls_fpn4": 0.000148, "loss_rpn_cls_fpn5": 0.000007, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391248}
json_stats: {"accuracy_cls": 0.883230, "eta": "9:10:04", "iter": 5660, "loss": 0.899456, "loss_bbox": 0.174982, "loss_cls": 0.258220, "loss_mask": 0.321384, "loss_rpn_bbox_fpn2": 0.068036, "loss_rpn_bbox_fpn3": 0.007006, "loss_rpn_bbox_fpn4": 0.000978, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.033274, "loss_rpn_cls_fpn3": 0.005031, "loss_rpn_cls_fpn4": 0.001045, "loss_rpn_cls_fpn5": 0.000005, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391321}
json_stats: {"accuracy_cls": 0.884277, "eta": "9:09:51", "iter": 5680, "loss": 0.894593, "loss_bbox": 0.174855, "loss_cls": 0.257807, "loss_mask": 0.331144, "loss_rpn_bbox_fpn2": 0.076800, "loss_rpn_bbox_fpn3": 0.003019, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.026383, "loss_rpn_cls_fpn3": 0.003392, "loss_rpn_cls_fpn4": 0.000108, "loss_rpn_cls_fpn5": 0.000011, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391271}
json_stats: {"accuracy_cls": 0.886719, "eta": "9:09:41", "iter": 5700, "loss": 0.884502, "loss_bbox": 0.148814, "loss_cls": 0.224501, "loss_mask": 0.321577, "loss_rpn_bbox_fpn2": 0.083232, "loss_rpn_bbox_fpn3": 0.004550, "loss_rpn_bbox_fpn4": 0.000000, "loss_rpn_bbox_fpn5": 0.000000, "loss_rpn_cls_fpn2": 0.031478, "loss_rpn_cls_fpn3": 0.002572, "loss_rpn_cls_fpn4": 0.000250, "loss_rpn_cls_fpn5": 0.000024, "lr": 0.003000, "mb_qsize": 64, "mem": 6008, "time": 0.391242}
