Found Detectron ops lib: /usr/local/lib/libcaffe2_detectron_ops_gpu.so
Found Detectron ops lib: /usr/local/lib/libcaffe2_detectron_ops_gpu.so
INFO train_net.py: 104: Called with args:
INFO train_net.py: 105: Namespace(cfg_file='configs/nuclei/rpn_R-50-FPN_1x-nuclei-2.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/tmp/detectron-rpn-r50-nuclei-2'], skip_test=False)
INFO train_net.py: 111: Training with config:
INFO train_net.py: 112: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'MLP_HEAD_DIM': 1024,
               'ROI_BOX_HEAD': '',
               'ROI_XFORM_METHOD': 'RoIPoolF',
               'ROI_XFORM_RESOLUTION': 14,
               'ROI_XFORM_SAMPLING_RATIO': 0},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': False,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 8,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 5,
         'RPN_MIN_LEVEL': 2,
         'ZERO_INIT_LATERAL': False},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet50_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': False,
           'KEYPOINTS_ON': False,
           'MASK_ON': False,
           'NUM_CLASSES': 2,
           'RPN_ONLY': True,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'GaussianFill',
           'DILATION': 2,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/tmp/detectron-rpn-r50-nuclei-2',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/swk/Documents/ML/Detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.003,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASET': '',
          'DATASETS': ('dsb_2018_train',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.3,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILE': '',
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 2000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALES': (800,),
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 64,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('dsb_2018_train',),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 12000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (800,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train_net.py: 205: Building model: generalized_rcnn
WARNING cnn.py:  40: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING memonger.py:  70: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py: 112: Memonger memory optimization took 0.015331029892 secs
INFO train_net.py: 253: Loading dataset: ('dsb_2018_train',)
loading annotations into memory...
Done (t=2.09s)
creating index...
index created!
INFO roidb.py:  49: Appending horizontally-flipped training examples...
INFO roidb.py:  51: Loaded dataset: dsb_2018_train
INFO roidb.py: 135: Filtered 0 roidb entries: 1072 -> 1072
INFO roidb.py:  67: Computing bounding-box regression targets...
INFO roidb.py:  69: done
INFO train_net.py: 257: 1072 roidb entries
INFO net.py:  57: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  86: fpn_inner_res5_2_sum_w not found
INFO net.py:  86: fpn_inner_res5_2_sum_b not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_b not found
INFO net.py:  86: fpn_res5_2_sum_w not found
INFO net.py:  86: fpn_res5_2_sum_b not found
INFO net.py:  86: fpn_res4_5_sum_w not found
INFO net.py:  86: fpn_res4_5_sum_b not found
INFO net.py:  86: fpn_res3_3_sum_w not found
INFO net.py:  86: fpn_res3_3_sum_b not found
INFO net.py:  86: fpn_res2_2_sum_w not found
INFO net.py:  86: fpn_res2_2_sum_b not found
INFO net.py:  86: conv_rpn_fpn2_w not found
INFO net.py:  86: conv_rpn_fpn2_b not found
INFO net.py:  86: rpn_cls_logits_fpn2_w not found
INFO net.py:  86: rpn_cls_logits_fpn2_b not found
INFO net.py:  86: rpn_bbox_pred_fpn2_w not found
INFO net.py:  86: rpn_bbox_pred_fpn2_b not found
INFO train_net.py: 241: Outputs saved to: /tmp/detectron-rpn-r50-nuclei-2/train/dsb_2018_train/generalized_rcnn
INFO loader.py: 227: Pre-filling mini-batch queue...
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [6/64]
INFO loader.py: 232:   [6/64]
INFO loader.py: 232:   [6/64]
INFO loader.py: 232:   [7/64]
INFO loader.py: 232:   [8/64]
INFO loader.py: 232:   [8/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [10/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [13/64]
INFO loader.py: 232:   [13/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [15/64]
INFO loader.py: 232:   [16/64]
INFO loader.py: 232:   [17/64]
INFO loader.py: 232:   [19/64]
INFO loader.py: 232:   [19/64]
INFO loader.py: 232:   [19/64]
INFO loader.py: 232:   [20/64]
INFO loader.py: 232:   [22/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [24/64]
INFO loader.py: 232:   [24/64]
INFO loader.py: 232:   [24/64]
INFO loader.py: 232:   [25/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [28/64]
INFO loader.py: 232:   [28/64]
INFO loader.py: 232:   [29/64]
INFO loader.py: 232:   [29/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [33/64]
INFO loader.py: 232:   [33/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [35/64]
INFO loader.py: 232:   [36/64]
INFO loader.py: 232:   [36/64]
INFO loader.py: 232:   [37/64]
INFO loader.py: 232:   [38/64]
INFO loader.py: 232:   [38/64]
INFO loader.py: 232:   [39/64]
INFO loader.py: 232:   [40/64]
INFO loader.py: 232:   [40/64]
INFO loader.py: 232:   [40/64]
INFO loader.py: 232:   [41/64]
INFO loader.py: 232:   [42/64]
INFO loader.py: 232:   [42/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [44/64]
INFO loader.py: 232:   [45/64]
INFO loader.py: 232:   [45/64]
INFO loader.py: 232:   [46/64]
INFO loader.py: 232:   [47/64]
INFO loader.py: 232:   [48/64]
INFO loader.py: 232:   [49/64]
INFO loader.py: 232:   [49/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [51/64]
INFO loader.py: 232:   [52/64]
INFO loader.py: 232:   [52/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [55/64]
INFO loader.py: 232:   [55/64]
INFO loader.py: 232:   [56/64]
INFO loader.py: 232:   [57/64]
INFO loader.py: 232:   [58/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [60/64]
INFO loader.py: 232:   [61/64]
INFO loader.py: 232:   [61/64]
INFO loader.py: 232:   [62/64]
INFO loader.py: 232:   [62/64]
INFO loader.py: 232:   [63/64]
INFO loader.py: 232:   [63/64]
INFO loader.py: 232:   [63/64]
INFO detector.py: 436: Changing learning rate 0.000000 -> 0.001000 at iter 0
INFO net.py: 210: Printing model: generalized_rcnn
INFO net.py: 240: data                        : (2, 3, 800, 800)     => conv1                       : (2, 64, 400, 400)    ------- (op: Conv)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => conv1                       : (2, 64, 400, 400)    ------- (op: AffineChannel)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => conv1                       : (2, 64, 400, 400)    ------- (op: Relu)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => pool1                       : (2, 64, 200, 200)    ------- (op: MaxPool)
INFO net.py: 240: pool1                       : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch2c             : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: pool1                       : (2, 64, 200, 200)    => res2_0_branch1              : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch1              : (2, 256, 200, 200)   => res2_0_branch1_bn           : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch1_bn           : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_1_branch2c             : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_2_branch2c             : (2, 256, 200, 200)   => res2_2_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2c_bn          : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: StopGradient)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2c             : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res3_0_branch1              : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch1              : (2, 512, 100, 100)   => res3_0_branch1_bn           : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_0_branch1_bn           : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2c             : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2c             : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2c             : (2, 512, 100, 100)   => res3_3_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2c_bn          : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch2c             : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res4_0_branch1              : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch1              : (2, 1024, 50, 50)    => res4_0_branch1_bn           : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch1_bn           : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_1_branch2c             : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_2_branch2c             : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_3_branch2c             : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_4_branch2c             : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_5_branch2c             : (2, 1024, 50, 50)    => res4_5_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch2c             : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res5_0_branch1              : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch1              : (2, 2048, 25, 25)    => res5_0_branch1_bn           : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch1_bn           : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_1_branch2c             : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_2_branch2c             : (2, 2048, 25, 25)    => res5_2_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_2_sum                  : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_2_sum                  : (2, 2048, 25, 25)    => fpn_inner_res5_2_sum        : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => fpn_inner_res4_5_sum_lateral: (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 25, 25)     => fpn_inner_res4_5_sum_topdown: (2, 256, 50, 50)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res4_5_sum_lateral: (2, 256, 50, 50)     => fpn_inner_res4_5_sum        : (2, 256, 50, 50)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res4_5_sum_topdown: (2, 256, 50, 50)     => fpn_inner_res4_5_sum        : (2, 256, 50, 50)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => fpn_inner_res3_3_sum_lateral: (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 50, 50)     => fpn_inner_res3_3_sum_topdown: (2, 256, 100, 100)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res3_3_sum_lateral: (2, 256, 100, 100)   => fpn_inner_res3_3_sum        : (2, 256, 100, 100)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res3_3_sum_topdown: (2, 256, 100, 100)   => fpn_inner_res3_3_sum        : (2, 256, 100, 100)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => fpn_inner_res2_2_sum_lateral: (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 100, 100)   => fpn_inner_res2_2_sum_topdown: (2, 256, 200, 200)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res2_2_sum_lateral: (2, 256, 200, 200)   => fpn_inner_res2_2_sum        : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res2_2_sum_topdown: (2, 256, 200, 200)   => fpn_inner_res2_2_sum        : (2, 256, 200, 200)   ------|
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 25, 25)     => fpn_res5_2_sum              : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 50, 50)     => fpn_res4_5_sum              : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 100, 100)   => fpn_res3_3_sum              : (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res2_2_sum        : (2, 256, 200, 200)   => fpn_res2_2_sum              : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 200, 200)   => conv_rpn_fpn2               : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => conv_rpn_fpn2               : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => rpn_cls_logits_fpn2         : (2, 3, 200, 200)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    ------- (op: Conv)
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 100, 100)   => conv_rpn_fpn3               : (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => conv_rpn_fpn3               : (2, 256, 100, 100)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => rpn_cls_logits_fpn3         : (2, 3, 100, 100)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    ------- (op: Conv)
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 50, 50)     => conv_rpn_fpn4               : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => conv_rpn_fpn4               : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => rpn_cls_logits_fpn4         : (2, 3, 50, 50)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      ------- (op: Conv)
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => conv_rpn_fpn5               : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => conv_rpn_fpn5               : (2, 256, 25, 25)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => rpn_cls_logits_fpn5         : (2, 3, 25, 25)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      ------- (op: Conv)
INFO net.py: 240: rpn_labels_int32_wide_fpn2  : (2, 3, 336, 336)     => rpn_labels_int32_fpn2       : (2, 3, 200, 200)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 200, 200)     => rpn_labels_int32_fpn2       : (2, 3, 200, 200)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn2  : (2, 12, 336, 336)    => rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 200, 200)     => loss_rpn_cls_fpn2           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn2       : (2, 3, 200, 200)     => loss_rpn_cls_fpn2           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn3  : (2, 3, 168, 168)     => rpn_labels_int32_fpn3       : (2, 3, 100, 100)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 100, 100)     => rpn_labels_int32_fpn3       : (2, 3, 100, 100)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn3  : (2, 12, 168, 168)    => rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 100, 100)     => loss_rpn_cls_fpn3           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn3       : (2, 3, 100, 100)     => loss_rpn_cls_fpn3           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn4  : (2, 3, 84, 84)       => rpn_labels_int32_fpn4       : (2, 3, 50, 50)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 50, 50)       => rpn_labels_int32_fpn4       : (2, 3, 50, 50)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn4  : (2, 12, 84, 84)      => rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 50, 50)       => loss_rpn_cls_fpn4           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn4       : (2, 3, 50, 50)       => loss_rpn_cls_fpn4           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn5  : (2, 3, 42, 42)       => rpn_labels_int32_fpn5       : (2, 3, 25, 25)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 25, 25)       => rpn_labels_int32_fpn5       : (2, 3, 25, 25)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn5  : (2, 12, 42, 42)      => rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 25, 25)       => loss_rpn_cls_fpn5           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn5       : (2, 3, 25, 25)       => loss_rpn_cls_fpn5           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 244: End of model: generalized_rcnn
json_stats: {"eta": "5 days, 11:40:46", "iter": 0, "loss": 0.721635, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007194, "loss_rpn_bbox_fpn4": 0.018388, "loss_rpn_bbox_fpn5": 0.011783, "loss_rpn_cls_fpn2": 0.480352, "loss_rpn_cls_fpn3": 0.122295, "loss_rpn_cls_fpn4": 0.056251, "loss_rpn_cls_fpn5": 0.025372, "lr": 0.001000, "mb_qsize": 64, "mem": 4212, "time": 5.267188}
json_stats: {"eta": "13:06:05", "iter": 20, "loss": 0.686193, "loss_rpn_bbox_fpn2": 0.003015, "loss_rpn_bbox_fpn3": 0.014102, "loss_rpn_bbox_fpn4": 0.047817, "loss_rpn_bbox_fpn5": 0.076252, "loss_rpn_cls_fpn2": 0.194842, "loss_rpn_cls_fpn3": 0.107241, "loss_rpn_cls_fpn4": 0.082979, "loss_rpn_cls_fpn5": 0.086344, "lr": 0.001080, "mb_qsize": 64, "mem": 5411, "time": 0.524180}
json_stats: {"eta": "7:07:54", "iter": 40, "loss": 0.274534, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007422, "loss_rpn_bbox_fpn4": 0.030912, "loss_rpn_bbox_fpn5": 0.049581, "loss_rpn_cls_fpn2": 0.011003, "loss_rpn_cls_fpn3": 0.045479, "loss_rpn_cls_fpn4": 0.057114, "loss_rpn_cls_fpn5": 0.049900, "lr": 0.001160, "mb_qsize": 64, "mem": 5419, "time": 0.285401}
json_stats: {"eta": "7:08:20", "iter": 60, "loss": 0.323773, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.009332, "loss_rpn_bbox_fpn4": 0.034508, "loss_rpn_bbox_fpn5": 0.101285, "loss_rpn_cls_fpn2": 0.001622, "loss_rpn_cls_fpn3": 0.040022, "loss_rpn_cls_fpn4": 0.038823, "loss_rpn_cls_fpn5": 0.053948, "lr": 0.001240, "mb_qsize": 64, "mem": 5426, "time": 0.285756}
json_stats: {"eta": "7:12:27", "iter": 80, "loss": 0.280920, "loss_rpn_bbox_fpn2": 0.000771, "loss_rpn_bbox_fpn3": 0.007042, "loss_rpn_bbox_fpn4": 0.018527, "loss_rpn_bbox_fpn5": 0.062760, "loss_rpn_cls_fpn2": 0.009017, "loss_rpn_cls_fpn3": 0.033994, "loss_rpn_cls_fpn4": 0.037228, "loss_rpn_cls_fpn5": 0.032480, "lr": 0.001320, "mb_qsize": 64, "mem": 5430, "time": 0.288560}
json_stats: {"eta": "7:10:25", "iter": 100, "loss": 0.257205, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006428, "loss_rpn_bbox_fpn4": 0.022569, "loss_rpn_bbox_fpn5": 0.059571, "loss_rpn_cls_fpn2": 0.003079, "loss_rpn_cls_fpn3": 0.028680, "loss_rpn_cls_fpn4": 0.035172, "loss_rpn_cls_fpn5": 0.024696, "lr": 0.001400, "mb_qsize": 64, "mem": 5432, "time": 0.287267}
json_stats: {"eta": "7:11:06", "iter": 120, "loss": 0.202474, "loss_rpn_bbox_fpn2": 0.001342, "loss_rpn_bbox_fpn3": 0.008897, "loss_rpn_bbox_fpn4": 0.019120, "loss_rpn_bbox_fpn5": 0.049265, "loss_rpn_cls_fpn2": 0.011874, "loss_rpn_cls_fpn3": 0.035557, "loss_rpn_cls_fpn4": 0.030202, "loss_rpn_cls_fpn5": 0.020942, "lr": 0.001480, "mb_qsize": 64, "mem": 5432, "time": 0.287793}
json_stats: {"eta": "7:07:34", "iter": 140, "loss": 0.235412, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.013292, "loss_rpn_bbox_fpn4": 0.023035, "loss_rpn_bbox_fpn5": 0.054077, "loss_rpn_cls_fpn2": 0.005966, "loss_rpn_cls_fpn3": 0.040326, "loss_rpn_cls_fpn4": 0.029727, "loss_rpn_cls_fpn5": 0.020223, "lr": 0.001560, "mb_qsize": 64, "mem": 5433, "time": 0.285498}
json_stats: {"eta": "7:09:03", "iter": 160, "loss": 0.207014, "loss_rpn_bbox_fpn2": 0.000402, "loss_rpn_bbox_fpn3": 0.011717, "loss_rpn_bbox_fpn4": 0.018647, "loss_rpn_bbox_fpn5": 0.056887, "loss_rpn_cls_fpn2": 0.008237, "loss_rpn_cls_fpn3": 0.031196, "loss_rpn_cls_fpn4": 0.029696, "loss_rpn_cls_fpn5": 0.020353, "lr": 0.001640, "mb_qsize": 64, "mem": 6474, "time": 0.286548}
json_stats: {"eta": "7:07:12", "iter": 180, "loss": 0.175490, "loss_rpn_bbox_fpn2": 0.000433, "loss_rpn_bbox_fpn3": 0.006079, "loss_rpn_bbox_fpn4": 0.013479, "loss_rpn_bbox_fpn5": 0.067684, "loss_rpn_cls_fpn2": 0.009158, "loss_rpn_cls_fpn3": 0.017841, "loss_rpn_cls_fpn4": 0.021838, "loss_rpn_cls_fpn5": 0.015514, "lr": 0.001720, "mb_qsize": 64, "mem": 6474, "time": 0.285379}
json_stats: {"eta": "7:05:07", "iter": 200, "loss": 0.192733, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007638, "loss_rpn_bbox_fpn4": 0.016668, "loss_rpn_bbox_fpn5": 0.033841, "loss_rpn_cls_fpn2": 0.002941, "loss_rpn_cls_fpn3": 0.026733, "loss_rpn_cls_fpn4": 0.026124, "loss_rpn_cls_fpn5": 0.015398, "lr": 0.001800, "mb_qsize": 64, "mem": 6474, "time": 0.284045}
json_stats: {"eta": "7:06:05", "iter": 220, "loss": 0.181286, "loss_rpn_bbox_fpn2": 0.000511, "loss_rpn_bbox_fpn3": 0.006041, "loss_rpn_bbox_fpn4": 0.012437, "loss_rpn_bbox_fpn5": 0.086864, "loss_rpn_cls_fpn2": 0.005861, "loss_rpn_cls_fpn3": 0.016761, "loss_rpn_cls_fpn4": 0.019203, "loss_rpn_cls_fpn5": 0.012564, "lr": 0.001880, "mb_qsize": 64, "mem": 6480, "time": 0.284759}
json_stats: {"eta": "7:07:36", "iter": 240, "loss": 0.151917, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006873, "loss_rpn_bbox_fpn4": 0.015542, "loss_rpn_bbox_fpn5": 0.037233, "loss_rpn_cls_fpn2": 0.007164, "loss_rpn_cls_fpn3": 0.013789, "loss_rpn_cls_fpn4": 0.015342, "loss_rpn_cls_fpn5": 0.016016, "lr": 0.001960, "mb_qsize": 64, "mem": 6480, "time": 0.285832}
json_stats: {"eta": "7:09:28", "iter": 260, "loss": 0.213630, "loss_rpn_bbox_fpn2": 0.001987, "loss_rpn_bbox_fpn3": 0.004722, "loss_rpn_bbox_fpn4": 0.021647, "loss_rpn_bbox_fpn5": 0.040671, "loss_rpn_cls_fpn2": 0.011313, "loss_rpn_cls_fpn3": 0.014037, "loss_rpn_cls_fpn4": 0.018137, "loss_rpn_cls_fpn5": 0.013510, "lr": 0.002040, "mb_qsize": 64, "mem": 6485, "time": 0.287149}
json_stats: {"eta": "7:11:07", "iter": 280, "loss": 0.164518, "loss_rpn_bbox_fpn2": 0.000545, "loss_rpn_bbox_fpn3": 0.013359, "loss_rpn_bbox_fpn4": 0.017657, "loss_rpn_bbox_fpn5": 0.034817, "loss_rpn_cls_fpn2": 0.003248, "loss_rpn_cls_fpn3": 0.018556, "loss_rpn_cls_fpn4": 0.016428, "loss_rpn_cls_fpn5": 0.010933, "lr": 0.002120, "mb_qsize": 64, "mem": 6485, "time": 0.288318}
json_stats: {"eta": "7:12:18", "iter": 300, "loss": 0.147152, "loss_rpn_bbox_fpn2": 0.001011, "loss_rpn_bbox_fpn3": 0.008108, "loss_rpn_bbox_fpn4": 0.015247, "loss_rpn_bbox_fpn5": 0.048893, "loss_rpn_cls_fpn2": 0.008224, "loss_rpn_cls_fpn3": 0.014737, "loss_rpn_cls_fpn4": 0.012050, "loss_rpn_cls_fpn5": 0.010698, "lr": 0.002200, "mb_qsize": 64, "mem": 6493, "time": 0.289166}
json_stats: {"eta": "7:12:05", "iter": 320, "loss": 0.164403, "loss_rpn_bbox_fpn2": 0.001377, "loss_rpn_bbox_fpn3": 0.007087, "loss_rpn_bbox_fpn4": 0.014153, "loss_rpn_bbox_fpn5": 0.051115, "loss_rpn_cls_fpn2": 0.005587, "loss_rpn_cls_fpn3": 0.017065, "loss_rpn_cls_fpn4": 0.019112, "loss_rpn_cls_fpn5": 0.013902, "lr": 0.002280, "mb_qsize": 64, "mem": 6494, "time": 0.289088}
json_stats: {"eta": "7:13:02", "iter": 340, "loss": 0.154113, "loss_rpn_bbox_fpn2": 0.001687, "loss_rpn_bbox_fpn3": 0.011909, "loss_rpn_bbox_fpn4": 0.019493, "loss_rpn_bbox_fpn5": 0.032414, "loss_rpn_cls_fpn2": 0.006979, "loss_rpn_cls_fpn3": 0.017621, "loss_rpn_cls_fpn4": 0.019842, "loss_rpn_cls_fpn5": 0.012094, "lr": 0.002360, "mb_qsize": 64, "mem": 6495, "time": 0.289790}
json_stats: {"eta": "7:15:27", "iter": 360, "loss": 0.143944, "loss_rpn_bbox_fpn2": 0.001444, "loss_rpn_bbox_fpn3": 0.009704, "loss_rpn_bbox_fpn4": 0.030759, "loss_rpn_bbox_fpn5": 0.038649, "loss_rpn_cls_fpn2": 0.005362, "loss_rpn_cls_fpn3": 0.018018, "loss_rpn_cls_fpn4": 0.022299, "loss_rpn_cls_fpn5": 0.010310, "lr": 0.002440, "mb_qsize": 63, "mem": 6496, "time": 0.291474}
json_stats: {"eta": "7:16:39", "iter": 380, "loss": 0.143606, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006393, "loss_rpn_bbox_fpn4": 0.020127, "loss_rpn_bbox_fpn5": 0.041117, "loss_rpn_cls_fpn2": 0.004538, "loss_rpn_cls_fpn3": 0.011475, "loss_rpn_cls_fpn4": 0.020379, "loss_rpn_cls_fpn5": 0.006705, "lr": 0.002520, "mb_qsize": 64, "mem": 6501, "time": 0.292342}
json_stats: {"eta": "7:16:47", "iter": 400, "loss": 0.178840, "loss_rpn_bbox_fpn2": 0.001204, "loss_rpn_bbox_fpn3": 0.011072, "loss_rpn_bbox_fpn4": 0.026243, "loss_rpn_bbox_fpn5": 0.044021, "loss_rpn_cls_fpn2": 0.004879, "loss_rpn_cls_fpn3": 0.014761, "loss_rpn_cls_fpn4": 0.016551, "loss_rpn_cls_fpn5": 0.008126, "lr": 0.002600, "mb_qsize": 64, "mem": 6505, "time": 0.292494}
json_stats: {"eta": "7:16:55", "iter": 420, "loss": 0.153279, "loss_rpn_bbox_fpn2": 0.001661, "loss_rpn_bbox_fpn3": 0.010772, "loss_rpn_bbox_fpn4": 0.032696, "loss_rpn_bbox_fpn5": 0.029970, "loss_rpn_cls_fpn2": 0.007660, "loss_rpn_cls_fpn3": 0.016918, "loss_rpn_cls_fpn4": 0.014343, "loss_rpn_cls_fpn5": 0.010084, "lr": 0.002680, "mb_qsize": 64, "mem": 6508, "time": 0.292652}
json_stats: {"eta": "7:17:27", "iter": 440, "loss": 0.168244, "loss_rpn_bbox_fpn2": 0.001859, "loss_rpn_bbox_fpn3": 0.007053, "loss_rpn_bbox_fpn4": 0.020821, "loss_rpn_bbox_fpn5": 0.043230, "loss_rpn_cls_fpn2": 0.007181, "loss_rpn_cls_fpn3": 0.020219, "loss_rpn_cls_fpn4": 0.014352, "loss_rpn_cls_fpn5": 0.012024, "lr": 0.002760, "mb_qsize": 64, "mem": 6511, "time": 0.293074}
json_stats: {"eta": "7:17:21", "iter": 460, "loss": 0.198548, "loss_rpn_bbox_fpn2": 0.004933, "loss_rpn_bbox_fpn3": 0.009996, "loss_rpn_bbox_fpn4": 0.021101, "loss_rpn_bbox_fpn5": 0.061148, "loss_rpn_cls_fpn2": 0.011143, "loss_rpn_cls_fpn3": 0.014442, "loss_rpn_cls_fpn4": 0.016339, "loss_rpn_cls_fpn5": 0.011561, "lr": 0.002840, "mb_qsize": 64, "mem": 6511, "time": 0.293071}
json_stats: {"eta": "7:16:32", "iter": 480, "loss": 0.169206, "loss_rpn_bbox_fpn2": 0.001376, "loss_rpn_bbox_fpn3": 0.005866, "loss_rpn_bbox_fpn4": 0.025858, "loss_rpn_bbox_fpn5": 0.053697, "loss_rpn_cls_fpn2": 0.005494, "loss_rpn_cls_fpn3": 0.010734, "loss_rpn_cls_fpn4": 0.016997, "loss_rpn_cls_fpn5": 0.014405, "lr": 0.002920, "mb_qsize": 64, "mem": 6512, "time": 0.292585}
json_stats: {"eta": "7:17:27", "iter": 500, "loss": 0.118787, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006286, "loss_rpn_bbox_fpn4": 0.013592, "loss_rpn_bbox_fpn5": 0.014249, "loss_rpn_cls_fpn2": 0.001967, "loss_rpn_cls_fpn3": 0.010107, "loss_rpn_cls_fpn4": 0.013191, "loss_rpn_cls_fpn5": 0.007357, "lr": 0.003000, "mb_qsize": 64, "mem": 6512, "time": 0.293267}
json_stats: {"eta": "7:17:11", "iter": 520, "loss": 0.115510, "loss_rpn_bbox_fpn2": 0.001546, "loss_rpn_bbox_fpn3": 0.008493, "loss_rpn_bbox_fpn4": 0.018951, "loss_rpn_bbox_fpn5": 0.026256, "loss_rpn_cls_fpn2": 0.003512, "loss_rpn_cls_fpn3": 0.017072, "loss_rpn_cls_fpn4": 0.013539, "loss_rpn_cls_fpn5": 0.004822, "lr": 0.003000, "mb_qsize": 64, "mem": 6512, "time": 0.293150}
json_stats: {"eta": "7:16:51", "iter": 540, "loss": 0.177958, "loss_rpn_bbox_fpn2": 0.000223, "loss_rpn_bbox_fpn3": 0.009515, "loss_rpn_bbox_fpn4": 0.015818, "loss_rpn_bbox_fpn5": 0.043089, "loss_rpn_cls_fpn2": 0.004433, "loss_rpn_cls_fpn3": 0.009937, "loss_rpn_cls_fpn4": 0.014974, "loss_rpn_cls_fpn5": 0.014843, "lr": 0.003000, "mb_qsize": 64, "mem": 6518, "time": 0.293002}
json_stats: {"eta": "7:16:38", "iter": 560, "loss": 0.125109, "loss_rpn_bbox_fpn2": 0.001588, "loss_rpn_bbox_fpn3": 0.007576, "loss_rpn_bbox_fpn4": 0.018421, "loss_rpn_bbox_fpn5": 0.025061, "loss_rpn_cls_fpn2": 0.004489, "loss_rpn_cls_fpn3": 0.010239, "loss_rpn_cls_fpn4": 0.014813, "loss_rpn_cls_fpn5": 0.008606, "lr": 0.003000, "mb_qsize": 64, "mem": 6519, "time": 0.292919}
json_stats: {"eta": "7:16:30", "iter": 580, "loss": 0.156993, "loss_rpn_bbox_fpn2": 0.001584, "loss_rpn_bbox_fpn3": 0.006068, "loss_rpn_bbox_fpn4": 0.009736, "loss_rpn_bbox_fpn5": 0.061021, "loss_rpn_cls_fpn2": 0.003473, "loss_rpn_cls_fpn3": 0.012824, "loss_rpn_cls_fpn4": 0.011906, "loss_rpn_cls_fpn5": 0.010419, "lr": 0.003000, "mb_qsize": 64, "mem": 6521, "time": 0.292893}
json_stats: {"eta": "7:15:32", "iter": 600, "loss": 0.133697, "loss_rpn_bbox_fpn2": 0.001723, "loss_rpn_bbox_fpn3": 0.010774, "loss_rpn_bbox_fpn4": 0.019552, "loss_rpn_bbox_fpn5": 0.036182, "loss_rpn_cls_fpn2": 0.005655, "loss_rpn_cls_fpn3": 0.012929, "loss_rpn_cls_fpn4": 0.012561, "loss_rpn_cls_fpn5": 0.012609, "lr": 0.003000, "mb_qsize": 64, "mem": 6521, "time": 0.292311}
json_stats: {"eta": "7:15:37", "iter": 620, "loss": 0.118638, "loss_rpn_bbox_fpn2": 0.001436, "loss_rpn_bbox_fpn3": 0.006831, "loss_rpn_bbox_fpn4": 0.013736, "loss_rpn_bbox_fpn5": 0.030728, "loss_rpn_cls_fpn2": 0.002850, "loss_rpn_cls_fpn3": 0.008508, "loss_rpn_cls_fpn4": 0.009599, "loss_rpn_cls_fpn5": 0.008315, "lr": 0.003000, "mb_qsize": 64, "mem": 6521, "time": 0.292426}
json_stats: {"eta": "7:15:06", "iter": 640, "loss": 0.116166, "loss_rpn_bbox_fpn2": 0.000237, "loss_rpn_bbox_fpn3": 0.003383, "loss_rpn_bbox_fpn4": 0.011133, "loss_rpn_bbox_fpn5": 0.035895, "loss_rpn_cls_fpn2": 0.002909, "loss_rpn_cls_fpn3": 0.008406, "loss_rpn_cls_fpn4": 0.007599, "loss_rpn_cls_fpn5": 0.009243, "lr": 0.003000, "mb_qsize": 64, "mem": 6521, "time": 0.292150}
json_stats: {"eta": "7:14:14", "iter": 660, "loss": 0.135768, "loss_rpn_bbox_fpn2": 0.000312, "loss_rpn_bbox_fpn3": 0.008283, "loss_rpn_bbox_fpn4": 0.019825, "loss_rpn_bbox_fpn5": 0.037775, "loss_rpn_cls_fpn2": 0.003684, "loss_rpn_cls_fpn3": 0.012857, "loss_rpn_cls_fpn4": 0.011077, "loss_rpn_cls_fpn5": 0.009037, "lr": 0.003000, "mb_qsize": 64, "mem": 6521, "time": 0.291629}
json_stats: {"eta": "7:13:50", "iter": 680, "loss": 0.137281, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005539, "loss_rpn_bbox_fpn4": 0.013003, "loss_rpn_bbox_fpn5": 0.046076, "loss_rpn_cls_fpn2": 0.002222, "loss_rpn_cls_fpn3": 0.008865, "loss_rpn_cls_fpn4": 0.008452, "loss_rpn_cls_fpn5": 0.010509, "lr": 0.003000, "mb_qsize": 64, "mem": 6521, "time": 0.291427}
json_stats: {"eta": "7:13:45", "iter": 700, "loss": 0.177119, "loss_rpn_bbox_fpn2": 0.001398, "loss_rpn_bbox_fpn3": 0.006101, "loss_rpn_bbox_fpn4": 0.023957, "loss_rpn_bbox_fpn5": 0.064978, "loss_rpn_cls_fpn2": 0.003613, "loss_rpn_cls_fpn3": 0.012341, "loss_rpn_cls_fpn4": 0.012241, "loss_rpn_cls_fpn5": 0.013695, "lr": 0.003000, "mb_qsize": 64, "mem": 6521, "time": 0.291436}
json_stats: {"eta": "7:14:28", "iter": 720, "loss": 0.115671, "loss_rpn_bbox_fpn2": 0.000096, "loss_rpn_bbox_fpn3": 0.007300, "loss_rpn_bbox_fpn4": 0.020071, "loss_rpn_bbox_fpn5": 0.032496, "loss_rpn_cls_fpn2": 0.002212, "loss_rpn_cls_fpn3": 0.009926, "loss_rpn_cls_fpn4": 0.012222, "loss_rpn_cls_fpn5": 0.012091, "lr": 0.003000, "mb_qsize": 63, "mem": 6521, "time": 0.291986}
json_stats: {"eta": "7:15:36", "iter": 740, "loss": 0.173758, "loss_rpn_bbox_fpn2": 0.000451, "loss_rpn_bbox_fpn3": 0.006527, "loss_rpn_bbox_fpn4": 0.017406, "loss_rpn_bbox_fpn5": 0.069295, "loss_rpn_cls_fpn2": 0.004991, "loss_rpn_cls_fpn3": 0.011449, "loss_rpn_cls_fpn4": 0.012796, "loss_rpn_cls_fpn5": 0.009890, "lr": 0.003000, "mb_qsize": 64, "mem": 6522, "time": 0.292819}
json_stats: {"eta": "7:15:40", "iter": 760, "loss": 0.141660, "loss_rpn_bbox_fpn2": 0.000653, "loss_rpn_bbox_fpn3": 0.004876, "loss_rpn_bbox_fpn4": 0.011658, "loss_rpn_bbox_fpn5": 0.055299, "loss_rpn_cls_fpn2": 0.003512, "loss_rpn_cls_fpn3": 0.006838, "loss_rpn_cls_fpn4": 0.014773, "loss_rpn_cls_fpn5": 0.012515, "lr": 0.003000, "mb_qsize": 64, "mem": 6522, "time": 0.292920}
json_stats: {"eta": "7:16:13", "iter": 780, "loss": 0.152276, "loss_rpn_bbox_fpn2": 0.000779, "loss_rpn_bbox_fpn3": 0.006498, "loss_rpn_bbox_fpn4": 0.018885, "loss_rpn_bbox_fpn5": 0.046358, "loss_rpn_cls_fpn2": 0.003645, "loss_rpn_cls_fpn3": 0.010744, "loss_rpn_cls_fpn4": 0.013930, "loss_rpn_cls_fpn5": 0.010373, "lr": 0.003000, "mb_qsize": 64, "mem": 6523, "time": 0.293364}
json_stats: {"eta": "7:16:14", "iter": 800, "loss": 0.128309, "loss_rpn_bbox_fpn2": 0.001422, "loss_rpn_bbox_fpn3": 0.007686, "loss_rpn_bbox_fpn4": 0.020177, "loss_rpn_bbox_fpn5": 0.043225, "loss_rpn_cls_fpn2": 0.003671, "loss_rpn_cls_fpn3": 0.014544, "loss_rpn_cls_fpn4": 0.015872, "loss_rpn_cls_fpn5": 0.009629, "lr": 0.003000, "mb_qsize": 64, "mem": 6524, "time": 0.293431}
json_stats: {"eta": "7:16:37", "iter": 820, "loss": 0.110011, "loss_rpn_bbox_fpn2": 0.000074, "loss_rpn_bbox_fpn3": 0.007438, "loss_rpn_bbox_fpn4": 0.013162, "loss_rpn_bbox_fpn5": 0.021617, "loss_rpn_cls_fpn2": 0.002645, "loss_rpn_cls_fpn3": 0.015293, "loss_rpn_cls_fpn4": 0.008074, "loss_rpn_cls_fpn5": 0.008358, "lr": 0.003000, "mb_qsize": 64, "mem": 6524, "time": 0.293756}
json_stats: {"eta": "7:16:20", "iter": 840, "loss": 0.120982, "loss_rpn_bbox_fpn2": 0.001103, "loss_rpn_bbox_fpn3": 0.010367, "loss_rpn_bbox_fpn4": 0.027850, "loss_rpn_bbox_fpn5": 0.033806, "loss_rpn_cls_fpn2": 0.002944, "loss_rpn_cls_fpn3": 0.011735, "loss_rpn_cls_fpn4": 0.015676, "loss_rpn_cls_fpn5": 0.010053, "lr": 0.003000, "mb_qsize": 64, "mem": 6524, "time": 0.293634}
json_stats: {"eta": "7:15:59", "iter": 860, "loss": 0.143274, "loss_rpn_bbox_fpn2": 0.000666, "loss_rpn_bbox_fpn3": 0.012357, "loss_rpn_bbox_fpn4": 0.018629, "loss_rpn_bbox_fpn5": 0.029886, "loss_rpn_cls_fpn2": 0.007084, "loss_rpn_cls_fpn3": 0.016375, "loss_rpn_cls_fpn4": 0.011226, "loss_rpn_cls_fpn5": 0.007754, "lr": 0.003000, "mb_qsize": 64, "mem": 6524, "time": 0.293461}
json_stats: {"eta": "7:15:42", "iter": 880, "loss": 0.087685, "loss_rpn_bbox_fpn2": 0.000831, "loss_rpn_bbox_fpn3": 0.007178, "loss_rpn_bbox_fpn4": 0.019676, "loss_rpn_bbox_fpn5": 0.019042, "loss_rpn_cls_fpn2": 0.002026, "loss_rpn_cls_fpn3": 0.010060, "loss_rpn_cls_fpn4": 0.011781, "loss_rpn_cls_fpn5": 0.005161, "lr": 0.003000, "mb_qsize": 64, "mem": 6529, "time": 0.293341}
json_stats: {"eta": "7:15:37", "iter": 900, "loss": 0.107404, "loss_rpn_bbox_fpn2": 0.000849, "loss_rpn_bbox_fpn3": 0.007133, "loss_rpn_bbox_fpn4": 0.014183, "loss_rpn_bbox_fpn5": 0.027718, "loss_rpn_cls_fpn2": 0.002638, "loss_rpn_cls_fpn3": 0.009206, "loss_rpn_cls_fpn4": 0.010248, "loss_rpn_cls_fpn5": 0.009279, "lr": 0.003000, "mb_qsize": 64, "mem": 6529, "time": 0.293347}
json_stats: {"eta": "7:15:04", "iter": 920, "loss": 0.097897, "loss_rpn_bbox_fpn2": 0.000166, "loss_rpn_bbox_fpn3": 0.003488, "loss_rpn_bbox_fpn4": 0.011486, "loss_rpn_bbox_fpn5": 0.033347, "loss_rpn_cls_fpn2": 0.001071, "loss_rpn_cls_fpn3": 0.005034, "loss_rpn_cls_fpn4": 0.010056, "loss_rpn_cls_fpn5": 0.006200, "lr": 0.003000, "mb_qsize": 64, "mem": 6529, "time": 0.293049}
json_stats: {"eta": "7:14:53", "iter": 940, "loss": 0.078627, "loss_rpn_bbox_fpn2": 0.000113, "loss_rpn_bbox_fpn3": 0.007441, "loss_rpn_bbox_fpn4": 0.018474, "loss_rpn_bbox_fpn5": 0.021110, "loss_rpn_cls_fpn2": 0.001597, "loss_rpn_cls_fpn3": 0.007364, "loss_rpn_cls_fpn4": 0.007611, "loss_rpn_cls_fpn5": 0.003849, "lr": 0.003000, "mb_qsize": 64, "mem": 6529, "time": 0.292987}
json_stats: {"eta": "7:14:26", "iter": 960, "loss": 0.109248, "loss_rpn_bbox_fpn2": 0.000647, "loss_rpn_bbox_fpn3": 0.004933, "loss_rpn_bbox_fpn4": 0.015057, "loss_rpn_bbox_fpn5": 0.033554, "loss_rpn_cls_fpn2": 0.002422, "loss_rpn_cls_fpn3": 0.007075, "loss_rpn_cls_fpn4": 0.008630, "loss_rpn_cls_fpn5": 0.005312, "lr": 0.003000, "mb_qsize": 64, "mem": 6529, "time": 0.292747}
json_stats: {"eta": "7:13:08", "iter": 980, "loss": 0.123378, "loss_rpn_bbox_fpn2": 0.000494, "loss_rpn_bbox_fpn3": 0.008377, "loss_rpn_bbox_fpn4": 0.017140, "loss_rpn_bbox_fpn5": 0.046184, "loss_rpn_cls_fpn2": 0.002227, "loss_rpn_cls_fpn3": 0.010440, "loss_rpn_cls_fpn4": 0.007253, "loss_rpn_cls_fpn5": 0.010073, "lr": 0.003000, "mb_qsize": 64, "mem": 6529, "time": 0.291942}
json_stats: {"eta": "7:12:03", "iter": 1000, "loss": 0.114644, "loss_rpn_bbox_fpn2": 0.001400, "loss_rpn_bbox_fpn3": 0.008833, "loss_rpn_bbox_fpn4": 0.012382, "loss_rpn_bbox_fpn5": 0.019364, "loss_rpn_cls_fpn2": 0.002572, "loss_rpn_cls_fpn3": 0.009901, "loss_rpn_cls_fpn4": 0.009142, "loss_rpn_cls_fpn5": 0.008620, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.291271}
json_stats: {"eta": "7:10:53", "iter": 1020, "loss": 0.105195, "loss_rpn_bbox_fpn2": 0.000862, "loss_rpn_bbox_fpn3": 0.006935, "loss_rpn_bbox_fpn4": 0.010823, "loss_rpn_bbox_fpn5": 0.021260, "loss_rpn_cls_fpn2": 0.002060, "loss_rpn_cls_fpn3": 0.007115, "loss_rpn_cls_fpn4": 0.005415, "loss_rpn_cls_fpn5": 0.006806, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.290549}
json_stats: {"eta": "7:09:53", "iter": 1040, "loss": 0.074736, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004849, "loss_rpn_bbox_fpn4": 0.009169, "loss_rpn_bbox_fpn5": 0.010029, "loss_rpn_cls_fpn2": 0.001483, "loss_rpn_cls_fpn3": 0.007579, "loss_rpn_cls_fpn4": 0.007350, "loss_rpn_cls_fpn5": 0.002147, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.289950}
json_stats: {"eta": "7:08:55", "iter": 1060, "loss": 0.097604, "loss_rpn_bbox_fpn2": 0.000162, "loss_rpn_bbox_fpn3": 0.007049, "loss_rpn_bbox_fpn4": 0.010247, "loss_rpn_bbox_fpn5": 0.031685, "loss_rpn_cls_fpn2": 0.001344, "loss_rpn_cls_fpn3": 0.015178, "loss_rpn_cls_fpn4": 0.007942, "loss_rpn_cls_fpn5": 0.006150, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.289352}
json_stats: {"eta": "7:07:42", "iter": 1080, "loss": 0.102716, "loss_rpn_bbox_fpn2": 0.000434, "loss_rpn_bbox_fpn3": 0.007556, "loss_rpn_bbox_fpn4": 0.017464, "loss_rpn_bbox_fpn5": 0.031264, "loss_rpn_cls_fpn2": 0.002019, "loss_rpn_cls_fpn3": 0.017076, "loss_rpn_cls_fpn4": 0.010369, "loss_rpn_cls_fpn5": 0.003485, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.288602}
json_stats: {"eta": "7:06:58", "iter": 1100, "loss": 0.108026, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003649, "loss_rpn_bbox_fpn4": 0.010314, "loss_rpn_bbox_fpn5": 0.052656, "loss_rpn_cls_fpn2": 0.002018, "loss_rpn_cls_fpn3": 0.006455, "loss_rpn_cls_fpn4": 0.008383, "loss_rpn_cls_fpn5": 0.006150, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.288171}
json_stats: {"eta": "7:05:57", "iter": 1120, "loss": 0.081243, "loss_rpn_bbox_fpn2": 0.000143, "loss_rpn_bbox_fpn3": 0.003560, "loss_rpn_bbox_fpn4": 0.009004, "loss_rpn_bbox_fpn5": 0.020978, "loss_rpn_cls_fpn2": 0.003942, "loss_rpn_cls_fpn3": 0.008022, "loss_rpn_cls_fpn4": 0.005448, "loss_rpn_cls_fpn5": 0.009146, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.287549}
json_stats: {"eta": "7:05:02", "iter": 1140, "loss": 0.099437, "loss_rpn_bbox_fpn2": 0.000645, "loss_rpn_bbox_fpn3": 0.006455, "loss_rpn_bbox_fpn4": 0.015094, "loss_rpn_bbox_fpn5": 0.016050, "loss_rpn_cls_fpn2": 0.003800, "loss_rpn_cls_fpn3": 0.012952, "loss_rpn_cls_fpn4": 0.007539, "loss_rpn_cls_fpn5": 0.004483, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.286996}
json_stats: {"eta": "7:04:09", "iter": 1160, "loss": 0.093372, "loss_rpn_bbox_fpn2": 0.001120, "loss_rpn_bbox_fpn3": 0.006193, "loss_rpn_bbox_fpn4": 0.014564, "loss_rpn_bbox_fpn5": 0.022563, "loss_rpn_cls_fpn2": 0.003603, "loss_rpn_cls_fpn3": 0.007344, "loss_rpn_cls_fpn4": 0.005460, "loss_rpn_cls_fpn5": 0.008196, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.286461}
json_stats: {"eta": "7:03:16", "iter": 1180, "loss": 0.093742, "loss_rpn_bbox_fpn2": 0.001056, "loss_rpn_bbox_fpn3": 0.005178, "loss_rpn_bbox_fpn4": 0.021289, "loss_rpn_bbox_fpn5": 0.021904, "loss_rpn_cls_fpn2": 0.003052, "loss_rpn_cls_fpn3": 0.012548, "loss_rpn_cls_fpn4": 0.006814, "loss_rpn_cls_fpn5": 0.007291, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.285937}
json_stats: {"eta": "7:02:36", "iter": 1200, "loss": 0.086949, "loss_rpn_bbox_fpn2": 0.001104, "loss_rpn_bbox_fpn3": 0.003495, "loss_rpn_bbox_fpn4": 0.012984, "loss_rpn_bbox_fpn5": 0.025081, "loss_rpn_cls_fpn2": 0.001632, "loss_rpn_cls_fpn3": 0.008356, "loss_rpn_cls_fpn4": 0.007906, "loss_rpn_cls_fpn5": 0.004177, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.285542}
json_stats: {"eta": "7:01:57", "iter": 1220, "loss": 0.111062, "loss_rpn_bbox_fpn2": 0.000703, "loss_rpn_bbox_fpn3": 0.004825, "loss_rpn_bbox_fpn4": 0.018967, "loss_rpn_bbox_fpn5": 0.016283, "loss_rpn_cls_fpn2": 0.003162, "loss_rpn_cls_fpn3": 0.008062, "loss_rpn_cls_fpn4": 0.009418, "loss_rpn_cls_fpn5": 0.005714, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.285166}
json_stats: {"eta": "7:00:55", "iter": 1240, "loss": 0.096324, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007153, "loss_rpn_bbox_fpn4": 0.011255, "loss_rpn_bbox_fpn5": 0.034356, "loss_rpn_cls_fpn2": 0.001711, "loss_rpn_cls_fpn3": 0.006571, "loss_rpn_cls_fpn4": 0.004961, "loss_rpn_cls_fpn5": 0.006457, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.284532}
json_stats: {"eta": "7:00:05", "iter": 1260, "loss": 0.077752, "loss_rpn_bbox_fpn2": 0.000276, "loss_rpn_bbox_fpn3": 0.007333, "loss_rpn_bbox_fpn4": 0.013812, "loss_rpn_bbox_fpn5": 0.022754, "loss_rpn_cls_fpn2": 0.001225, "loss_rpn_cls_fpn3": 0.008674, "loss_rpn_cls_fpn4": 0.007907, "loss_rpn_cls_fpn5": 0.005655, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.284033}
json_stats: {"eta": "6:59:24", "iter": 1280, "loss": 0.087818, "loss_rpn_bbox_fpn2": 0.000210, "loss_rpn_bbox_fpn3": 0.007232, "loss_rpn_bbox_fpn4": 0.011316, "loss_rpn_bbox_fpn5": 0.018995, "loss_rpn_cls_fpn2": 0.001721, "loss_rpn_cls_fpn3": 0.006488, "loss_rpn_cls_fpn4": 0.007971, "loss_rpn_cls_fpn5": 0.003754, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.283636}
json_stats: {"eta": "6:58:44", "iter": 1300, "loss": 0.101929, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004591, "loss_rpn_bbox_fpn4": 0.009501, "loss_rpn_bbox_fpn5": 0.048799, "loss_rpn_cls_fpn2": 0.000812, "loss_rpn_cls_fpn3": 0.005656, "loss_rpn_cls_fpn4": 0.008826, "loss_rpn_cls_fpn5": 0.007403, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.283258}
json_stats: {"eta": "6:58:20", "iter": 1320, "loss": 0.123012, "loss_rpn_bbox_fpn2": 0.001420, "loss_rpn_bbox_fpn3": 0.006082, "loss_rpn_bbox_fpn4": 0.024820, "loss_rpn_bbox_fpn5": 0.036610, "loss_rpn_cls_fpn2": 0.002316, "loss_rpn_cls_fpn3": 0.006748, "loss_rpn_cls_fpn4": 0.007836, "loss_rpn_cls_fpn5": 0.010511, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.283049}
json_stats: {"eta": "6:58:05", "iter": 1340, "loss": 0.106936, "loss_rpn_bbox_fpn2": 0.000244, "loss_rpn_bbox_fpn3": 0.006828, "loss_rpn_bbox_fpn4": 0.015569, "loss_rpn_bbox_fpn5": 0.043233, "loss_rpn_cls_fpn2": 0.002909, "loss_rpn_cls_fpn3": 0.008438, "loss_rpn_cls_fpn4": 0.009797, "loss_rpn_cls_fpn5": 0.010654, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.282935}
json_stats: {"eta": "6:57:15", "iter": 1360, "loss": 0.102171, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004537, "loss_rpn_bbox_fpn4": 0.009714, "loss_rpn_bbox_fpn5": 0.040528, "loss_rpn_cls_fpn2": 0.002511, "loss_rpn_cls_fpn3": 0.005398, "loss_rpn_cls_fpn4": 0.008505, "loss_rpn_cls_fpn5": 0.006610, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.282439}
json_stats: {"eta": "6:56:34", "iter": 1380, "loss": 0.095183, "loss_rpn_bbox_fpn2": 0.000758, "loss_rpn_bbox_fpn3": 0.005273, "loss_rpn_bbox_fpn4": 0.009088, "loss_rpn_bbox_fpn5": 0.019953, "loss_rpn_cls_fpn2": 0.002394, "loss_rpn_cls_fpn3": 0.009961, "loss_rpn_cls_fpn4": 0.006495, "loss_rpn_cls_fpn5": 0.005391, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.282046}
json_stats: {"eta": "6:56:32", "iter": 1400, "loss": 0.127687, "loss_rpn_bbox_fpn2": 0.002521, "loss_rpn_bbox_fpn3": 0.009544, "loss_rpn_bbox_fpn4": 0.026449, "loss_rpn_bbox_fpn5": 0.036293, "loss_rpn_cls_fpn2": 0.002895, "loss_rpn_cls_fpn3": 0.010704, "loss_rpn_cls_fpn4": 0.010656, "loss_rpn_cls_fpn5": 0.009097, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.282079}
json_stats: {"eta": "6:55:47", "iter": 1420, "loss": 0.089540, "loss_rpn_bbox_fpn2": 0.000155, "loss_rpn_bbox_fpn3": 0.007291, "loss_rpn_bbox_fpn4": 0.013632, "loss_rpn_bbox_fpn5": 0.027328, "loss_rpn_cls_fpn2": 0.001128, "loss_rpn_cls_fpn3": 0.005881, "loss_rpn_cls_fpn4": 0.008091, "loss_rpn_cls_fpn5": 0.005354, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.281635}
json_stats: {"eta": "6:55:04", "iter": 1440, "loss": 0.096467, "loss_rpn_bbox_fpn2": 0.000255, "loss_rpn_bbox_fpn3": 0.004621, "loss_rpn_bbox_fpn4": 0.013375, "loss_rpn_bbox_fpn5": 0.034012, "loss_rpn_cls_fpn2": 0.002083, "loss_rpn_cls_fpn3": 0.007666, "loss_rpn_cls_fpn4": 0.006355, "loss_rpn_cls_fpn5": 0.007165, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.281211}
json_stats: {"eta": "6:54:28", "iter": 1460, "loss": 0.098879, "loss_rpn_bbox_fpn2": 0.001437, "loss_rpn_bbox_fpn3": 0.004345, "loss_rpn_bbox_fpn4": 0.019050, "loss_rpn_bbox_fpn5": 0.024117, "loss_rpn_cls_fpn2": 0.003138, "loss_rpn_cls_fpn3": 0.007306, "loss_rpn_cls_fpn4": 0.011211, "loss_rpn_cls_fpn5": 0.003220, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.280875}
json_stats: {"eta": "6:54:03", "iter": 1480, "loss": 0.086446, "loss_rpn_bbox_fpn2": 0.001299, "loss_rpn_bbox_fpn3": 0.005874, "loss_rpn_bbox_fpn4": 0.015252, "loss_rpn_bbox_fpn5": 0.024542, "loss_rpn_cls_fpn2": 0.002789, "loss_rpn_cls_fpn3": 0.007556, "loss_rpn_cls_fpn4": 0.008442, "loss_rpn_cls_fpn5": 0.007933, "lr": 0.003000, "mb_qsize": 64, "mem": 6534, "time": 0.280656}
json_stats: {"eta": "6:53:40", "iter": 1500, "loss": 0.087318, "loss_rpn_bbox_fpn2": 0.000914, "loss_rpn_bbox_fpn3": 0.004744, "loss_rpn_bbox_fpn4": 0.020333, "loss_rpn_bbox_fpn5": 0.023290, "loss_rpn_cls_fpn2": 0.000941, "loss_rpn_cls_fpn3": 0.009456, "loss_rpn_cls_fpn4": 0.007185, "loss_rpn_cls_fpn5": 0.005868, "lr": 0.003000, "mb_qsize": 64, "mem": 6536, "time": 0.280462}
json_stats: {"eta": "6:53:24", "iter": 1520, "loss": 0.116000, "loss_rpn_bbox_fpn2": 0.000630, "loss_rpn_bbox_fpn3": 0.007534, "loss_rpn_bbox_fpn4": 0.013021, "loss_rpn_bbox_fpn5": 0.037079, "loss_rpn_cls_fpn2": 0.002436, "loss_rpn_cls_fpn3": 0.009375, "loss_rpn_cls_fpn4": 0.005967, "loss_rpn_cls_fpn5": 0.009492, "lr": 0.003000, "mb_qsize": 64, "mem": 6536, "time": 0.280337}
json_stats: {"eta": "6:53:15", "iter": 1540, "loss": 0.072489, "loss_rpn_bbox_fpn2": 0.001244, "loss_rpn_bbox_fpn3": 0.004916, "loss_rpn_bbox_fpn4": 0.013954, "loss_rpn_bbox_fpn5": 0.020278, "loss_rpn_cls_fpn2": 0.001991, "loss_rpn_cls_fpn3": 0.007325, "loss_rpn_cls_fpn4": 0.007695, "loss_rpn_cls_fpn5": 0.004506, "lr": 0.003000, "mb_qsize": 64, "mem": 6536, "time": 0.280297}
json_stats: {"eta": "6:53:28", "iter": 1560, "loss": 0.055424, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003166, "loss_rpn_bbox_fpn4": 0.007454, "loss_rpn_bbox_fpn5": 0.007321, "loss_rpn_cls_fpn2": 0.001174, "loss_rpn_cls_fpn3": 0.007144, "loss_rpn_cls_fpn4": 0.001751, "loss_rpn_cls_fpn5": 0.002518, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.280509}
json_stats: {"eta": "6:53:43", "iter": 1580, "loss": 0.115081, "loss_rpn_bbox_fpn2": 0.000837, "loss_rpn_bbox_fpn3": 0.009110, "loss_rpn_bbox_fpn4": 0.018890, "loss_rpn_bbox_fpn5": 0.022721, "loss_rpn_cls_fpn2": 0.003113, "loss_rpn_cls_fpn3": 0.009371, "loss_rpn_cls_fpn4": 0.009382, "loss_rpn_cls_fpn5": 0.010095, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.280743}
json_stats: {"eta": "6:53:56", "iter": 1600, "loss": 0.110001, "loss_rpn_bbox_fpn2": 0.002989, "loss_rpn_bbox_fpn3": 0.005337, "loss_rpn_bbox_fpn4": 0.011757, "loss_rpn_bbox_fpn5": 0.038840, "loss_rpn_cls_fpn2": 0.004597, "loss_rpn_cls_fpn3": 0.007815, "loss_rpn_cls_fpn4": 0.009606, "loss_rpn_cls_fpn5": 0.005921, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.280959}
json_stats: {"eta": "6:54:09", "iter": 1620, "loss": 0.119258, "loss_rpn_bbox_fpn2": 0.001015, "loss_rpn_bbox_fpn3": 0.003713, "loss_rpn_bbox_fpn4": 0.014911, "loss_rpn_bbox_fpn5": 0.040202, "loss_rpn_cls_fpn2": 0.001989, "loss_rpn_cls_fpn3": 0.005517, "loss_rpn_cls_fpn4": 0.009681, "loss_rpn_cls_fpn5": 0.008598, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.281170}
json_stats: {"eta": "6:54:06", "iter": 1640, "loss": 0.083074, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003719, "loss_rpn_bbox_fpn4": 0.014427, "loss_rpn_bbox_fpn5": 0.011286, "loss_rpn_cls_fpn2": 0.001742, "loss_rpn_cls_fpn3": 0.007818, "loss_rpn_cls_fpn4": 0.007657, "loss_rpn_cls_fpn5": 0.004300, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.281200}
json_stats: {"eta": "6:54:10", "iter": 1660, "loss": 0.089195, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004769, "loss_rpn_bbox_fpn4": 0.011894, "loss_rpn_bbox_fpn5": 0.011363, "loss_rpn_cls_fpn2": 0.001854, "loss_rpn_cls_fpn3": 0.005028, "loss_rpn_cls_fpn4": 0.006873, "loss_rpn_cls_fpn5": 0.002905, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.281308}
json_stats: {"eta": "6:54:26", "iter": 1680, "loss": 0.094127, "loss_rpn_bbox_fpn2": 0.000924, "loss_rpn_bbox_fpn3": 0.004629, "loss_rpn_bbox_fpn4": 0.013522, "loss_rpn_bbox_fpn5": 0.026549, "loss_rpn_cls_fpn2": 0.003906, "loss_rpn_cls_fpn3": 0.007417, "loss_rpn_cls_fpn4": 0.004926, "loss_rpn_cls_fpn5": 0.006500, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.281547}
json_stats: {"eta": "6:54:38", "iter": 1700, "loss": 0.066121, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006128, "loss_rpn_bbox_fpn4": 0.008611, "loss_rpn_bbox_fpn5": 0.006788, "loss_rpn_cls_fpn2": 0.000613, "loss_rpn_cls_fpn3": 0.007745, "loss_rpn_cls_fpn4": 0.006086, "loss_rpn_cls_fpn5": 0.001946, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.281745}
json_stats: {"eta": "6:54:24", "iter": 1720, "loss": 0.104519, "loss_rpn_bbox_fpn2": 0.000859, "loss_rpn_bbox_fpn3": 0.005824, "loss_rpn_bbox_fpn4": 0.010717, "loss_rpn_bbox_fpn5": 0.039496, "loss_rpn_cls_fpn2": 0.000742, "loss_rpn_cls_fpn3": 0.012109, "loss_rpn_cls_fpn4": 0.007448, "loss_rpn_cls_fpn5": 0.007311, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.281652}
json_stats: {"eta": "6:54:40", "iter": 1740, "loss": 0.083254, "loss_rpn_bbox_fpn2": 0.000492, "loss_rpn_bbox_fpn3": 0.008225, "loss_rpn_bbox_fpn4": 0.008627, "loss_rpn_bbox_fpn5": 0.011936, "loss_rpn_cls_fpn2": 0.001147, "loss_rpn_cls_fpn3": 0.008974, "loss_rpn_cls_fpn4": 0.006996, "loss_rpn_cls_fpn5": 0.004365, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.281897}
json_stats: {"eta": "6:55:27", "iter": 1760, "loss": 0.102021, "loss_rpn_bbox_fpn2": 0.002317, "loss_rpn_bbox_fpn3": 0.008946, "loss_rpn_bbox_fpn4": 0.021372, "loss_rpn_bbox_fpn5": 0.018652, "loss_rpn_cls_fpn2": 0.001497, "loss_rpn_cls_fpn3": 0.006963, "loss_rpn_cls_fpn4": 0.007466, "loss_rpn_cls_fpn5": 0.002999, "lr": 0.003000, "mb_qsize": 62, "mem": 6541, "time": 0.282498}
json_stats: {"eta": "6:55:45", "iter": 1780, "loss": 0.098197, "loss_rpn_bbox_fpn2": 0.000376, "loss_rpn_bbox_fpn3": 0.004675, "loss_rpn_bbox_fpn4": 0.017024, "loss_rpn_bbox_fpn5": 0.034940, "loss_rpn_cls_fpn2": 0.002723, "loss_rpn_cls_fpn3": 0.005013, "loss_rpn_cls_fpn4": 0.009850, "loss_rpn_cls_fpn5": 0.007288, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.282767}
json_stats: {"eta": "6:55:54", "iter": 1800, "loss": 0.070887, "loss_rpn_bbox_fpn2": 0.000978, "loss_rpn_bbox_fpn3": 0.006278, "loss_rpn_bbox_fpn4": 0.017638, "loss_rpn_bbox_fpn5": 0.016363, "loss_rpn_cls_fpn2": 0.001028, "loss_rpn_cls_fpn3": 0.003533, "loss_rpn_cls_fpn4": 0.004648, "loss_rpn_cls_fpn5": 0.003343, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.282934}
json_stats: {"eta": "6:55:51", "iter": 1820, "loss": 0.094169, "loss_rpn_bbox_fpn2": 0.000971, "loss_rpn_bbox_fpn3": 0.006705, "loss_rpn_bbox_fpn4": 0.013619, "loss_rpn_bbox_fpn5": 0.034789, "loss_rpn_cls_fpn2": 0.001846, "loss_rpn_cls_fpn3": 0.006858, "loss_rpn_cls_fpn4": 0.006599, "loss_rpn_cls_fpn5": 0.007290, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.282960}
json_stats: {"eta": "6:56:11", "iter": 1840, "loss": 0.095180, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004904, "loss_rpn_bbox_fpn4": 0.015804, "loss_rpn_bbox_fpn5": 0.022168, "loss_rpn_cls_fpn2": 0.002187, "loss_rpn_cls_fpn3": 0.007024, "loss_rpn_cls_fpn4": 0.009542, "loss_rpn_cls_fpn5": 0.004542, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.283251}
json_stats: {"eta": "6:56:14", "iter": 1860, "loss": 0.081359, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006286, "loss_rpn_bbox_fpn4": 0.009093, "loss_rpn_bbox_fpn5": 0.018159, "loss_rpn_cls_fpn2": 0.000415, "loss_rpn_cls_fpn3": 0.004623, "loss_rpn_cls_fpn4": 0.007113, "loss_rpn_cls_fpn5": 0.004602, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.283351}
json_stats: {"eta": "6:56:19", "iter": 1880, "loss": 0.085872, "loss_rpn_bbox_fpn2": 0.000388, "loss_rpn_bbox_fpn3": 0.005546, "loss_rpn_bbox_fpn4": 0.008346, "loss_rpn_bbox_fpn5": 0.037808, "loss_rpn_cls_fpn2": 0.001183, "loss_rpn_cls_fpn3": 0.005535, "loss_rpn_cls_fpn4": 0.005199, "loss_rpn_cls_fpn5": 0.005666, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.283468}
json_stats: {"eta": "6:56:09", "iter": 1900, "loss": 0.083281, "loss_rpn_bbox_fpn2": 0.000943, "loss_rpn_bbox_fpn3": 0.003860, "loss_rpn_bbox_fpn4": 0.010001, "loss_rpn_bbox_fpn5": 0.027072, "loss_rpn_cls_fpn2": 0.000891, "loss_rpn_cls_fpn3": 0.005796, "loss_rpn_cls_fpn4": 0.002957, "loss_rpn_cls_fpn5": 0.004366, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.283422}
json_stats: {"eta": "6:56:10", "iter": 1920, "loss": 0.078051, "loss_rpn_bbox_fpn2": 0.000348, "loss_rpn_bbox_fpn3": 0.007623, "loss_rpn_bbox_fpn4": 0.019741, "loss_rpn_bbox_fpn5": 0.016645, "loss_rpn_cls_fpn2": 0.000638, "loss_rpn_cls_fpn3": 0.007753, "loss_rpn_cls_fpn4": 0.004830, "loss_rpn_cls_fpn5": 0.003248, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.283501}
json_stats: {"eta": "6:56:12", "iter": 1940, "loss": 0.078111, "loss_rpn_bbox_fpn2": 0.000502, "loss_rpn_bbox_fpn3": 0.005722, "loss_rpn_bbox_fpn4": 0.009477, "loss_rpn_bbox_fpn5": 0.016228, "loss_rpn_cls_fpn2": 0.001679, "loss_rpn_cls_fpn3": 0.008622, "loss_rpn_cls_fpn4": 0.003331, "loss_rpn_cls_fpn5": 0.004133, "lr": 0.003000, "mb_qsize": 64, "mem": 6541, "time": 0.283581}
json_stats: {"eta": "6:56:06", "iter": 1960, "loss": 0.082213, "loss_rpn_bbox_fpn2": 0.000246, "loss_rpn_bbox_fpn3": 0.003260, "loss_rpn_bbox_fpn4": 0.010149, "loss_rpn_bbox_fpn5": 0.032815, "loss_rpn_cls_fpn2": 0.000677, "loss_rpn_cls_fpn3": 0.003985, "loss_rpn_cls_fpn4": 0.003030, "loss_rpn_cls_fpn5": 0.005675, "lr": 0.003000, "mb_qsize": 64, "mem": 6546, "time": 0.283576}
json_stats: {"eta": "6:56:00", "iter": 1980, "loss": 0.113034, "loss_rpn_bbox_fpn2": 0.000392, "loss_rpn_bbox_fpn3": 0.004063, "loss_rpn_bbox_fpn4": 0.011761, "loss_rpn_bbox_fpn5": 0.040981, "loss_rpn_cls_fpn2": 0.002265, "loss_rpn_cls_fpn3": 0.005683, "loss_rpn_cls_fpn4": 0.006860, "loss_rpn_cls_fpn5": 0.006282, "lr": 0.003000, "mb_qsize": 64, "mem": 6546, "time": 0.283575}
json_stats: {"eta": "6:56:02", "iter": 2000, "loss": 0.085607, "loss_rpn_bbox_fpn2": 0.002313, "loss_rpn_bbox_fpn3": 0.004741, "loss_rpn_bbox_fpn4": 0.009978, "loss_rpn_bbox_fpn5": 0.025213, "loss_rpn_cls_fpn2": 0.001652, "loss_rpn_cls_fpn3": 0.005000, "loss_rpn_cls_fpn4": 0.007328, "loss_rpn_cls_fpn5": 0.004713, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283661}
json_stats: {"eta": "6:55:55", "iter": 2020, "loss": 0.086011, "loss_rpn_bbox_fpn2": 0.000506, "loss_rpn_bbox_fpn3": 0.005754, "loss_rpn_bbox_fpn4": 0.009064, "loss_rpn_bbox_fpn5": 0.026277, "loss_rpn_cls_fpn2": 0.000896, "loss_rpn_cls_fpn3": 0.004712, "loss_rpn_cls_fpn4": 0.005630, "loss_rpn_cls_fpn5": 0.007884, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283646}
json_stats: {"eta": "6:55:55", "iter": 2040, "loss": 0.071264, "loss_rpn_bbox_fpn2": 0.000611, "loss_rpn_bbox_fpn3": 0.006013, "loss_rpn_bbox_fpn4": 0.010513, "loss_rpn_bbox_fpn5": 0.016914, "loss_rpn_cls_fpn2": 0.000902, "loss_rpn_cls_fpn3": 0.005544, "loss_rpn_cls_fpn4": 0.003876, "loss_rpn_cls_fpn5": 0.004156, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283712}
json_stats: {"eta": "6:56:00", "iter": 2060, "loss": 0.066743, "loss_rpn_bbox_fpn2": 0.001442, "loss_rpn_bbox_fpn3": 0.004939, "loss_rpn_bbox_fpn4": 0.009481, "loss_rpn_bbox_fpn5": 0.018303, "loss_rpn_cls_fpn2": 0.002893, "loss_rpn_cls_fpn3": 0.008194, "loss_rpn_cls_fpn4": 0.008165, "loss_rpn_cls_fpn5": 0.004120, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283833}
json_stats: {"eta": "6:56:01", "iter": 2080, "loss": 0.090925, "loss_rpn_bbox_fpn2": 0.000918, "loss_rpn_bbox_fpn3": 0.006408, "loss_rpn_bbox_fpn4": 0.011305, "loss_rpn_bbox_fpn5": 0.043589, "loss_rpn_cls_fpn2": 0.002157, "loss_rpn_cls_fpn3": 0.005763, "loss_rpn_cls_fpn4": 0.003737, "loss_rpn_cls_fpn5": 0.008546, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283907}
json_stats: {"eta": "6:55:56", "iter": 2100, "loss": 0.054510, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002805, "loss_rpn_bbox_fpn4": 0.007971, "loss_rpn_bbox_fpn5": 0.018794, "loss_rpn_cls_fpn2": 0.000516, "loss_rpn_cls_fpn3": 0.006796, "loss_rpn_cls_fpn4": 0.003956, "loss_rpn_cls_fpn5": 0.006012, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283916}
json_stats: {"eta": "6:55:50", "iter": 2120, "loss": 0.076585, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003179, "loss_rpn_bbox_fpn4": 0.012740, "loss_rpn_bbox_fpn5": 0.026664, "loss_rpn_cls_fpn2": 0.000706, "loss_rpn_cls_fpn3": 0.004892, "loss_rpn_cls_fpn4": 0.005822, "loss_rpn_cls_fpn5": 0.005327, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283918}
json_stats: {"eta": "6:55:32", "iter": 2140, "loss": 0.079107, "loss_rpn_bbox_fpn2": 0.000492, "loss_rpn_bbox_fpn3": 0.004162, "loss_rpn_bbox_fpn4": 0.020364, "loss_rpn_bbox_fpn5": 0.026639, "loss_rpn_cls_fpn2": 0.000960, "loss_rpn_cls_fpn3": 0.005587, "loss_rpn_cls_fpn4": 0.006898, "loss_rpn_cls_fpn5": 0.005316, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283776}
json_stats: {"eta": "6:55:23", "iter": 2160, "loss": 0.088970, "loss_rpn_bbox_fpn2": 0.000712, "loss_rpn_bbox_fpn3": 0.004759, "loss_rpn_bbox_fpn4": 0.007339, "loss_rpn_bbox_fpn5": 0.033820, "loss_rpn_cls_fpn2": 0.000628, "loss_rpn_cls_fpn3": 0.004834, "loss_rpn_cls_fpn4": 0.008619, "loss_rpn_cls_fpn5": 0.007922, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283737}
json_stats: {"eta": "6:55:19", "iter": 2180, "loss": 0.066832, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004689, "loss_rpn_bbox_fpn4": 0.006646, "loss_rpn_bbox_fpn5": 0.029664, "loss_rpn_cls_fpn2": 0.000350, "loss_rpn_cls_fpn3": 0.008149, "loss_rpn_cls_fpn4": 0.003573, "loss_rpn_cls_fpn5": 0.005816, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283760}
json_stats: {"eta": "6:55:20", "iter": 2200, "loss": 0.086225, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005948, "loss_rpn_bbox_fpn4": 0.008986, "loss_rpn_bbox_fpn5": 0.038716, "loss_rpn_cls_fpn2": 0.001589, "loss_rpn_cls_fpn3": 0.004571, "loss_rpn_cls_fpn4": 0.005328, "loss_rpn_cls_fpn5": 0.005606, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283827}
json_stats: {"eta": "6:55:18", "iter": 2220, "loss": 0.060330, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002789, "loss_rpn_bbox_fpn4": 0.007597, "loss_rpn_bbox_fpn5": 0.022282, "loss_rpn_cls_fpn2": 0.000389, "loss_rpn_cls_fpn3": 0.005800, "loss_rpn_cls_fpn4": 0.004136, "loss_rpn_cls_fpn5": 0.003041, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.283871}
json_stats: {"eta": "6:55:30", "iter": 2240, "loss": 0.074836, "loss_rpn_bbox_fpn2": 0.000716, "loss_rpn_bbox_fpn3": 0.006771, "loss_rpn_bbox_fpn4": 0.010104, "loss_rpn_bbox_fpn5": 0.026106, "loss_rpn_cls_fpn2": 0.002722, "loss_rpn_cls_fpn3": 0.006969, "loss_rpn_cls_fpn4": 0.005609, "loss_rpn_cls_fpn5": 0.004801, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.284075}
json_stats: {"eta": "6:55:25", "iter": 2260, "loss": 0.049483, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005798, "loss_rpn_bbox_fpn4": 0.008949, "loss_rpn_bbox_fpn5": 0.018144, "loss_rpn_cls_fpn2": 0.000395, "loss_rpn_cls_fpn3": 0.004675, "loss_rpn_cls_fpn4": 0.002018, "loss_rpn_cls_fpn5": 0.005658, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.284082}
json_stats: {"eta": "6:55:19", "iter": 2280, "loss": 0.073259, "loss_rpn_bbox_fpn2": 0.001362, "loss_rpn_bbox_fpn3": 0.003008, "loss_rpn_bbox_fpn4": 0.017020, "loss_rpn_bbox_fpn5": 0.019684, "loss_rpn_cls_fpn2": 0.001605, "loss_rpn_cls_fpn3": 0.003102, "loss_rpn_cls_fpn4": 0.005433, "loss_rpn_cls_fpn5": 0.002567, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.284075}
json_stats: {"eta": "6:55:41", "iter": 2300, "loss": 0.073939, "loss_rpn_bbox_fpn2": 0.000510, "loss_rpn_bbox_fpn3": 0.005986, "loss_rpn_bbox_fpn4": 0.017609, "loss_rpn_bbox_fpn5": 0.017008, "loss_rpn_cls_fpn2": 0.001398, "loss_rpn_cls_fpn3": 0.007574, "loss_rpn_cls_fpn4": 0.008729, "loss_rpn_cls_fpn5": 0.002816, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.284400}
json_stats: {"eta": "6:55:44", "iter": 2320, "loss": 0.078721, "loss_rpn_bbox_fpn2": 0.001099, "loss_rpn_bbox_fpn3": 0.005619, "loss_rpn_bbox_fpn4": 0.015458, "loss_rpn_bbox_fpn5": 0.022836, "loss_rpn_cls_fpn2": 0.001208, "loss_rpn_cls_fpn3": 0.004639, "loss_rpn_cls_fpn4": 0.006576, "loss_rpn_cls_fpn5": 0.004240, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.284499}
json_stats: {"eta": "6:55:44", "iter": 2340, "loss": 0.063298, "loss_rpn_bbox_fpn2": 0.000498, "loss_rpn_bbox_fpn3": 0.003499, "loss_rpn_bbox_fpn4": 0.010274, "loss_rpn_bbox_fpn5": 0.013922, "loss_rpn_cls_fpn2": 0.001268, "loss_rpn_cls_fpn3": 0.002749, "loss_rpn_cls_fpn4": 0.003506, "loss_rpn_cls_fpn5": 0.004074, "lr": 0.003000, "mb_qsize": 64, "mem": 6547, "time": 0.284558}
json_stats: {"eta": "6:55:41", "iter": 2360, "loss": 0.064225, "loss_rpn_bbox_fpn2": 0.000263, "loss_rpn_bbox_fpn3": 0.004614, "loss_rpn_bbox_fpn4": 0.012464, "loss_rpn_bbox_fpn5": 0.013192, "loss_rpn_cls_fpn2": 0.000599, "loss_rpn_cls_fpn3": 0.004966, "loss_rpn_cls_fpn4": 0.005075, "loss_rpn_cls_fpn5": 0.003829, "lr": 0.003000, "mb_qsize": 64, "mem": 6548, "time": 0.284590}
json_stats: {"eta": "6:55:39", "iter": 2380, "loss": 0.081608, "loss_rpn_bbox_fpn2": 0.001067, "loss_rpn_bbox_fpn3": 0.004482, "loss_rpn_bbox_fpn4": 0.014759, "loss_rpn_bbox_fpn5": 0.025001, "loss_rpn_cls_fpn2": 0.001810, "loss_rpn_cls_fpn3": 0.006481, "loss_rpn_cls_fpn4": 0.006751, "loss_rpn_cls_fpn5": 0.006468, "lr": 0.003000, "mb_qsize": 64, "mem": 6548, "time": 0.284630}
json_stats: {"eta": "6:55:44", "iter": 2400, "loss": 0.081183, "loss_rpn_bbox_fpn2": 0.000267, "loss_rpn_bbox_fpn3": 0.006226, "loss_rpn_bbox_fpn4": 0.011663, "loss_rpn_bbox_fpn5": 0.020453, "loss_rpn_cls_fpn2": 0.001125, "loss_rpn_cls_fpn3": 0.004891, "loss_rpn_cls_fpn4": 0.006132, "loss_rpn_cls_fpn5": 0.004969, "lr": 0.003000, "mb_qsize": 64, "mem": 6548, "time": 0.284759}
json_stats: {"eta": "6:55:56", "iter": 2420, "loss": 0.085087, "loss_rpn_bbox_fpn2": 0.000905, "loss_rpn_bbox_fpn3": 0.008629, "loss_rpn_bbox_fpn4": 0.008811, "loss_rpn_bbox_fpn5": 0.025101, "loss_rpn_cls_fpn2": 0.001253, "loss_rpn_cls_fpn3": 0.007339, "loss_rpn_cls_fpn4": 0.004238, "loss_rpn_cls_fpn5": 0.005168, "lr": 0.003000, "mb_qsize": 63, "mem": 6548, "time": 0.284959}
json_stats: {"eta": "6:55:48", "iter": 2440, "loss": 0.073013, "loss_rpn_bbox_fpn2": 0.000624, "loss_rpn_bbox_fpn3": 0.007633, "loss_rpn_bbox_fpn4": 0.010123, "loss_rpn_bbox_fpn5": 0.020608, "loss_rpn_cls_fpn2": 0.000675, "loss_rpn_cls_fpn3": 0.005601, "loss_rpn_cls_fpn4": 0.004915, "loss_rpn_cls_fpn5": 0.004540, "lr": 0.003000, "mb_qsize": 64, "mem": 6548, "time": 0.284932}
json_stats: {"eta": "6:55:58", "iter": 2460, "loss": 0.100863, "loss_rpn_bbox_fpn2": 0.000724, "loss_rpn_bbox_fpn3": 0.004243, "loss_rpn_bbox_fpn4": 0.013618, "loss_rpn_bbox_fpn5": 0.035672, "loss_rpn_cls_fpn2": 0.000668, "loss_rpn_cls_fpn3": 0.004765, "loss_rpn_cls_fpn4": 0.005014, "loss_rpn_cls_fpn5": 0.006932, "lr": 0.003000, "mb_qsize": 64, "mem": 6548, "time": 0.285107}
json_stats: {"eta": "6:56:04", "iter": 2480, "loss": 0.089240, "loss_rpn_bbox_fpn2": 0.001593, "loss_rpn_bbox_fpn3": 0.003276, "loss_rpn_bbox_fpn4": 0.007562, "loss_rpn_bbox_fpn5": 0.031056, "loss_rpn_cls_fpn2": 0.002168, "loss_rpn_cls_fpn3": 0.007455, "loss_rpn_cls_fpn4": 0.005042, "loss_rpn_cls_fpn5": 0.005487, "lr": 0.003000, "mb_qsize": 64, "mem": 6550, "time": 0.285245}
json_stats: {"eta": "6:56:10", "iter": 2500, "loss": 0.112429, "loss_rpn_bbox_fpn2": 0.000107, "loss_rpn_bbox_fpn3": 0.005336, "loss_rpn_bbox_fpn4": 0.018193, "loss_rpn_bbox_fpn5": 0.025269, "loss_rpn_cls_fpn2": 0.000698, "loss_rpn_cls_fpn3": 0.007632, "loss_rpn_cls_fpn4": 0.009912, "loss_rpn_cls_fpn5": 0.006746, "lr": 0.003000, "mb_qsize": 64, "mem": 6550, "time": 0.285374}
json_stats: {"eta": "6:56:12", "iter": 2520, "loss": 0.056148, "loss_rpn_bbox_fpn2": 0.001395, "loss_rpn_bbox_fpn3": 0.005394, "loss_rpn_bbox_fpn4": 0.014164, "loss_rpn_bbox_fpn5": 0.008170, "loss_rpn_cls_fpn2": 0.002286, "loss_rpn_cls_fpn3": 0.002925, "loss_rpn_cls_fpn4": 0.004597, "loss_rpn_cls_fpn5": 0.002393, "lr": 0.003000, "mb_qsize": 64, "mem": 6550, "time": 0.285468}
json_stats: {"eta": "6:56:10", "iter": 2540, "loss": 0.101472, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004421, "loss_rpn_bbox_fpn4": 0.014395, "loss_rpn_bbox_fpn5": 0.029321, "loss_rpn_cls_fpn2": 0.000781, "loss_rpn_cls_fpn3": 0.004656, "loss_rpn_cls_fpn4": 0.010235, "loss_rpn_cls_fpn5": 0.005933, "lr": 0.003000, "mb_qsize": 64, "mem": 6550, "time": 0.285507}
INFO loader.py: 285: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 126: Stopping enqueue thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
json_stats: {"eta": "6:56:36", "iter": 2560, "loss": 0.068661, "loss_rpn_bbox_fpn2": 0.000664, "loss_rpn_bbox_fpn3": 0.003904, "loss_rpn_bbox_fpn4": 0.012463, "loss_rpn_bbox_fpn5": 0.024307, "loss_rpn_cls_fpn2": 0.000687, "loss_rpn_cls_fpn3": 0.008904, "loss_rpn_cls_fpn4": 0.006622, "loss_rpn_cls_fpn5": 0.004745, "lr": 0.003000, "mb_qsize": 64, "mem": 6550, "time": 0.285871}
Original python traceback for operator 0 in network `generalized_rcnn` in exception above (most recent call last):
  File "tools/train_net.py", line 281, in <module>
  File "tools/train_net.py", line 119, in main
  File "tools/train_net.py", line 128, in train_model
  File "tools/train_net.py", line 206, in create_model
  File "/home/swk/Documents/ML/Detectron/lib/modeling/model_builder.py", line 124, in create
  File "/home/swk/Documents/ML/Detectron/lib/modeling/model_builder.py", line 89, in generalized_rcnn
  File "/home/swk/Documents/ML/Detectron/lib/modeling/model_builder.py", line 229, in build_generic_detection_model
  File "/home/swk/Documents/ML/Detectron/lib/modeling/optimizer.py", line 40, in build_data_parallel_model
  File "/home/swk/Documents/ML/Detectron/lib/modeling/optimizer.py", line 63, in _build_forward_graph
  File "/home/swk/Documents/ML/Detectron/lib/modeling/model_builder.py", line 169, in _single_gpu_build_func
  File "/home/swk/Documents/ML/Detectron/lib/modeling/FPN.py", line 47, in add_fpn_ResNet50_conv5_body
  File "/home/swk/Documents/ML/Detectron/lib/modeling/FPN.py", line 103, in add_fpn_onto_conv_body
  File "/home/swk/Documents/ML/Detectron/lib/modeling/ResNet.py", line 38, in add_ResNet50_conv5_body
  File "/home/swk/Documents/ML/Detectron/lib/modeling/ResNet.py", line 94, in add_ResNet_convX_body
  File "/home/swk/Documents/ML/caffe2/build/caffe2/python/cnn.py", line 112, in Conv
  File "/home/swk/Documents/ML/caffe2/build/caffe2/python/brew.py", line 121, in scope_wrapper
  File "/home/swk/Documents/ML/caffe2/build/caffe2/python/helpers/conv.py", line 201, in conv
  File "/home/swk/Documents/ML/caffe2/build/caffe2/python/helpers/conv.py", line 154, in _ConvBase
