Found Detectron ops lib: /usr/local/lib/libcaffe2_detectron_ops_gpu.so
Found Detectron ops lib: /usr/local/lib/libcaffe2_detectron_ops_gpu.so
INFO train_net.py: 104: Called with args:
INFO train_net.py: 105: Namespace(cfg_file='configs/nuclei/e2e_mask_rcnn_R-50-FPN_1x-lr3e-3-nulei-2.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/tmp/detectron-output-nuclei-r50-2'], skip_test=False)
INFO train_net.py: 111: Training with config:
INFO train_net.py: 112: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'MLP_HEAD_DIM': 1024,
               'ROI_BOX_HEAD': 'fast_rcnn_heads.add_roi_2mlp_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 7,
               'ROI_XFORM_SAMPLING_RATIO': 2},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': True,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 8,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'ZERO_INIT_LATERAL': False},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet50_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': True,
           'NUM_CLASSES': 2,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'MSRAFill',
           'DILATION': 1,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': 'mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 2,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/tmp/detectron-output-nuclei-r50-2',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/home/swk/Documents/ML/Detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.001,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASET': '',
          'DATASETS': ('dsb_2018_val',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.5,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILE': '',
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALES': (600,),
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 512,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('dsb_2018_train',),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 2000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (600,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train_net.py: 205: Building model: generalized_rcnn
WARNING cnn.py:  40: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING memonger.py:  70: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py: 112: Memonger memory optimization took 0.0218708515167 secs
INFO train_net.py: 253: Loading dataset: ('dsb_2018_train',)
loading annotations into memory...
Done (t=0.45s)
creating index...
index created!
INFO roidb.py:  49: Appending horizontally-flipped training examples...
INFO roidb.py:  51: Loaded dataset: dsb_2018_train
INFO roidb.py: 135: Filtered 0 roidb entries: 1072 -> 1072
INFO roidb.py:  67: Computing bounding-box regression targets...
INFO roidb.py:  69: done
INFO train_net.py: 257: 1072 roidb entries
INFO net.py:  57: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  86: fpn_inner_res5_2_sum_w not found
INFO net.py:  86: fpn_inner_res5_2_sum_b not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_b not found
INFO net.py:  86: fpn_res5_2_sum_w not found
INFO net.py:  86: fpn_res5_2_sum_b not found
INFO net.py:  86: fpn_res4_5_sum_w not found
INFO net.py:  86: fpn_res4_5_sum_b not found
INFO net.py:  86: fpn_res3_3_sum_w not found
INFO net.py:  86: fpn_res3_3_sum_b not found
INFO net.py:  86: fpn_res2_2_sum_w not found
INFO net.py:  86: fpn_res2_2_sum_b not found
INFO net.py:  86: conv_rpn_fpn2_w not found
INFO net.py:  86: conv_rpn_fpn2_b not found
INFO net.py:  86: rpn_cls_logits_fpn2_w not found
INFO net.py:  86: rpn_cls_logits_fpn2_b not found
INFO net.py:  86: rpn_bbox_pred_fpn2_w not found
INFO net.py:  86: rpn_bbox_pred_fpn2_b not found
INFO net.py:  86: fc6_w not found
INFO net.py:  86: fc6_b not found
INFO net.py:  86: fc7_w not found
INFO net.py:  86: fc7_b not found
INFO net.py:  86: cls_score_w not found
INFO net.py:  86: cls_score_b not found
INFO net.py:  86: bbox_pred_w not found
INFO net.py:  86: bbox_pred_b not found
INFO net.py:  86: fcn1_w not found
INFO net.py:  86: fcn1_b not found
INFO net.py:  86: fcn2_w not found
INFO net.py:  86: fcn2_b not found
INFO net.py:  86: fcn3_w not found
INFO net.py:  86: fcn3_b not found
INFO net.py:  86: fcn4_w not found
INFO net.py:  86: fcn4_b not found
INFO net.py:  86: conv5_mask_w not found
INFO net.py:  86: conv5_mask_b not found
INFO net.py:  86: mask_fcn_logits_w not found
INFO net.py:  86: mask_fcn_logits_b not found
INFO train_net.py: 241: Outputs saved to: /tmp/detectron-output-nuclei-r50-2/train/dsb_2018_train/generalized_rcnn
INFO loader.py: 227: Pre-filling mini-batch queue...
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [3/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [5/64]
INFO loader.py: 232:   [5/64]
INFO loader.py: 232:   [6/64]
INFO loader.py: 232:   [7/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [11/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [13/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [15/64]
INFO loader.py: 232:   [16/64]
INFO loader.py: 232:   [17/64]
INFO loader.py: 232:   [19/64]
INFO loader.py: 232:   [19/64]
INFO loader.py: 232:   [19/64]
INFO loader.py: 232:   [22/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [24/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [27/64]
INFO loader.py: 232:   [29/64]
INFO loader.py: 232:   [29/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [31/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [33/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [36/64]
INFO loader.py: 232:   [37/64]
INFO loader.py: 232:   [38/64]
INFO loader.py: 232:   [38/64]
INFO loader.py: 232:   [40/64]
INFO loader.py: 232:   [40/64]
INFO loader.py: 232:   [41/64]
INFO loader.py: 232:   [42/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [44/64]
INFO loader.py: 232:   [44/64]
INFO loader.py: 232:   [45/64]
INFO loader.py: 232:   [45/64]
INFO loader.py: 232:   [48/64]
INFO loader.py: 232:   [49/64]
INFO loader.py: 232:   [49/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [51/64]
INFO loader.py: 232:   [51/64]
INFO loader.py: 232:   [52/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [56/64]
INFO loader.py: 232:   [57/64]
INFO loader.py: 232:   [57/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [60/64]
INFO loader.py: 232:   [61/64]
INFO loader.py: 232:   [61/64]
INFO loader.py: 232:   [62/64]
INFO loader.py: 232:   [62/64]
INFO detector.py: 436: Changing learning rate 0.000000 -> 0.000333 at iter 0
INFO net.py: 210: Printing model: generalized_rcnn
INFO net.py: 240: data                        : (2, 3, 608, 608)     => conv1                       : (2, 64, 304, 304)    ------- (op: Conv)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => conv1                       : (2, 64, 304, 304)    ------- (op: AffineChannel)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => conv1                       : (2, 64, 304, 304)    ------- (op: Relu)
INFO net.py: 240: conv1                       : (2, 64, 304, 304)    => pool1                       : (2, 64, 152, 152)    ------- (op: MaxPool)
INFO net.py: 240: pool1                       : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 152, 152)    => res2_0_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch2c             : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: pool1                       : (2, 64, 152, 152)    => res2_0_branch1              : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch1              : (2, 256, 152, 152)   => res2_0_branch1_bn           : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch1_bn           : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_0_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 152, 152)    => res2_1_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_1_branch2c             : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_1_branch2c_bn          : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2a             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2b             : (2, 64, 152, 152)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 152, 152)    => res2_2_branch2c             : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: res2_2_branch2c             : (2, 256, 152, 152)   => res2_2_branch2c_bn          : (2, 256, 152, 152)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2c_bn          : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res2_2_sum                  : (2, 256, 152, 152)   ------- (op: StopGradient)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 76, 76)     => res3_0_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch2c             : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => res3_0_branch1              : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_0_branch1              : (2, 512, 76, 76)     => res3_0_branch1_bn           : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_0_branch1_bn           : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_0_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 76, 76)     => res3_1_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_1_branch2c             : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_1_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 76, 76)     => res3_2_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_2_branch2c             : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_2_branch2c_bn          : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2a             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2b             : (2, 128, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 76, 76)     => res3_3_branch2c             : (2, 512, 76, 76)     ------- (op: Conv)
INFO net.py: 240: res3_3_branch2c             : (2, 512, 76, 76)     => res3_3_branch2c_bn          : (2, 512, 76, 76)     ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2c_bn          : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------- (op: Sum)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res3_3_sum                  : (2, 512, 76, 76)     ------- (op: Relu)
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 38, 38)     => res4_0_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch2c             : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => res4_0_branch1              : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch1              : (2, 1024, 38, 38)    => res4_0_branch1_bn           : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch1_bn           : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_0_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 38, 38)     => res4_1_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_1_branch2c             : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_1_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 38, 38)     => res4_2_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_2_branch2c             : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_2_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 38, 38)     => res4_3_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_3_branch2c             : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_3_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 38, 38)     => res4_4_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_4_branch2c             : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_4_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2a             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2b             : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 38, 38)     => res4_5_branch2c             : (2, 1024, 38, 38)    ------- (op: Conv)
INFO net.py: 240: res4_5_branch2c             : (2, 1024, 38, 38)    => res4_5_branch2c_bn          : (2, 1024, 38, 38)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------- (op: Sum)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------|
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res4_5_sum                  : (2, 1024, 38, 38)    ------- (op: Relu)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 19, 19)     => res5_0_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch2c             : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => res5_0_branch1              : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch1              : (2, 2048, 19, 19)    => res5_0_branch1_bn           : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch1_bn           : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_0_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 19, 19)     => res5_1_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_1_branch2c             : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_1_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2a             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2b             : (2, 512, 19, 19)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 19, 19)     => res5_2_branch2c             : (2, 2048, 19, 19)    ------- (op: Conv)
INFO net.py: 240: res5_2_branch2c             : (2, 2048, 19, 19)    => res5_2_branch2c_bn          : (2, 2048, 19, 19)    ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------- (op: Sum)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------|
INFO net.py: 240: res5_2_sum                  : (2, 2048, 19, 19)    => res5_2_sum                  : (2, 2048, 19, 19)    ------- (op: Relu)
INFO net.py: 240: res5_2_sum                  : (2, 2048, 19, 19)    => fpn_inner_res5_2_sum        : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 38, 38)    => fpn_inner_res4_5_sum_lateral: (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 19, 19)     => fpn_inner_res4_5_sum_topdown: (2, 256, 38, 38)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res4_5_sum_lateral: (2, 256, 38, 38)     => fpn_inner_res4_5_sum        : (2, 256, 38, 38)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res4_5_sum_topdown: (2, 256, 38, 38)     => fpn_inner_res4_5_sum        : (2, 256, 38, 38)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 76, 76)     => fpn_inner_res3_3_sum_lateral: (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 38, 38)     => fpn_inner_res3_3_sum_topdown: (2, 256, 76, 76)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res3_3_sum_lateral: (2, 256, 76, 76)     => fpn_inner_res3_3_sum        : (2, 256, 76, 76)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res3_3_sum_topdown: (2, 256, 76, 76)     => fpn_inner_res3_3_sum        : (2, 256, 76, 76)     ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 152, 152)   => fpn_inner_res2_2_sum_lateral: (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 76, 76)     => fpn_inner_res2_2_sum_topdown: (2, 256, 152, 152)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res2_2_sum_lateral: (2, 256, 152, 152)   => fpn_inner_res2_2_sum        : (2, 256, 152, 152)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res2_2_sum_topdown: (2, 256, 152, 152)   => fpn_inner_res2_2_sum        : (2, 256, 152, 152)   ------|
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 19, 19)     => fpn_res5_2_sum              : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 38, 38)     => fpn_res4_5_sum              : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 76, 76)     => fpn_res3_3_sum              : (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res2_2_sum        : (2, 256, 152, 152)   => fpn_res2_2_sum              : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => fpn_res5_2_sum_subsampled_2x: (2, 256, 10, 10)     ------- (op: MaxPool)
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => conv_rpn_fpn2               : (2, 256, 152, 152)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => conv_rpn_fpn2               : (2, 256, 152, 152)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => rpn_cls_logits_fpn2         : (2, 3, 152, 152)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 152, 152)   => rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => rpn_cls_probs_fpn2          : (2, 3, 152, 152)     ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn2          : (2, 3, 152, 152)     => rpn_rois_fpn2               : (3932, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn2,gpu_0/rpn_bbox_pred_fpn2,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_rois_fpn2               : (3932, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn2               : (3932, 5)            ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => conv_rpn_fpn3               : (2, 256, 76, 76)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => conv_rpn_fpn3               : (2, 256, 76, 76)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => rpn_cls_logits_fpn3         : (2, 3, 76, 76)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 76, 76)     => rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => rpn_cls_probs_fpn3          : (2, 3, 76, 76)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn3          : (2, 3, 76, 76)       => rpn_rois_fpn3               : (4000, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn3,gpu_0/rpn_bbox_pred_fpn3,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_rois_fpn3               : (4000, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn3               : (4000, 5)            ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => conv_rpn_fpn4               : (2, 256, 38, 38)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => conv_rpn_fpn4               : (2, 256, 38, 38)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => rpn_cls_logits_fpn4         : (2, 3, 38, 38)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 38, 38)     => rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => rpn_cls_probs_fpn4          : (2, 3, 38, 38)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn4          : (2, 3, 38, 38)       => rpn_rois_fpn4               : (3981, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn4,gpu_0/rpn_bbox_pred_fpn4,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_rois_fpn4               : (3981, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn4               : (3981, 5)            ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => conv_rpn_fpn5               : (2, 256, 19, 19)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => conv_rpn_fpn5               : (2, 256, 19, 19)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => rpn_cls_logits_fpn5         : (2, 3, 19, 19)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 19, 19)     => rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => rpn_cls_probs_fpn5          : (2, 3, 19, 19)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn5          : (2, 3, 19, 19)       => rpn_rois_fpn5               : (2126, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn5,gpu_0/rpn_bbox_pred_fpn5,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_rois_fpn5               : (2126, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn5               : (2126, 5)            ------|
INFO net.py: 240: fpn_res5_2_sum_subsampled_2x: (2, 256, 10, 10)     => conv_rpn_fpn6               : (2, 256, 10, 10)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 10, 10)     => conv_rpn_fpn6               : (2, 256, 10, 10)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 10, 10)     => rpn_cls_logits_fpn6         : (2, 3, 10, 10)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 10, 10)     => rpn_bbox_pred_fpn6          : (2, 12, 10, 10)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 10, 10)       => rpn_cls_probs_fpn6          : (2, 3, 10, 10)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn6          : (2, 3, 10, 10)       => rpn_rois_fpn6               : (571, 5)             ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn6,gpu_0/rpn_bbox_pred_fpn6,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 10, 10)      => rpn_rois_fpn6               : (571, 5)             ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn6               : (571, 5)             ------|
INFO net.py: 240: rpn_rois_fpn2               : (3932, 5)            => rois                        : (1024, 5)            ------- (op: Python:CollectAndDistributeFpnRpnProposalsOp:gpu_0/rpn_rois_fpn2,gpu_0/rpn_rois_fpn3,gpu_0/rpn_rois_fpn4,gpu_0/rpn_rois_fpn5,gpu_0/rpn_rois_fpn6,gpu_0/rpn_roi_probs_fpn2,gpu_0/rpn_roi_probs_fpn3,gpu_0/rpn_roi_probs_fpn4,gpu_0/rpn_roi_probs_fpn5,gpu_0/rpn_roi_probs_fpn6,gpu_0/roidb,gpu_0/im_info)
INFO net.py: 240: rpn_rois_fpn3               : (4000, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn4               : (3981, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn5               : (2126, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn6               : (571, 5)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn2          : (3932, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn3          : (4000, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn4          : (3981, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn5          : (2126, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn6          : (571, 1)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: roidb                       : (25072,)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn2  : (2, 3, 336, 336)     => rpn_labels_int32_fpn2       : (2, 3, 152, 152)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => rpn_labels_int32_fpn2       : (2, 3, 152, 152)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn2  : (2, 12, 336, 336)    => rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    ------|
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 152, 152)     => loss_rpn_cls_fpn2           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn2       : (2, 3, 152, 152)     => loss_rpn_cls_fpn2           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn2       : (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn2: (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn2: (2, 12, 152, 152)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn3  : (2, 3, 168, 168)     => rpn_labels_int32_fpn3       : (2, 3, 76, 76)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => rpn_labels_int32_fpn3       : (2, 3, 76, 76)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn3  : (2, 12, 168, 168)    => rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      ------|
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 76, 76)       => loss_rpn_cls_fpn3           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn3       : (2, 3, 76, 76)       => loss_rpn_cls_fpn3           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn3       : (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn3: (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn3: (2, 12, 76, 76)      => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn4  : (2, 3, 84, 84)       => rpn_labels_int32_fpn4       : (2, 3, 38, 38)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => rpn_labels_int32_fpn4       : (2, 3, 38, 38)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn4  : (2, 12, 84, 84)      => rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      ------|
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 38, 38)       => loss_rpn_cls_fpn4           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn4       : (2, 3, 38, 38)       => loss_rpn_cls_fpn4           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn4       : (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn4: (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn4: (2, 12, 38, 38)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn5  : (2, 3, 42, 42)       => rpn_labels_int32_fpn5       : (2, 3, 19, 19)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => rpn_labels_int32_fpn5       : (2, 3, 19, 19)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn5  : (2, 12, 42, 42)      => rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      ------|
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 19, 19)       => loss_rpn_cls_fpn5           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn5       : (2, 3, 19, 19)       => loss_rpn_cls_fpn5           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn5       : (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn5: (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn5: (2, 12, 19, 19)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn6  : (2, 3, 21, 21)       => rpn_labels_int32_fpn6       : (2, 3, 10, 10)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 10, 10)       => rpn_labels_int32_fpn6       : (2, 3, 10, 10)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn6  : (2, 12, 21, 21)      => rpn_bbox_targets_fpn6       : (2, 12, 10, 10)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 10, 10)      => rpn_bbox_targets_fpn6       : (2, 12, 10, 10)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn6: (2, 12, 21, 21)      => rpn_bbox_inside_weights_fpn6: (2, 12, 10, 10)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 10, 10)      => rpn_bbox_inside_weights_fpn6: (2, 12, 10, 10)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn6: (2, 12, 21, 21)      => rpn_bbox_outside_weights_fpn6: (2, 12, 10, 10)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 10, 10)      => rpn_bbox_outside_weights_fpn6: (2, 12, 10, 10)      ------|
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 10, 10)       => loss_rpn_cls_fpn6           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn6       : (2, 3, 10, 10)       => loss_rpn_cls_fpn6           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 10, 10)      => loss_rpn_bbox_fpn6          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn6       : (2, 12, 10, 10)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn6: (2, 12, 10, 10)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn6: (2, 12, 10, 10)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => roi_feat_fpn2               : (1024, 256, 7, 7)    ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn2                   : (1024, 5)            => roi_feat_fpn2               : (1024, 256, 7, 7)    ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => roi_feat_fpn3               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn3                   : (0, 5)               => roi_feat_fpn3               : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => roi_feat_fpn4               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn4                   : (0, 5)               => roi_feat_fpn4               : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => roi_feat_fpn5               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn5                   : (0, 5)               => roi_feat_fpn5               : (0, 256, 7, 7)       ------|
INFO net.py: 240: roi_feat_fpn2               : (1024, 256, 7, 7)    => roi_feat_shuffled           : (1024, 256, 7, 7)    ------- (op: Concat)
INFO net.py: 240: roi_feat_fpn3               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn4               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn5               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_shuffled           : (1024, 256, 7, 7)    => roi_feat                    : (1024, 256, 7, 7)    ------- (op: BatchPermutation)
INFO net.py: 240: rois_idx_restore_int32      : (1024,)              => roi_feat                    : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat                    : (1024, 256, 7, 7)    => fc6                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc6                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc7                         : (1024, 1024)         => cls_score                   : (1024, 2)            ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => bbox_pred                   : (1024, 8)            ------- (op: FC)
INFO net.py: 240: cls_score                   : (1024, 2)            => cls_prob                    : (1024, 2)            ------- (op: SoftmaxWithLoss)
INFO net.py: 240: labels_int32                : (1024,)              => cls_prob                    : (1024, 2)            ------|
INFO net.py: 240: bbox_pred                   : (1024, 8)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: bbox_targets                : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_inside_weights         : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_outside_weights        : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: cls_prob                    : (1024, 2)            => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 240: labels_int32                : (1024,)              => accuracy_cls                : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 152, 152)   => _[mask]_roi_feat_fpn2       : (39, 256, 7, 7)      ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn2              : (39, 5)              => _[mask]_roi_feat_fpn2       : (39, 256, 7, 7)      ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 76, 76)     => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn3              : (0, 5)               => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 38, 38)     => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn4              : (0, 5)               => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 19, 19)     => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn5              : (0, 5)               => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------|
INFO net.py: 240: _[mask]_roi_feat_fpn2       : (39, 256, 7, 7)      => _[mask]_roi_feat_shuffled   : (39, 256, 7, 7)      ------- (op: Concat)
INFO net.py: 240: _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (39, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (39, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (39, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_shuffled   : (39, 256, 7, 7)      => _[mask]_roi_feat            : (39, 256, 7, 7)      ------- (op: BatchPermutation)
INFO net.py: 240: mask_rois_idx_restore_int32 : (39,)                => _[mask]_roi_feat            : (39, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat            : (39, 256, 7, 7)      => _[mask]_fcn1                : (39, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn1                : (39, 256, 7, 7)      => _[mask]_fcn1                : (39, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn1                : (39, 256, 7, 7)      => _[mask]_fcn2                : (39, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn2                : (39, 256, 7, 7)      => _[mask]_fcn2                : (39, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn2                : (39, 256, 7, 7)      => _[mask]_fcn3                : (39, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn3                : (39, 256, 7, 7)      => _[mask]_fcn3                : (39, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn3                : (39, 256, 7, 7)      => _[mask]_fcn4                : (39, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn4                : (39, 256, 7, 7)      => _[mask]_fcn4                : (39, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn4                : (39, 256, 7, 7)      => conv5_mask                  : (39, 256, 14, 14)    ------- (op: ConvTranspose)
INFO net.py: 240: conv5_mask                  : (39, 256, 14, 14)    => conv5_mask                  : (39, 256, 14, 14)    ------- (op: Relu)
INFO net.py: 240: conv5_mask                  : (39, 256, 14, 14)    => mask_fcn_logits             : (39, 2, 14, 14)      ------- (op: Conv)
INFO net.py: 240: mask_fcn_logits             : (39, 2, 14, 14)      => loss_mask                   : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: masks_int32                 : (39, 392)            => loss_mask                   : ()                   ------|
INFO net.py: 244: End of model: generalized_rcnn
json_stats: {"accuracy_cls": 0.667969, "eta": "3 days, 21:48:30", "iter": 0, "loss": 4.041986, "loss_bbox": 0.005007, "loss_cls": 0.635787, "loss_mask": 2.700973, "loss_rpn_bbox_fpn2": 0.002142, "loss_rpn_bbox_fpn3": 0.005793, "loss_rpn_bbox_fpn4": 0.036628, "loss_rpn_bbox_fpn5": 0.004783, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.453103, "loss_rpn_cls_fpn3": 0.115822, "loss_rpn_cls_fpn4": 0.064398, "loss_rpn_cls_fpn5": 0.013651, "loss_rpn_cls_fpn6": 0.003899, "lr": 0.000333, "mb_qsize": 64, "mem": 3406, "time": 3.752334}
json_stats: {"accuracy_cls": 0.907715, "eta": "11:47:24", "iter": 20, "loss": 2.365201, "loss_bbox": 0.025263, "loss_cls": 0.297264, "loss_mask": 1.054937, "loss_rpn_bbox_fpn2": 0.012529, "loss_rpn_bbox_fpn3": 0.018799, "loss_rpn_bbox_fpn4": 0.042589, "loss_rpn_bbox_fpn5": 0.005878, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.348830, "loss_rpn_cls_fpn3": 0.116532, "loss_rpn_cls_fpn4": 0.081796, "loss_rpn_cls_fpn5": 0.013556, "loss_rpn_cls_fpn6": 0.000608, "lr": 0.000360, "mb_qsize": 64, "mem": 4286, "time": 0.471712}
json_stats: {"accuracy_cls": 0.930176, "eta": "7:02:42", "iter": 40, "loss": 1.242599, "loss_bbox": 0.070567, "loss_cls": 0.174080, "loss_mask": 0.532873, "loss_rpn_bbox_fpn2": 0.002973, "loss_rpn_bbox_fpn3": 0.010717, "loss_rpn_bbox_fpn4": 0.029765, "loss_rpn_bbox_fpn5": 0.011752, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.183698, "loss_rpn_cls_fpn3": 0.102921, "loss_rpn_cls_fpn4": 0.066571, "loss_rpn_cls_fpn5": 0.020132, "loss_rpn_cls_fpn6": 0.002724, "lr": 0.000387, "mb_qsize": 64, "mem": 4299, "time": 0.281930}
json_stats: {"accuracy_cls": 0.931152, "eta": "7:08:23", "iter": 60, "loss": 1.268052, "loss_bbox": 0.085407, "loss_cls": 0.174252, "loss_mask": 0.543181, "loss_rpn_bbox_fpn2": 0.004068, "loss_rpn_bbox_fpn3": 0.013843, "loss_rpn_bbox_fpn4": 0.026381, "loss_rpn_bbox_fpn5": 0.012001, "loss_rpn_bbox_fpn6": 0.002332, "loss_rpn_cls_fpn2": 0.053983, "loss_rpn_cls_fpn3": 0.077337, "loss_rpn_cls_fpn4": 0.055163, "loss_rpn_cls_fpn5": 0.020665, "loss_rpn_cls_fpn6": 0.004291, "lr": 0.000413, "mb_qsize": 64, "mem": 4301, "time": 0.285787}
json_stats: {"accuracy_cls": 0.921012, "eta": "7:08:30", "iter": 80, "loss": 1.054717, "loss_bbox": 0.080942, "loss_cls": 0.194770, "loss_mask": 0.446046, "loss_rpn_bbox_fpn2": 0.004944, "loss_rpn_bbox_fpn3": 0.010589, "loss_rpn_bbox_fpn4": 0.034554, "loss_rpn_bbox_fpn5": 0.012311, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.034350, "loss_rpn_cls_fpn3": 0.056947, "loss_rpn_cls_fpn4": 0.070013, "loss_rpn_cls_fpn5": 0.021123, "loss_rpn_cls_fpn6": 0.002507, "lr": 0.000440, "mb_qsize": 64, "mem": 4301, "time": 0.285926}
json_stats: {"accuracy_cls": 0.922363, "eta": "7:07:36", "iter": 100, "loss": 1.030852, "loss_bbox": 0.078843, "loss_cls": 0.171399, "loss_mask": 0.414969, "loss_rpn_bbox_fpn2": 0.002150, "loss_rpn_bbox_fpn3": 0.010800, "loss_rpn_bbox_fpn4": 0.030645, "loss_rpn_bbox_fpn5": 0.010363, "loss_rpn_bbox_fpn6": 0.000434, "loss_rpn_cls_fpn2": 0.031462, "loss_rpn_cls_fpn3": 0.053111, "loss_rpn_cls_fpn4": 0.068437, "loss_rpn_cls_fpn5": 0.019756, "loss_rpn_cls_fpn6": 0.001426, "lr": 0.000467, "mb_qsize": 64, "mem": 4301, "time": 0.285386}
json_stats: {"accuracy_cls": 0.953125, "eta": "7:08:02", "iter": 120, "loss": 0.842675, "loss_bbox": 0.064924, "loss_cls": 0.158814, "loss_mask": 0.318493, "loss_rpn_bbox_fpn2": 0.004102, "loss_rpn_bbox_fpn3": 0.010637, "loss_rpn_bbox_fpn4": 0.027471, "loss_rpn_bbox_fpn5": 0.019585, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.033207, "loss_rpn_cls_fpn3": 0.044640, "loss_rpn_cls_fpn4": 0.064340, "loss_rpn_cls_fpn5": 0.026895, "loss_rpn_cls_fpn6": 0.001328, "lr": 0.000493, "mb_qsize": 64, "mem": 4301, "time": 0.285740}
json_stats: {"accuracy_cls": 0.950195, "eta": "7:04:45", "iter": 140, "loss": 0.864919, "loss_bbox": 0.047313, "loss_cls": 0.127862, "loss_mask": 0.365907, "loss_rpn_bbox_fpn2": 0.008550, "loss_rpn_bbox_fpn3": 0.020137, "loss_rpn_bbox_fpn4": 0.023592, "loss_rpn_bbox_fpn5": 0.009734, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.039381, "loss_rpn_cls_fpn3": 0.065623, "loss_rpn_cls_fpn4": 0.052098, "loss_rpn_cls_fpn5": 0.018438, "loss_rpn_cls_fpn6": 0.002486, "lr": 0.000520, "mb_qsize": 64, "mem": 4305, "time": 0.283610}
json_stats: {"accuracy_cls": 0.938477, "eta": "7:10:08", "iter": 160, "loss": 0.916344, "loss_bbox": 0.069949, "loss_cls": 0.156880, "loss_mask": 0.384485, "loss_rpn_bbox_fpn2": 0.003848, "loss_rpn_bbox_fpn3": 0.017964, "loss_rpn_bbox_fpn4": 0.036359, "loss_rpn_bbox_fpn5": 0.016618, "loss_rpn_bbox_fpn6": 0.001337, "loss_rpn_cls_fpn2": 0.032296, "loss_rpn_cls_fpn3": 0.054089, "loss_rpn_cls_fpn4": 0.063244, "loss_rpn_cls_fpn5": 0.030711, "loss_rpn_cls_fpn6": 0.003400, "lr": 0.000547, "mb_qsize": 64, "mem": 5826, "time": 0.287273}
json_stats: {"accuracy_cls": 0.952637, "eta": "7:09:14", "iter": 180, "loss": 0.775072, "loss_bbox": 0.046272, "loss_cls": 0.123458, "loss_mask": 0.335272, "loss_rpn_bbox_fpn2": 0.006168, "loss_rpn_bbox_fpn3": 0.007149, "loss_rpn_bbox_fpn4": 0.021202, "loss_rpn_bbox_fpn5": 0.013853, "loss_rpn_bbox_fpn6": 0.003963, "loss_rpn_cls_fpn2": 0.039328, "loss_rpn_cls_fpn3": 0.037632, "loss_rpn_cls_fpn4": 0.056350, "loss_rpn_cls_fpn5": 0.018927, "loss_rpn_cls_fpn6": 0.005753, "lr": 0.000573, "mb_qsize": 64, "mem": 5826, "time": 0.286732}
json_stats: {"accuracy_cls": 0.949707, "eta": "7:09:28", "iter": 200, "loss": 0.762228, "loss_bbox": 0.065156, "loss_cls": 0.130424, "loss_mask": 0.295259, "loss_rpn_bbox_fpn2": 0.001117, "loss_rpn_bbox_fpn3": 0.010507, "loss_rpn_bbox_fpn4": 0.024567, "loss_rpn_bbox_fpn5": 0.012283, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.015423, "loss_rpn_cls_fpn3": 0.036599, "loss_rpn_cls_fpn4": 0.055184, "loss_rpn_cls_fpn5": 0.023457, "loss_rpn_cls_fpn6": 0.002640, "lr": 0.000600, "mb_qsize": 64, "mem": 5826, "time": 0.286956}
json_stats: {"accuracy_cls": 0.959961, "eta": "7:06:37", "iter": 220, "loss": 0.703560, "loss_bbox": 0.046123, "loss_cls": 0.114091, "loss_mask": 0.299970, "loss_rpn_bbox_fpn2": 0.004302, "loss_rpn_bbox_fpn3": 0.009002, "loss_rpn_bbox_fpn4": 0.020119, "loss_rpn_bbox_fpn5": 0.015225, "loss_rpn_bbox_fpn6": 0.001321, "loss_rpn_cls_fpn2": 0.032223, "loss_rpn_cls_fpn3": 0.031367, "loss_rpn_cls_fpn4": 0.044234, "loss_rpn_cls_fpn5": 0.025346, "loss_rpn_cls_fpn6": 0.004386, "lr": 0.000627, "mb_qsize": 64, "mem": 5833, "time": 0.285114}
json_stats: {"accuracy_cls": 0.939453, "eta": "7:06:00", "iter": 240, "loss": 0.752677, "loss_bbox": 0.095264, "loss_cls": 0.141329, "loss_mask": 0.298717, "loss_rpn_bbox_fpn2": 0.003874, "loss_rpn_bbox_fpn3": 0.009902, "loss_rpn_bbox_fpn4": 0.021687, "loss_rpn_bbox_fpn5": 0.008055, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.022234, "loss_rpn_cls_fpn3": 0.035925, "loss_rpn_cls_fpn4": 0.049179, "loss_rpn_cls_fpn5": 0.016143, "loss_rpn_cls_fpn6": 0.002666, "lr": 0.000653, "mb_qsize": 64, "mem": 5833, "time": 0.284764}
json_stats: {"accuracy_cls": 0.924316, "eta": "7:08:01", "iter": 260, "loss": 0.843184, "loss_bbox": 0.082749, "loss_cls": 0.174584, "loss_mask": 0.331621, "loss_rpn_bbox_fpn2": 0.012433, "loss_rpn_bbox_fpn3": 0.010700, "loss_rpn_bbox_fpn4": 0.028400, "loss_rpn_bbox_fpn5": 0.016565, "loss_rpn_bbox_fpn6": 0.001580, "loss_rpn_cls_fpn2": 0.047469, "loss_rpn_cls_fpn3": 0.041615, "loss_rpn_cls_fpn4": 0.051830, "loss_rpn_cls_fpn5": 0.025227, "loss_rpn_cls_fpn6": 0.003973, "lr": 0.000680, "mb_qsize": 64, "mem": 5842, "time": 0.286172}
json_stats: {"accuracy_cls": 0.939697, "eta": "7:07:10", "iter": 280, "loss": 0.833629, "loss_bbox": 0.102287, "loss_cls": 0.152810, "loss_mask": 0.292258, "loss_rpn_bbox_fpn2": 0.006167, "loss_rpn_bbox_fpn3": 0.009051, "loss_rpn_bbox_fpn4": 0.020827, "loss_rpn_bbox_fpn5": 0.010868, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.030641, "loss_rpn_cls_fpn3": 0.032325, "loss_rpn_cls_fpn4": 0.035644, "loss_rpn_cls_fpn5": 0.021027, "loss_rpn_cls_fpn6": 0.002663, "lr": 0.000707, "mb_qsize": 64, "mem": 5842, "time": 0.285671}
json_stats: {"accuracy_cls": 0.920898, "eta": "7:06:58", "iter": 300, "loss": 0.986358, "loss_bbox": 0.105689, "loss_cls": 0.198364, "loss_mask": 0.304066, "loss_rpn_bbox_fpn2": 0.004343, "loss_rpn_bbox_fpn3": 0.012279, "loss_rpn_bbox_fpn4": 0.032393, "loss_rpn_bbox_fpn5": 0.017278, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.023962, "loss_rpn_cls_fpn3": 0.039880, "loss_rpn_cls_fpn4": 0.047575, "loss_rpn_cls_fpn5": 0.025136, "loss_rpn_cls_fpn6": 0.002527, "lr": 0.000733, "mb_qsize": 64, "mem": 5849, "time": 0.285597}
json_stats: {"accuracy_cls": 0.936035, "eta": "7:08:31", "iter": 320, "loss": 0.833830, "loss_bbox": 0.099397, "loss_cls": 0.169173, "loss_mask": 0.340957, "loss_rpn_bbox_fpn2": 0.003949, "loss_rpn_bbox_fpn3": 0.007732, "loss_rpn_bbox_fpn4": 0.020361, "loss_rpn_bbox_fpn5": 0.017657, "loss_rpn_bbox_fpn6": 0.000607, "loss_rpn_cls_fpn2": 0.020099, "loss_rpn_cls_fpn3": 0.033397, "loss_rpn_cls_fpn4": 0.030608, "loss_rpn_cls_fpn5": 0.027753, "loss_rpn_cls_fpn6": 0.002899, "lr": 0.000760, "mb_qsize": 64, "mem": 5849, "time": 0.286706}
json_stats: {"accuracy_cls": 0.918216, "eta": "7:10:57", "iter": 340, "loss": 0.849969, "loss_bbox": 0.182912, "loss_cls": 0.196309, "loss_mask": 0.294160, "loss_rpn_bbox_fpn2": 0.003985, "loss_rpn_bbox_fpn3": 0.014076, "loss_rpn_bbox_fpn4": 0.028483, "loss_rpn_bbox_fpn5": 0.017647, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.020357, "loss_rpn_cls_fpn3": 0.033125, "loss_rpn_cls_fpn4": 0.039312, "loss_rpn_cls_fpn5": 0.030818, "loss_rpn_cls_fpn6": 0.001156, "lr": 0.000787, "mb_qsize": 64, "mem": 5855, "time": 0.288395}
json_stats: {"accuracy_cls": 0.885370, "eta": "7:13:32", "iter": 360, "loss": 1.051567, "loss_bbox": 0.192661, "loss_cls": 0.269957, "loss_mask": 0.313385, "loss_rpn_bbox_fpn2": 0.008375, "loss_rpn_bbox_fpn3": 0.015429, "loss_rpn_bbox_fpn4": 0.047049, "loss_rpn_bbox_fpn5": 0.014533, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.031693, "loss_rpn_cls_fpn3": 0.049430, "loss_rpn_cls_fpn4": 0.056634, "loss_rpn_cls_fpn5": 0.024623, "loss_rpn_cls_fpn6": 0.001163, "lr": 0.000813, "mb_qsize": 64, "mem": 5856, "time": 0.290192}
json_stats: {"accuracy_cls": 0.910156, "eta": "7:13:26", "iter": 380, "loss": 0.886401, "loss_bbox": 0.139980, "loss_cls": 0.223223, "loss_mask": 0.287147, "loss_rpn_bbox_fpn2": 0.002352, "loss_rpn_bbox_fpn3": 0.012868, "loss_rpn_bbox_fpn4": 0.025258, "loss_rpn_bbox_fpn5": 0.008750, "loss_rpn_bbox_fpn6": 0.000817, "loss_rpn_cls_fpn2": 0.019834, "loss_rpn_cls_fpn3": 0.034615, "loss_rpn_cls_fpn4": 0.034461, "loss_rpn_cls_fpn5": 0.015543, "loss_rpn_cls_fpn6": 0.001415, "lr": 0.000840, "mb_qsize": 64, "mem": 5862, "time": 0.290183}
json_stats: {"accuracy_cls": 0.904680, "eta": "7:13:44", "iter": 400, "loss": 0.911681, "loss_bbox": 0.160614, "loss_cls": 0.223023, "loss_mask": 0.255638, "loss_rpn_bbox_fpn2": 0.003381, "loss_rpn_bbox_fpn3": 0.024994, "loss_rpn_bbox_fpn4": 0.030423, "loss_rpn_bbox_fpn5": 0.009216, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.022931, "loss_rpn_cls_fpn3": 0.050003, "loss_rpn_cls_fpn4": 0.039195, "loss_rpn_cls_fpn5": 0.014490, "loss_rpn_cls_fpn6": 0.000630, "lr": 0.000867, "mb_qsize": 64, "mem": 5868, "time": 0.290450}
json_stats: {"accuracy_cls": 0.899414, "eta": "7:14:06", "iter": 420, "loss": 0.900078, "loss_bbox": 0.170136, "loss_cls": 0.225469, "loss_mask": 0.235811, "loss_rpn_bbox_fpn2": 0.007569, "loss_rpn_bbox_fpn3": 0.019342, "loss_rpn_bbox_fpn4": 0.033614, "loss_rpn_bbox_fpn5": 0.009340, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.024466, "loss_rpn_cls_fpn3": 0.037901, "loss_rpn_cls_fpn4": 0.034131, "loss_rpn_cls_fpn5": 0.015058, "loss_rpn_cls_fpn6": 0.001362, "lr": 0.000893, "mb_qsize": 64, "mem": 5876, "time": 0.290758}
json_stats: {"accuracy_cls": 0.902634, "eta": "7:14:29", "iter": 440, "loss": 0.918963, "loss_bbox": 0.152040, "loss_cls": 0.237054, "loss_mask": 0.269336, "loss_rpn_bbox_fpn2": 0.003846, "loss_rpn_bbox_fpn3": 0.009418, "loss_rpn_bbox_fpn4": 0.032442, "loss_rpn_bbox_fpn5": 0.012132, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.023614, "loss_rpn_cls_fpn3": 0.030856, "loss_rpn_cls_fpn4": 0.040996, "loss_rpn_cls_fpn5": 0.020094, "loss_rpn_cls_fpn6": 0.002554, "lr": 0.000920, "mb_qsize": 64, "mem": 5877, "time": 0.291083}
json_stats: {"accuracy_cls": 0.888179, "eta": "7:14:47", "iter": 460, "loss": 0.868085, "loss_bbox": 0.156451, "loss_cls": 0.256706, "loss_mask": 0.255571, "loss_rpn_bbox_fpn2": 0.006780, "loss_rpn_bbox_fpn3": 0.011182, "loss_rpn_bbox_fpn4": 0.014320, "loss_rpn_bbox_fpn5": 0.013500, "loss_rpn_bbox_fpn6": 0.000482, "loss_rpn_cls_fpn2": 0.021436, "loss_rpn_cls_fpn3": 0.031822, "loss_rpn_cls_fpn4": 0.032148, "loss_rpn_cls_fpn5": 0.021701, "loss_rpn_cls_fpn6": 0.002110, "lr": 0.000947, "mb_qsize": 64, "mem": 5877, "time": 0.291345}
json_stats: {"accuracy_cls": 0.884277, "eta": "7:13:24", "iter": 480, "loss": 0.918415, "loss_bbox": 0.192258, "loss_cls": 0.259984, "loss_mask": 0.218238, "loss_rpn_bbox_fpn2": 0.005412, "loss_rpn_bbox_fpn3": 0.007173, "loss_rpn_bbox_fpn4": 0.028744, "loss_rpn_bbox_fpn5": 0.011424, "loss_rpn_bbox_fpn6": 0.001700, "loss_rpn_cls_fpn2": 0.020112, "loss_rpn_cls_fpn3": 0.022969, "loss_rpn_cls_fpn4": 0.030082, "loss_rpn_cls_fpn5": 0.016622, "loss_rpn_cls_fpn6": 0.002691, "lr": 0.000973, "mb_qsize": 64, "mem": 5877, "time": 0.290493}
json_stats: {"accuracy_cls": 0.890625, "eta": "7:13:54", "iter": 500, "loss": 0.896273, "loss_bbox": 0.153449, "loss_cls": 0.239365, "loss_mask": 0.278837, "loss_rpn_bbox_fpn2": 0.006064, "loss_rpn_bbox_fpn3": 0.014538, "loss_rpn_bbox_fpn4": 0.013532, "loss_rpn_bbox_fpn5": 0.008777, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.020416, "loss_rpn_cls_fpn3": 0.030265, "loss_rpn_cls_fpn4": 0.022981, "loss_rpn_cls_fpn5": 0.016660, "loss_rpn_cls_fpn6": 0.000000, "lr": 0.001000, "mb_qsize": 64, "mem": 5877, "time": 0.290892}
json_stats: {"accuracy_cls": 0.871480, "eta": "7:15:26", "iter": 520, "loss": 0.931028, "loss_bbox": 0.210088, "loss_cls": 0.284317, "loss_mask": 0.238747, "loss_rpn_bbox_fpn2": 0.006657, "loss_rpn_bbox_fpn3": 0.010893, "loss_rpn_bbox_fpn4": 0.027149, "loss_rpn_bbox_fpn5": 0.008920, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.022931, "loss_rpn_cls_fpn3": 0.024069, "loss_rpn_cls_fpn4": 0.031567, "loss_rpn_cls_fpn5": 0.016927, "loss_rpn_cls_fpn6": 0.000876, "lr": 0.001000, "mb_qsize": 64, "mem": 5877, "time": 0.291986}
json_stats: {"accuracy_cls": 0.886451, "eta": "7:15:50", "iter": 540, "loss": 0.951465, "loss_bbox": 0.168009, "loss_cls": 0.288013, "loss_mask": 0.289691, "loss_rpn_bbox_fpn2": 0.004891, "loss_rpn_bbox_fpn3": 0.010930, "loss_rpn_bbox_fpn4": 0.011948, "loss_rpn_bbox_fpn5": 0.006347, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.013511, "loss_rpn_cls_fpn3": 0.025949, "loss_rpn_cls_fpn4": 0.020419, "loss_rpn_cls_fpn5": 0.011549, "loss_rpn_cls_fpn6": 0.001784, "lr": 0.001000, "mb_qsize": 64, "mem": 5878, "time": 0.292316}
json_stats: {"accuracy_cls": 0.901367, "eta": "7:15:55", "iter": 560, "loss": 0.860621, "loss_bbox": 0.179027, "loss_cls": 0.242287, "loss_mask": 0.223531, "loss_rpn_bbox_fpn2": 0.004764, "loss_rpn_bbox_fpn3": 0.009077, "loss_rpn_bbox_fpn4": 0.027593, "loss_rpn_bbox_fpn5": 0.011951, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.014897, "loss_rpn_cls_fpn3": 0.024849, "loss_rpn_cls_fpn4": 0.031145, "loss_rpn_cls_fpn5": 0.015834, "loss_rpn_cls_fpn6": 0.001924, "lr": 0.001000, "mb_qsize": 64, "mem": 5878, "time": 0.292432}
json_stats: {"accuracy_cls": 0.877448, "eta": "7:15:53", "iter": 580, "loss": 0.993688, "loss_bbox": 0.216913, "loss_cls": 0.275364, "loss_mask": 0.272646, "loss_rpn_bbox_fpn2": 0.005783, "loss_rpn_bbox_fpn3": 0.012311, "loss_rpn_bbox_fpn4": 0.017286, "loss_rpn_bbox_fpn5": 0.020236, "loss_rpn_bbox_fpn6": 0.000605, "loss_rpn_cls_fpn2": 0.026972, "loss_rpn_cls_fpn3": 0.026056, "loss_rpn_cls_fpn4": 0.027752, "loss_rpn_cls_fpn5": 0.022187, "loss_rpn_cls_fpn6": 0.003140, "lr": 0.001000, "mb_qsize": 64, "mem": 5878, "time": 0.292477}
json_stats: {"accuracy_cls": 0.883789, "eta": "7:16:59", "iter": 600, "loss": 0.896241, "loss_bbox": 0.195107, "loss_cls": 0.265174, "loss_mask": 0.243267, "loss_rpn_bbox_fpn2": 0.005505, "loss_rpn_bbox_fpn3": 0.013736, "loss_rpn_bbox_fpn4": 0.045682, "loss_rpn_bbox_fpn5": 0.015410, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.022006, "loss_rpn_cls_fpn3": 0.027760, "loss_rpn_cls_fpn4": 0.028336, "loss_rpn_cls_fpn5": 0.013593, "loss_rpn_cls_fpn6": 0.001280, "lr": 0.001000, "mb_qsize": 64, "mem": 5878, "time": 0.293281}
json_stats: {"accuracy_cls": 0.893537, "eta": "7:16:54", "iter": 620, "loss": 0.744144, "loss_bbox": 0.213959, "loss_cls": 0.250001, "loss_mask": 0.200525, "loss_rpn_bbox_fpn2": 0.004123, "loss_rpn_bbox_fpn3": 0.009192, "loss_rpn_bbox_fpn4": 0.017031, "loss_rpn_bbox_fpn5": 0.008200, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011169, "loss_rpn_cls_fpn3": 0.014610, "loss_rpn_cls_fpn4": 0.013907, "loss_rpn_cls_fpn5": 0.010176, "loss_rpn_cls_fpn6": 0.001784, "lr": 0.001000, "mb_qsize": 64, "mem": 5878, "time": 0.293292}
json_stats: {"accuracy_cls": 0.893363, "eta": "7:17:05", "iter": 640, "loss": 0.908604, "loss_bbox": 0.221634, "loss_cls": 0.267269, "loss_mask": 0.238151, "loss_rpn_bbox_fpn2": 0.001851, "loss_rpn_bbox_fpn3": 0.009693, "loss_rpn_bbox_fpn4": 0.016700, "loss_rpn_bbox_fpn5": 0.009015, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.015796, "loss_rpn_cls_fpn3": 0.024939, "loss_rpn_cls_fpn4": 0.026528, "loss_rpn_cls_fpn5": 0.010673, "loss_rpn_cls_fpn6": 0.002131, "lr": 0.001000, "mb_qsize": 64, "mem": 5878, "time": 0.293477}
json_stats: {"accuracy_cls": 0.878313, "eta": "7:17:05", "iter": 660, "loss": 0.951224, "loss_bbox": 0.228030, "loss_cls": 0.288960, "loss_mask": 0.251674, "loss_rpn_bbox_fpn2": 0.004926, "loss_rpn_bbox_fpn3": 0.010377, "loss_rpn_bbox_fpn4": 0.030786, "loss_rpn_bbox_fpn5": 0.016467, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.016791, "loss_rpn_cls_fpn3": 0.024026, "loss_rpn_cls_fpn4": 0.024644, "loss_rpn_cls_fpn5": 0.012859, "loss_rpn_cls_fpn6": 0.002716, "lr": 0.001000, "mb_qsize": 64, "mem": 5884, "time": 0.293542}
json_stats: {"accuracy_cls": 0.874512, "eta": "7:17:19", "iter": 680, "loss": 0.936341, "loss_bbox": 0.252365, "loss_cls": 0.280524, "loss_mask": 0.277031, "loss_rpn_bbox_fpn2": 0.005770, "loss_rpn_bbox_fpn3": 0.009562, "loss_rpn_bbox_fpn4": 0.019182, "loss_rpn_bbox_fpn5": 0.014607, "loss_rpn_bbox_fpn6": 0.000255, "loss_rpn_cls_fpn2": 0.012872, "loss_rpn_cls_fpn3": 0.015760, "loss_rpn_cls_fpn4": 0.021169, "loss_rpn_cls_fpn5": 0.009507, "loss_rpn_cls_fpn6": 0.001452, "lr": 0.001000, "mb_qsize": 64, "mem": 5884, "time": 0.293770}
json_stats: {"accuracy_cls": 0.869292, "eta": "7:17:31", "iter": 700, "loss": 0.960027, "loss_bbox": 0.245679, "loss_cls": 0.298854, "loss_mask": 0.200498, "loss_rpn_bbox_fpn2": 0.005150, "loss_rpn_bbox_fpn3": 0.013615, "loss_rpn_bbox_fpn4": 0.020397, "loss_rpn_bbox_fpn5": 0.010419, "loss_rpn_bbox_fpn6": 0.000613, "loss_rpn_cls_fpn2": 0.016307, "loss_rpn_cls_fpn3": 0.022231, "loss_rpn_cls_fpn4": 0.020863, "loss_rpn_cls_fpn5": 0.011261, "loss_rpn_cls_fpn6": 0.002322, "lr": 0.001000, "mb_qsize": 64, "mem": 5884, "time": 0.293969}
json_stats: {"accuracy_cls": 0.891543, "eta": "7:17:24", "iter": 720, "loss": 0.825545, "loss_bbox": 0.215008, "loss_cls": 0.251947, "loss_mask": 0.218587, "loss_rpn_bbox_fpn2": 0.001718, "loss_rpn_bbox_fpn3": 0.012577, "loss_rpn_bbox_fpn4": 0.017551, "loss_rpn_bbox_fpn5": 0.007546, "loss_rpn_bbox_fpn6": 0.000437, "loss_rpn_cls_fpn2": 0.011293, "loss_rpn_cls_fpn3": 0.013973, "loss_rpn_cls_fpn4": 0.024294, "loss_rpn_cls_fpn5": 0.010453, "loss_rpn_cls_fpn6": 0.001628, "lr": 0.001000, "mb_qsize": 64, "mem": 5885, "time": 0.293957}
json_stats: {"accuracy_cls": 0.885711, "eta": "7:17:33", "iter": 740, "loss": 0.925903, "loss_bbox": 0.222300, "loss_cls": 0.274659, "loss_mask": 0.222296, "loss_rpn_bbox_fpn2": 0.003518, "loss_rpn_bbox_fpn3": 0.008743, "loss_rpn_bbox_fpn4": 0.030832, "loss_rpn_bbox_fpn5": 0.014708, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.014487, "loss_rpn_cls_fpn3": 0.019387, "loss_rpn_cls_fpn4": 0.024431, "loss_rpn_cls_fpn5": 0.010666, "loss_rpn_cls_fpn6": 0.001929, "lr": 0.001000, "mb_qsize": 64, "mem": 5885, "time": 0.294126}
json_stats: {"accuracy_cls": 0.883562, "eta": "7:17:26", "iter": 760, "loss": 0.804097, "loss_bbox": 0.207090, "loss_cls": 0.273092, "loss_mask": 0.192407, "loss_rpn_bbox_fpn2": 0.005702, "loss_rpn_bbox_fpn3": 0.008594, "loss_rpn_bbox_fpn4": 0.015900, "loss_rpn_bbox_fpn5": 0.003666, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.014669, "loss_rpn_cls_fpn3": 0.017205, "loss_rpn_cls_fpn4": 0.016675, "loss_rpn_cls_fpn5": 0.007155, "loss_rpn_cls_fpn6": 0.000701, "lr": 0.001000, "mb_qsize": 64, "mem": 5891, "time": 0.294112}
json_stats: {"accuracy_cls": 0.888213, "eta": "7:17:36", "iter": 780, "loss": 0.855883, "loss_bbox": 0.222604, "loss_cls": 0.257714, "loss_mask": 0.243853, "loss_rpn_bbox_fpn2": 0.007225, "loss_rpn_bbox_fpn3": 0.008579, "loss_rpn_bbox_fpn4": 0.018732, "loss_rpn_bbox_fpn5": 0.011920, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.019144, "loss_rpn_cls_fpn3": 0.016548, "loss_rpn_cls_fpn4": 0.015500, "loss_rpn_cls_fpn5": 0.011490, "loss_rpn_cls_fpn6": 0.000936, "lr": 0.001000, "mb_qsize": 64, "mem": 5891, "time": 0.294291}
json_stats: {"accuracy_cls": 0.909668, "eta": "7:17:36", "iter": 800, "loss": 0.705006, "loss_bbox": 0.203690, "loss_cls": 0.224516, "loss_mask": 0.224457, "loss_rpn_bbox_fpn2": 0.001233, "loss_rpn_bbox_fpn3": 0.005050, "loss_rpn_bbox_fpn4": 0.010836, "loss_rpn_bbox_fpn5": 0.007136, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006387, "loss_rpn_cls_fpn3": 0.008861, "loss_rpn_cls_fpn4": 0.012705, "loss_rpn_cls_fpn5": 0.008714, "loss_rpn_cls_fpn6": 0.000129, "lr": 0.001000, "mb_qsize": 64, "mem": 5891, "time": 0.294350}
json_stats: {"accuracy_cls": 0.878617, "eta": "7:17:44", "iter": 820, "loss": 0.863853, "loss_bbox": 0.230299, "loss_cls": 0.275945, "loss_mask": 0.215025, "loss_rpn_bbox_fpn2": 0.006523, "loss_rpn_bbox_fpn3": 0.007176, "loss_rpn_bbox_fpn4": 0.019786, "loss_rpn_bbox_fpn5": 0.013759, "loss_rpn_bbox_fpn6": 0.002179, "loss_rpn_cls_fpn2": 0.012355, "loss_rpn_cls_fpn3": 0.012814, "loss_rpn_cls_fpn4": 0.021501, "loss_rpn_cls_fpn5": 0.009988, "loss_rpn_cls_fpn6": 0.002033, "lr": 0.001000, "mb_qsize": 64, "mem": 5891, "time": 0.294510}
json_stats: {"accuracy_cls": 0.895508, "eta": "7:17:48", "iter": 840, "loss": 0.834956, "loss_bbox": 0.213442, "loss_cls": 0.247597, "loss_mask": 0.242205, "loss_rpn_bbox_fpn2": 0.001293, "loss_rpn_bbox_fpn3": 0.009022, "loss_rpn_bbox_fpn4": 0.017774, "loss_rpn_bbox_fpn5": 0.010994, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009791, "loss_rpn_cls_fpn3": 0.016940, "loss_rpn_cls_fpn4": 0.015568, "loss_rpn_cls_fpn5": 0.006761, "loss_rpn_cls_fpn6": 0.000246, "lr": 0.001000, "mb_qsize": 64, "mem": 5891, "time": 0.294618}
json_stats: {"accuracy_cls": 0.882346, "eta": "7:17:48", "iter": 860, "loss": 0.865517, "loss_bbox": 0.236119, "loss_cls": 0.278418, "loss_mask": 0.208141, "loss_rpn_bbox_fpn2": 0.001290, "loss_rpn_bbox_fpn3": 0.011298, "loss_rpn_bbox_fpn4": 0.020739, "loss_rpn_bbox_fpn5": 0.010646, "loss_rpn_bbox_fpn6": 0.000399, "loss_rpn_cls_fpn2": 0.011029, "loss_rpn_cls_fpn3": 0.017453, "loss_rpn_cls_fpn4": 0.017748, "loss_rpn_cls_fpn5": 0.007914, "loss_rpn_cls_fpn6": 0.002376, "lr": 0.001000, "mb_qsize": 64, "mem": 5891, "time": 0.294692}
json_stats: {"accuracy_cls": 0.882798, "eta": "7:17:29", "iter": 880, "loss": 0.878897, "loss_bbox": 0.232657, "loss_cls": 0.267817, "loss_mask": 0.229731, "loss_rpn_bbox_fpn2": 0.006249, "loss_rpn_bbox_fpn3": 0.010783, "loss_rpn_bbox_fpn4": 0.017092, "loss_rpn_bbox_fpn5": 0.009089, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.020227, "loss_rpn_cls_fpn3": 0.016640, "loss_rpn_cls_fpn4": 0.015878, "loss_rpn_cls_fpn5": 0.006404, "loss_rpn_cls_fpn6": 0.000604, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.294541}
json_stats: {"accuracy_cls": 0.885254, "eta": "7:17:11", "iter": 900, "loss": 0.839211, "loss_bbox": 0.209892, "loss_cls": 0.262090, "loss_mask": 0.230497, "loss_rpn_bbox_fpn2": 0.004528, "loss_rpn_bbox_fpn3": 0.004506, "loss_rpn_bbox_fpn4": 0.012420, "loss_rpn_bbox_fpn5": 0.013174, "loss_rpn_bbox_fpn6": 0.000701, "loss_rpn_cls_fpn2": 0.018021, "loss_rpn_cls_fpn3": 0.010167, "loss_rpn_cls_fpn4": 0.016905, "loss_rpn_cls_fpn5": 0.011499, "loss_rpn_cls_fpn6": 0.001989, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.294407}
json_stats: {"accuracy_cls": 0.897461, "eta": "7:17:11", "iter": 920, "loss": 0.843386, "loss_bbox": 0.189049, "loss_cls": 0.235201, "loss_mask": 0.215461, "loss_rpn_bbox_fpn2": 0.004818, "loss_rpn_bbox_fpn3": 0.008551, "loss_rpn_bbox_fpn4": 0.014733, "loss_rpn_bbox_fpn5": 0.013837, "loss_rpn_bbox_fpn6": 0.001608, "loss_rpn_cls_fpn2": 0.026015, "loss_rpn_cls_fpn3": 0.014432, "loss_rpn_cls_fpn4": 0.016433, "loss_rpn_cls_fpn5": 0.010644, "loss_rpn_cls_fpn6": 0.001949, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.294468}
json_stats: {"accuracy_cls": 0.874163, "eta": "7:16:44", "iter": 940, "loss": 0.824287, "loss_bbox": 0.213796, "loss_cls": 0.274066, "loss_mask": 0.209107, "loss_rpn_bbox_fpn2": 0.004624, "loss_rpn_bbox_fpn3": 0.014239, "loss_rpn_bbox_fpn4": 0.033617, "loss_rpn_bbox_fpn5": 0.013301, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.013373, "loss_rpn_cls_fpn3": 0.014693, "loss_rpn_cls_fpn4": 0.025156, "loss_rpn_cls_fpn5": 0.008596, "loss_rpn_cls_fpn6": 0.000904, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.294231}
json_stats: {"accuracy_cls": 0.871094, "eta": "7:16:16", "iter": 960, "loss": 0.919373, "loss_bbox": 0.241641, "loss_cls": 0.293455, "loss_mask": 0.246511, "loss_rpn_bbox_fpn2": 0.006172, "loss_rpn_bbox_fpn3": 0.009175, "loss_rpn_bbox_fpn4": 0.013339, "loss_rpn_bbox_fpn5": 0.002958, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009313, "loss_rpn_cls_fpn3": 0.015480, "loss_rpn_cls_fpn4": 0.013134, "loss_rpn_cls_fpn5": 0.008374, "loss_rpn_cls_fpn6": 0.000064, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293987}
json_stats: {"accuracy_cls": 0.893169, "eta": "7:16:15", "iter": 980, "loss": 0.866003, "loss_bbox": 0.216476, "loss_cls": 0.252282, "loss_mask": 0.218337, "loss_rpn_bbox_fpn2": 0.004851, "loss_rpn_bbox_fpn3": 0.009653, "loss_rpn_bbox_fpn4": 0.010693, "loss_rpn_bbox_fpn5": 0.009882, "loss_rpn_bbox_fpn6": 0.001272, "loss_rpn_cls_fpn2": 0.010502, "loss_rpn_cls_fpn3": 0.017557, "loss_rpn_cls_fpn4": 0.009647, "loss_rpn_cls_fpn5": 0.009764, "loss_rpn_cls_fpn6": 0.000855, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.294046}
json_stats: {"accuracy_cls": 0.885329, "eta": "7:16:07", "iter": 1000, "loss": 0.865048, "loss_bbox": 0.227942, "loss_cls": 0.266854, "loss_mask": 0.217961, "loss_rpn_bbox_fpn2": 0.004244, "loss_rpn_bbox_fpn3": 0.006570, "loss_rpn_bbox_fpn4": 0.019075, "loss_rpn_bbox_fpn5": 0.012761, "loss_rpn_bbox_fpn6": 0.000185, "loss_rpn_cls_fpn2": 0.009736, "loss_rpn_cls_fpn3": 0.012240, "loss_rpn_cls_fpn4": 0.017081, "loss_rpn_cls_fpn5": 0.009244, "loss_rpn_cls_fpn6": 0.000714, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.294022}
json_stats: {"accuracy_cls": 0.889160, "eta": "7:15:43", "iter": 1020, "loss": 0.833942, "loss_bbox": 0.230452, "loss_cls": 0.252243, "loss_mask": 0.216721, "loss_rpn_bbox_fpn2": 0.001899, "loss_rpn_bbox_fpn3": 0.005371, "loss_rpn_bbox_fpn4": 0.011288, "loss_rpn_bbox_fpn5": 0.003399, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010942, "loss_rpn_cls_fpn3": 0.009515, "loss_rpn_cls_fpn4": 0.009443, "loss_rpn_cls_fpn5": 0.006916, "loss_rpn_cls_fpn6": 0.000059, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293814}
json_stats: {"accuracy_cls": 0.877441, "eta": "7:15:44", "iter": 1040, "loss": 0.937609, "loss_bbox": 0.239940, "loss_cls": 0.288467, "loss_mask": 0.231120, "loss_rpn_bbox_fpn2": 0.004661, "loss_rpn_bbox_fpn3": 0.010967, "loss_rpn_bbox_fpn4": 0.018988, "loss_rpn_bbox_fpn5": 0.012463, "loss_rpn_bbox_fpn6": 0.000498, "loss_rpn_cls_fpn2": 0.012874, "loss_rpn_cls_fpn3": 0.019324, "loss_rpn_cls_fpn4": 0.016245, "loss_rpn_cls_fpn5": 0.011639, "loss_rpn_cls_fpn6": 0.001971, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293888}
json_stats: {"accuracy_cls": 0.866276, "eta": "7:15:41", "iter": 1060, "loss": 0.923461, "loss_bbox": 0.254845, "loss_cls": 0.298792, "loss_mask": 0.222444, "loss_rpn_bbox_fpn2": 0.007246, "loss_rpn_bbox_fpn3": 0.014540, "loss_rpn_bbox_fpn4": 0.024864, "loss_rpn_bbox_fpn5": 0.008667, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.012960, "loss_rpn_cls_fpn3": 0.021019, "loss_rpn_cls_fpn4": 0.018200, "loss_rpn_cls_fpn5": 0.008171, "loss_rpn_cls_fpn6": 0.000462, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293926}
json_stats: {"accuracy_cls": 0.877441, "eta": "7:15:16", "iter": 1080, "loss": 0.800835, "loss_bbox": 0.237428, "loss_cls": 0.274967, "loss_mask": 0.203924, "loss_rpn_bbox_fpn2": 0.004186, "loss_rpn_bbox_fpn3": 0.006135, "loss_rpn_bbox_fpn4": 0.012298, "loss_rpn_bbox_fpn5": 0.009247, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.014859, "loss_rpn_cls_fpn3": 0.013406, "loss_rpn_cls_fpn4": 0.013162, "loss_rpn_cls_fpn5": 0.008545, "loss_rpn_cls_fpn6": 0.000305, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293713}
json_stats: {"accuracy_cls": 0.870887, "eta": "7:15:15", "iter": 1100, "loss": 0.873349, "loss_bbox": 0.218559, "loss_cls": 0.287405, "loss_mask": 0.251596, "loss_rpn_bbox_fpn2": 0.005719, "loss_rpn_bbox_fpn3": 0.011290, "loss_rpn_bbox_fpn4": 0.014974, "loss_rpn_bbox_fpn5": 0.003849, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.020362, "loss_rpn_cls_fpn3": 0.016086, "loss_rpn_cls_fpn4": 0.015834, "loss_rpn_cls_fpn5": 0.007098, "loss_rpn_cls_fpn6": 0.001122, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293767}
json_stats: {"accuracy_cls": 0.899535, "eta": "7:14:54", "iter": 1120, "loss": 0.761084, "loss_bbox": 0.195822, "loss_cls": 0.233197, "loss_mask": 0.191060, "loss_rpn_bbox_fpn2": 0.003372, "loss_rpn_bbox_fpn3": 0.006840, "loss_rpn_bbox_fpn4": 0.013806, "loss_rpn_bbox_fpn5": 0.010186, "loss_rpn_bbox_fpn6": 0.001117, "loss_rpn_cls_fpn2": 0.009785, "loss_rpn_cls_fpn3": 0.010278, "loss_rpn_cls_fpn4": 0.012491, "loss_rpn_cls_fpn5": 0.006661, "loss_rpn_cls_fpn6": 0.000690, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293594}
json_stats: {"accuracy_cls": 0.890367, "eta": "7:14:51", "iter": 1140, "loss": 0.824520, "loss_bbox": 0.212121, "loss_cls": 0.258976, "loss_mask": 0.206336, "loss_rpn_bbox_fpn2": 0.003345, "loss_rpn_bbox_fpn3": 0.009601, "loss_rpn_bbox_fpn4": 0.011676, "loss_rpn_bbox_fpn5": 0.011257, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011703, "loss_rpn_cls_fpn3": 0.018431, "loss_rpn_cls_fpn4": 0.019042, "loss_rpn_cls_fpn5": 0.008414, "loss_rpn_cls_fpn6": 0.000611, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293624}
json_stats: {"accuracy_cls": 0.884629, "eta": "7:14:36", "iter": 1160, "loss": 0.782975, "loss_bbox": 0.232812, "loss_cls": 0.267683, "loss_mask": 0.184193, "loss_rpn_bbox_fpn2": 0.001708, "loss_rpn_bbox_fpn3": 0.007457, "loss_rpn_bbox_fpn4": 0.014614, "loss_rpn_bbox_fpn5": 0.002763, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006063, "loss_rpn_cls_fpn3": 0.009974, "loss_rpn_cls_fpn4": 0.013059, "loss_rpn_cls_fpn5": 0.004001, "loss_rpn_cls_fpn6": 0.000048, "lr": 0.001000, "mb_qsize": 64, "mem": 5892, "time": 0.293526}
json_stats: {"accuracy_cls": 0.897949, "eta": "7:14:27", "iter": 1180, "loss": 0.774023, "loss_bbox": 0.208792, "loss_cls": 0.244159, "loss_mask": 0.239808, "loss_rpn_bbox_fpn2": 0.005969, "loss_rpn_bbox_fpn3": 0.008251, "loss_rpn_bbox_fpn4": 0.011654, "loss_rpn_bbox_fpn5": 0.007694, "loss_rpn_bbox_fpn6": 0.001986, "loss_rpn_cls_fpn2": 0.016420, "loss_rpn_cls_fpn3": 0.017296, "loss_rpn_cls_fpn4": 0.014528, "loss_rpn_cls_fpn5": 0.005516, "loss_rpn_cls_fpn6": 0.001339, "lr": 0.001000, "mb_qsize": 64, "mem": 5893, "time": 0.293487}
json_stats: {"accuracy_cls": 0.888802, "eta": "7:14:35", "iter": 1200, "loss": 0.837095, "loss_bbox": 0.225044, "loss_cls": 0.271463, "loss_mask": 0.198557, "loss_rpn_bbox_fpn2": 0.003426, "loss_rpn_bbox_fpn3": 0.007258, "loss_rpn_bbox_fpn4": 0.011469, "loss_rpn_bbox_fpn5": 0.007242, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009629, "loss_rpn_cls_fpn3": 0.012005, "loss_rpn_cls_fpn4": 0.013339, "loss_rpn_cls_fpn5": 0.004508, "loss_rpn_cls_fpn6": 0.000539, "lr": 0.001000, "mb_qsize": 64, "mem": 5893, "time": 0.293648}
json_stats: {"accuracy_cls": 0.891356, "eta": "7:14:43", "iter": 1220, "loss": 0.823865, "loss_bbox": 0.235346, "loss_cls": 0.263805, "loss_mask": 0.207101, "loss_rpn_bbox_fpn2": 0.002312, "loss_rpn_bbox_fpn3": 0.005993, "loss_rpn_bbox_fpn4": 0.012116, "loss_rpn_bbox_fpn5": 0.008983, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009870, "loss_rpn_cls_fpn3": 0.014938, "loss_rpn_cls_fpn4": 0.013228, "loss_rpn_cls_fpn5": 0.011322, "loss_rpn_cls_fpn6": 0.000567, "lr": 0.001000, "mb_qsize": 64, "mem": 5899, "time": 0.293805}
json_stats: {"accuracy_cls": 0.883789, "eta": "7:14:38", "iter": 1240, "loss": 0.836590, "loss_bbox": 0.219343, "loss_cls": 0.278907, "loss_mask": 0.222188, "loss_rpn_bbox_fpn2": 0.003484, "loss_rpn_bbox_fpn3": 0.006518, "loss_rpn_bbox_fpn4": 0.016844, "loss_rpn_bbox_fpn5": 0.009416, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008739, "loss_rpn_cls_fpn3": 0.016757, "loss_rpn_cls_fpn4": 0.021456, "loss_rpn_cls_fpn5": 0.006687, "loss_rpn_cls_fpn6": 0.000251, "lr": 0.001000, "mb_qsize": 64, "mem": 5899, "time": 0.293813}
json_stats: {"accuracy_cls": 0.887881, "eta": "7:14:53", "iter": 1260, "loss": 0.780033, "loss_bbox": 0.213658, "loss_cls": 0.249106, "loss_mask": 0.192604, "loss_rpn_bbox_fpn2": 0.008953, "loss_rpn_bbox_fpn3": 0.008834, "loss_rpn_bbox_fpn4": 0.012502, "loss_rpn_bbox_fpn5": 0.013416, "loss_rpn_bbox_fpn6": 0.002259, "loss_rpn_cls_fpn2": 0.015298, "loss_rpn_cls_fpn3": 0.013607, "loss_rpn_cls_fpn4": 0.012114, "loss_rpn_cls_fpn5": 0.011233, "loss_rpn_cls_fpn6": 0.001303, "lr": 0.001000, "mb_qsize": 64, "mem": 5899, "time": 0.294042}
json_stats: {"accuracy_cls": 0.890910, "eta": "7:14:53", "iter": 1280, "loss": 0.788003, "loss_bbox": 0.199330, "loss_cls": 0.266030, "loss_mask": 0.183601, "loss_rpn_bbox_fpn2": 0.003947, "loss_rpn_bbox_fpn3": 0.005269, "loss_rpn_bbox_fpn4": 0.018272, "loss_rpn_bbox_fpn5": 0.011745, "loss_rpn_bbox_fpn6": 0.001378, "loss_rpn_cls_fpn2": 0.014389, "loss_rpn_cls_fpn3": 0.011239, "loss_rpn_cls_fpn4": 0.018931, "loss_rpn_cls_fpn5": 0.009451, "loss_rpn_cls_fpn6": 0.001431, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294113}
json_stats: {"accuracy_cls": 0.866211, "eta": "7:15:12", "iter": 1300, "loss": 0.921117, "loss_bbox": 0.248933, "loss_cls": 0.309136, "loss_mask": 0.217190, "loss_rpn_bbox_fpn2": 0.002453, "loss_rpn_bbox_fpn3": 0.013439, "loss_rpn_bbox_fpn4": 0.017998, "loss_rpn_bbox_fpn5": 0.010632, "loss_rpn_bbox_fpn6": 0.000159, "loss_rpn_cls_fpn2": 0.007914, "loss_rpn_cls_fpn3": 0.017316, "loss_rpn_cls_fpn4": 0.018185, "loss_rpn_cls_fpn5": 0.006270, "loss_rpn_cls_fpn6": 0.000361, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294388}
json_stats: {"accuracy_cls": 0.868959, "eta": "7:15:04", "iter": 1320, "loss": 0.847755, "loss_bbox": 0.223711, "loss_cls": 0.300155, "loss_mask": 0.215634, "loss_rpn_bbox_fpn2": 0.004403, "loss_rpn_bbox_fpn3": 0.008705, "loss_rpn_bbox_fpn4": 0.017190, "loss_rpn_bbox_fpn5": 0.009449, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009184, "loss_rpn_cls_fpn3": 0.009990, "loss_rpn_cls_fpn4": 0.017965, "loss_rpn_cls_fpn5": 0.007797, "loss_rpn_cls_fpn6": 0.000928, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294371}
json_stats: {"accuracy_cls": 0.876465, "eta": "7:14:48", "iter": 1340, "loss": 0.952651, "loss_bbox": 0.246571, "loss_cls": 0.306903, "loss_mask": 0.233010, "loss_rpn_bbox_fpn2": 0.005322, "loss_rpn_bbox_fpn3": 0.007256, "loss_rpn_bbox_fpn4": 0.014039, "loss_rpn_bbox_fpn5": 0.007867, "loss_rpn_bbox_fpn6": 0.000105, "loss_rpn_cls_fpn2": 0.010865, "loss_rpn_cls_fpn3": 0.015703, "loss_rpn_cls_fpn4": 0.012249, "loss_rpn_cls_fpn5": 0.009476, "loss_rpn_cls_fpn6": 0.000431, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294259}
json_stats: {"accuracy_cls": 0.872222, "eta": "7:14:34", "iter": 1360, "loss": 0.946486, "loss_bbox": 0.242709, "loss_cls": 0.291589, "loss_mask": 0.244121, "loss_rpn_bbox_fpn2": 0.006983, "loss_rpn_bbox_fpn3": 0.007920, "loss_rpn_bbox_fpn4": 0.013800, "loss_rpn_bbox_fpn5": 0.013158, "loss_rpn_bbox_fpn6": 0.001305, "loss_rpn_cls_fpn2": 0.015132, "loss_rpn_cls_fpn3": 0.013500, "loss_rpn_cls_fpn4": 0.013577, "loss_rpn_cls_fpn5": 0.008278, "loss_rpn_cls_fpn6": 0.001156, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294161}
json_stats: {"accuracy_cls": 0.881033, "eta": "7:14:31", "iter": 1380, "loss": 0.869127, "loss_bbox": 0.243315, "loss_cls": 0.270345, "loss_mask": 0.258144, "loss_rpn_bbox_fpn2": 0.004763, "loss_rpn_bbox_fpn3": 0.010840, "loss_rpn_bbox_fpn4": 0.017197, "loss_rpn_bbox_fpn5": 0.010730, "loss_rpn_bbox_fpn6": 0.001002, "loss_rpn_cls_fpn2": 0.012336, "loss_rpn_cls_fpn3": 0.018107, "loss_rpn_cls_fpn4": 0.021514, "loss_rpn_cls_fpn5": 0.005007, "loss_rpn_cls_fpn6": 0.001604, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294200}
json_stats: {"accuracy_cls": 0.899902, "eta": "7:14:23", "iter": 1400, "loss": 0.739812, "loss_bbox": 0.204896, "loss_cls": 0.247339, "loss_mask": 0.221787, "loss_rpn_bbox_fpn2": 0.001309, "loss_rpn_bbox_fpn3": 0.009932, "loss_rpn_bbox_fpn4": 0.013035, "loss_rpn_bbox_fpn5": 0.008896, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005391, "loss_rpn_cls_fpn3": 0.014494, "loss_rpn_cls_fpn4": 0.010665, "loss_rpn_cls_fpn5": 0.005328, "loss_rpn_cls_fpn6": 0.000382, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294174}
json_stats: {"accuracy_cls": 0.905490, "eta": "7:14:05", "iter": 1420, "loss": 0.704467, "loss_bbox": 0.207467, "loss_cls": 0.226031, "loss_mask": 0.195359, "loss_rpn_bbox_fpn2": 0.002097, "loss_rpn_bbox_fpn3": 0.005406, "loss_rpn_bbox_fpn4": 0.007043, "loss_rpn_bbox_fpn5": 0.003911, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008177, "loss_rpn_cls_fpn3": 0.007013, "loss_rpn_cls_fpn4": 0.007712, "loss_rpn_cls_fpn5": 0.005441, "loss_rpn_cls_fpn6": 0.000055, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294029}
json_stats: {"accuracy_cls": 0.889046, "eta": "7:14:05", "iter": 1440, "loss": 0.807353, "loss_bbox": 0.208434, "loss_cls": 0.262097, "loss_mask": 0.213640, "loss_rpn_bbox_fpn2": 0.002196, "loss_rpn_bbox_fpn3": 0.006413, "loss_rpn_bbox_fpn4": 0.018233, "loss_rpn_bbox_fpn5": 0.004373, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.015326, "loss_rpn_cls_fpn3": 0.014962, "loss_rpn_cls_fpn4": 0.015933, "loss_rpn_cls_fpn5": 0.004603, "loss_rpn_cls_fpn6": 0.000281, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294097}
json_stats: {"accuracy_cls": 0.883780, "eta": "7:13:41", "iter": 1460, "loss": 0.874362, "loss_bbox": 0.250050, "loss_cls": 0.272577, "loss_mask": 0.218053, "loss_rpn_bbox_fpn2": 0.002670, "loss_rpn_bbox_fpn3": 0.009406, "loss_rpn_bbox_fpn4": 0.012498, "loss_rpn_bbox_fpn5": 0.004517, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008607, "loss_rpn_cls_fpn3": 0.016405, "loss_rpn_cls_fpn4": 0.011264, "loss_rpn_cls_fpn5": 0.006544, "loss_rpn_cls_fpn6": 0.000160, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.293894}
json_stats: {"accuracy_cls": 0.877248, "eta": "7:13:47", "iter": 1480, "loss": 0.808387, "loss_bbox": 0.218911, "loss_cls": 0.286005, "loss_mask": 0.207912, "loss_rpn_bbox_fpn2": 0.004469, "loss_rpn_bbox_fpn3": 0.008271, "loss_rpn_bbox_fpn4": 0.018986, "loss_rpn_bbox_fpn5": 0.010585, "loss_rpn_bbox_fpn6": 0.000205, "loss_rpn_cls_fpn2": 0.010694, "loss_rpn_cls_fpn3": 0.017429, "loss_rpn_cls_fpn4": 0.017875, "loss_rpn_cls_fpn5": 0.008267, "loss_rpn_cls_fpn6": 0.001630, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294028}
json_stats: {"accuracy_cls": 0.880371, "eta": "7:13:43", "iter": 1500, "loss": 0.794570, "loss_bbox": 0.210220, "loss_cls": 0.276997, "loss_mask": 0.188283, "loss_rpn_bbox_fpn2": 0.005017, "loss_rpn_bbox_fpn3": 0.010229, "loss_rpn_bbox_fpn4": 0.016607, "loss_rpn_bbox_fpn5": 0.006788, "loss_rpn_bbox_fpn6": 0.000662, "loss_rpn_cls_fpn2": 0.016874, "loss_rpn_cls_fpn3": 0.012135, "loss_rpn_cls_fpn4": 0.016229, "loss_rpn_cls_fpn5": 0.005180, "loss_rpn_cls_fpn6": 0.000666, "lr": 0.001000, "mb_qsize": 64, "mem": 5900, "time": 0.294054}
json_stats: {"accuracy_cls": 0.858902, "eta": "7:13:44", "iter": 1520, "loss": 0.880454, "loss_bbox": 0.239086, "loss_cls": 0.312108, "loss_mask": 0.219244, "loss_rpn_bbox_fpn2": 0.004265, "loss_rpn_bbox_fpn3": 0.010895, "loss_rpn_bbox_fpn4": 0.012536, "loss_rpn_bbox_fpn5": 0.006209, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011604, "loss_rpn_cls_fpn3": 0.015929, "loss_rpn_cls_fpn4": 0.016286, "loss_rpn_cls_fpn5": 0.006213, "loss_rpn_cls_fpn6": 0.000487, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294130}
json_stats: {"accuracy_cls": 0.891113, "eta": "7:13:38", "iter": 1540, "loss": 0.828853, "loss_bbox": 0.219271, "loss_cls": 0.260823, "loss_mask": 0.223073, "loss_rpn_bbox_fpn2": 0.003036, "loss_rpn_bbox_fpn3": 0.009872, "loss_rpn_bbox_fpn4": 0.011158, "loss_rpn_bbox_fpn5": 0.006093, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011798, "loss_rpn_cls_fpn3": 0.008599, "loss_rpn_cls_fpn4": 0.012479, "loss_rpn_cls_fpn5": 0.006169, "loss_rpn_cls_fpn6": 0.000642, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294123}
json_stats: {"accuracy_cls": 0.886520, "eta": "7:13:49", "iter": 1560, "loss": 0.777110, "loss_bbox": 0.219367, "loss_cls": 0.274770, "loss_mask": 0.237234, "loss_rpn_bbox_fpn2": 0.003704, "loss_rpn_bbox_fpn3": 0.005518, "loss_rpn_bbox_fpn4": 0.012468, "loss_rpn_bbox_fpn5": 0.007902, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.012407, "loss_rpn_cls_fpn3": 0.009567, "loss_rpn_cls_fpn4": 0.012884, "loss_rpn_cls_fpn5": 0.007919, "loss_rpn_cls_fpn6": 0.000357, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294322}
json_stats: {"accuracy_cls": 0.898819, "eta": "7:13:35", "iter": 1580, "loss": 0.687539, "loss_bbox": 0.207890, "loss_cls": 0.238742, "loss_mask": 0.176015, "loss_rpn_bbox_fpn2": 0.001728, "loss_rpn_bbox_fpn3": 0.005735, "loss_rpn_bbox_fpn4": 0.011634, "loss_rpn_bbox_fpn5": 0.006734, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006149, "loss_rpn_cls_fpn3": 0.007099, "loss_rpn_cls_fpn4": 0.009910, "loss_rpn_cls_fpn5": 0.004337, "loss_rpn_cls_fpn6": 0.000263, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294226}
json_stats: {"accuracy_cls": 0.870546, "eta": "7:13:30", "iter": 1600, "loss": 0.852073, "loss_bbox": 0.223787, "loss_cls": 0.286396, "loss_mask": 0.191684, "loss_rpn_bbox_fpn2": 0.002695, "loss_rpn_bbox_fpn3": 0.008702, "loss_rpn_bbox_fpn4": 0.019926, "loss_rpn_bbox_fpn5": 0.007790, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009704, "loss_rpn_cls_fpn3": 0.016364, "loss_rpn_cls_fpn4": 0.016168, "loss_rpn_cls_fpn5": 0.005465, "loss_rpn_cls_fpn6": 0.000345, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294236}
json_stats: {"accuracy_cls": 0.886689, "eta": "7:13:25", "iter": 1620, "loss": 0.794939, "loss_bbox": 0.218780, "loss_cls": 0.261815, "loss_mask": 0.192460, "loss_rpn_bbox_fpn2": 0.004873, "loss_rpn_bbox_fpn3": 0.007720, "loss_rpn_bbox_fpn4": 0.013627, "loss_rpn_bbox_fpn5": 0.010197, "loss_rpn_bbox_fpn6": 0.000983, "loss_rpn_cls_fpn2": 0.011943, "loss_rpn_cls_fpn3": 0.009539, "loss_rpn_cls_fpn4": 0.011806, "loss_rpn_cls_fpn5": 0.005856, "loss_rpn_cls_fpn6": 0.001122, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294247}
json_stats: {"accuracy_cls": 0.886719, "eta": "7:13:18", "iter": 1640, "loss": 0.835211, "loss_bbox": 0.224571, "loss_cls": 0.255040, "loss_mask": 0.208556, "loss_rpn_bbox_fpn2": 0.005126, "loss_rpn_bbox_fpn3": 0.003754, "loss_rpn_bbox_fpn4": 0.010166, "loss_rpn_bbox_fpn5": 0.004964, "loss_rpn_bbox_fpn6": 0.002235, "loss_rpn_cls_fpn2": 0.008110, "loss_rpn_cls_fpn3": 0.013665, "loss_rpn_cls_fpn4": 0.010106, "loss_rpn_cls_fpn5": 0.004571, "loss_rpn_cls_fpn6": 0.000962, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294233}
json_stats: {"accuracy_cls": 0.897949, "eta": "7:13:21", "iter": 1660, "loss": 0.729105, "loss_bbox": 0.218234, "loss_cls": 0.245514, "loss_mask": 0.206775, "loss_rpn_bbox_fpn2": 0.003632, "loss_rpn_bbox_fpn3": 0.002278, "loss_rpn_bbox_fpn4": 0.011923, "loss_rpn_bbox_fpn5": 0.008069, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009682, "loss_rpn_cls_fpn3": 0.007957, "loss_rpn_cls_fpn4": 0.012973, "loss_rpn_cls_fpn5": 0.004324, "loss_rpn_cls_fpn6": 0.000553, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294338}
json_stats: {"accuracy_cls": 0.884092, "eta": "7:13:15", "iter": 1680, "loss": 0.789233, "loss_bbox": 0.230515, "loss_cls": 0.262840, "loss_mask": 0.193664, "loss_rpn_bbox_fpn2": 0.003724, "loss_rpn_bbox_fpn3": 0.005890, "loss_rpn_bbox_fpn4": 0.010756, "loss_rpn_bbox_fpn5": 0.006915, "loss_rpn_bbox_fpn6": 0.000398, "loss_rpn_cls_fpn2": 0.008944, "loss_rpn_cls_fpn3": 0.011977, "loss_rpn_cls_fpn4": 0.009943, "loss_rpn_cls_fpn5": 0.006096, "loss_rpn_cls_fpn6": 0.000383, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294332}
json_stats: {"accuracy_cls": 0.894090, "eta": "7:13:13", "iter": 1700, "loss": 0.774128, "loss_bbox": 0.199264, "loss_cls": 0.249476, "loss_mask": 0.198903, "loss_rpn_bbox_fpn2": 0.002252, "loss_rpn_bbox_fpn3": 0.011092, "loss_rpn_bbox_fpn4": 0.007316, "loss_rpn_bbox_fpn5": 0.008224, "loss_rpn_bbox_fpn6": 0.003242, "loss_rpn_cls_fpn2": 0.013578, "loss_rpn_cls_fpn3": 0.013552, "loss_rpn_cls_fpn4": 0.006642, "loss_rpn_cls_fpn5": 0.003684, "loss_rpn_cls_fpn6": 0.001712, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294375}
json_stats: {"accuracy_cls": 0.889648, "eta": "7:13:17", "iter": 1720, "loss": 0.781043, "loss_bbox": 0.226133, "loss_cls": 0.249030, "loss_mask": 0.217585, "loss_rpn_bbox_fpn2": 0.003143, "loss_rpn_bbox_fpn3": 0.007855, "loss_rpn_bbox_fpn4": 0.013829, "loss_rpn_bbox_fpn5": 0.008351, "loss_rpn_bbox_fpn6": 0.000332, "loss_rpn_cls_fpn2": 0.010191, "loss_rpn_cls_fpn3": 0.014796, "loss_rpn_cls_fpn4": 0.011422, "loss_rpn_cls_fpn5": 0.007958, "loss_rpn_cls_fpn6": 0.000468, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294494}
json_stats: {"accuracy_cls": 0.876465, "eta": "7:13:25", "iter": 1740, "loss": 0.856895, "loss_bbox": 0.253423, "loss_cls": 0.283607, "loss_mask": 0.217228, "loss_rpn_bbox_fpn2": 0.004249, "loss_rpn_bbox_fpn3": 0.007569, "loss_rpn_bbox_fpn4": 0.013829, "loss_rpn_bbox_fpn5": 0.014089, "loss_rpn_bbox_fpn6": 0.001080, "loss_rpn_cls_fpn2": 0.011869, "loss_rpn_cls_fpn3": 0.009628, "loss_rpn_cls_fpn4": 0.011166, "loss_rpn_cls_fpn5": 0.007664, "loss_rpn_cls_fpn6": 0.000913, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294646}
json_stats: {"accuracy_cls": 0.880578, "eta": "7:13:33", "iter": 1760, "loss": 0.778667, "loss_bbox": 0.214445, "loss_cls": 0.272713, "loss_mask": 0.178376, "loss_rpn_bbox_fpn2": 0.003179, "loss_rpn_bbox_fpn3": 0.005820, "loss_rpn_bbox_fpn4": 0.013693, "loss_rpn_bbox_fpn5": 0.005726, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011757, "loss_rpn_cls_fpn3": 0.012863, "loss_rpn_cls_fpn4": 0.009276, "loss_rpn_cls_fpn5": 0.003867, "loss_rpn_cls_fpn6": 0.000152, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294803}
json_stats: {"accuracy_cls": 0.903865, "eta": "7:13:22", "iter": 1780, "loss": 0.673641, "loss_bbox": 0.185681, "loss_cls": 0.219044, "loss_mask": 0.187028, "loss_rpn_bbox_fpn2": 0.004619, "loss_rpn_bbox_fpn3": 0.004275, "loss_rpn_bbox_fpn4": 0.007855, "loss_rpn_bbox_fpn5": 0.007175, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008175, "loss_rpn_cls_fpn3": 0.003146, "loss_rpn_cls_fpn4": 0.008354, "loss_rpn_cls_fpn5": 0.004989, "loss_rpn_cls_fpn6": 0.000697, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294745}
json_stats: {"accuracy_cls": 0.881836, "eta": "7:13:11", "iter": 1800, "loss": 0.796807, "loss_bbox": 0.212758, "loss_cls": 0.272701, "loss_mask": 0.219991, "loss_rpn_bbox_fpn2": 0.002938, "loss_rpn_bbox_fpn3": 0.008295, "loss_rpn_bbox_fpn4": 0.012358, "loss_rpn_bbox_fpn5": 0.004151, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010719, "loss_rpn_cls_fpn3": 0.010351, "loss_rpn_cls_fpn4": 0.008754, "loss_rpn_cls_fpn5": 0.003559, "loss_rpn_cls_fpn6": 0.000432, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294691}
json_stats: {"accuracy_cls": 0.891113, "eta": "7:12:25", "iter": 1820, "loss": 0.763536, "loss_bbox": 0.211088, "loss_cls": 0.245298, "loss_mask": 0.204092, "loss_rpn_bbox_fpn2": 0.003439, "loss_rpn_bbox_fpn3": 0.011220, "loss_rpn_bbox_fpn4": 0.012026, "loss_rpn_bbox_fpn5": 0.007801, "loss_rpn_bbox_fpn6": 0.000412, "loss_rpn_cls_fpn2": 0.009821, "loss_rpn_cls_fpn3": 0.016267, "loss_rpn_cls_fpn4": 0.013213, "loss_rpn_cls_fpn5": 0.007456, "loss_rpn_cls_fpn6": 0.001401, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.294235}
json_stats: {"accuracy_cls": 0.877277, "eta": "7:11:44", "iter": 1840, "loss": 0.954138, "loss_bbox": 0.242543, "loss_cls": 0.284894, "loss_mask": 0.239614, "loss_rpn_bbox_fpn2": 0.004066, "loss_rpn_bbox_fpn3": 0.007220, "loss_rpn_bbox_fpn4": 0.013743, "loss_rpn_bbox_fpn5": 0.010975, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006422, "loss_rpn_cls_fpn3": 0.010950, "loss_rpn_cls_fpn4": 0.012027, "loss_rpn_cls_fpn5": 0.005239, "loss_rpn_cls_fpn6": 0.000430, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.293831}
json_stats: {"accuracy_cls": 0.878056, "eta": "7:11:01", "iter": 1860, "loss": 0.851984, "loss_bbox": 0.241548, "loss_cls": 0.294312, "loss_mask": 0.199605, "loss_rpn_bbox_fpn2": 0.002303, "loss_rpn_bbox_fpn3": 0.010910, "loss_rpn_bbox_fpn4": 0.015125, "loss_rpn_bbox_fpn5": 0.008794, "loss_rpn_bbox_fpn6": 0.000218, "loss_rpn_cls_fpn2": 0.006766, "loss_rpn_cls_fpn3": 0.017391, "loss_rpn_cls_fpn4": 0.010195, "loss_rpn_cls_fpn5": 0.006557, "loss_rpn_cls_fpn6": 0.000400, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.293415}
json_stats: {"accuracy_cls": 0.893555, "eta": "7:10:11", "iter": 1880, "loss": 0.768021, "loss_bbox": 0.202303, "loss_cls": 0.242271, "loss_mask": 0.201374, "loss_rpn_bbox_fpn2": 0.002012, "loss_rpn_bbox_fpn3": 0.006961, "loss_rpn_bbox_fpn4": 0.011130, "loss_rpn_bbox_fpn5": 0.008993, "loss_rpn_bbox_fpn6": 0.000737, "loss_rpn_cls_fpn2": 0.005595, "loss_rpn_cls_fpn3": 0.008925, "loss_rpn_cls_fpn4": 0.018573, "loss_rpn_cls_fpn5": 0.005879, "loss_rpn_cls_fpn6": 0.000893, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.292912}
json_stats: {"accuracy_cls": 0.883392, "eta": "7:09:45", "iter": 1900, "loss": 0.769166, "loss_bbox": 0.212526, "loss_cls": 0.254722, "loss_mask": 0.175930, "loss_rpn_bbox_fpn2": 0.003566, "loss_rpn_bbox_fpn3": 0.006834, "loss_rpn_bbox_fpn4": 0.010034, "loss_rpn_bbox_fpn5": 0.007723, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.014766, "loss_rpn_cls_fpn3": 0.007360, "loss_rpn_cls_fpn4": 0.010597, "loss_rpn_cls_fpn5": 0.005844, "loss_rpn_cls_fpn6": 0.000969, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.292688}
json_stats: {"accuracy_cls": 0.883301, "eta": "7:09:08", "iter": 1920, "loss": 0.748662, "loss_bbox": 0.209391, "loss_cls": 0.249954, "loss_mask": 0.203155, "loss_rpn_bbox_fpn2": 0.004266, "loss_rpn_bbox_fpn3": 0.008959, "loss_rpn_bbox_fpn4": 0.014993, "loss_rpn_bbox_fpn5": 0.004475, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010432, "loss_rpn_cls_fpn3": 0.010561, "loss_rpn_cls_fpn4": 0.010302, "loss_rpn_cls_fpn5": 0.004036, "loss_rpn_cls_fpn6": 0.000142, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.292328}
json_stats: {"accuracy_cls": 0.874846, "eta": "7:08:30", "iter": 1940, "loss": 0.864693, "loss_bbox": 0.249450, "loss_cls": 0.286263, "loss_mask": 0.214328, "loss_rpn_bbox_fpn2": 0.001907, "loss_rpn_bbox_fpn3": 0.007437, "loss_rpn_bbox_fpn4": 0.013133, "loss_rpn_bbox_fpn5": 0.009251, "loss_rpn_bbox_fpn6": 0.000295, "loss_rpn_cls_fpn2": 0.008558, "loss_rpn_cls_fpn3": 0.010965, "loss_rpn_cls_fpn4": 0.014569, "loss_rpn_cls_fpn5": 0.006507, "loss_rpn_cls_fpn6": 0.000433, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.291970}
json_stats: {"accuracy_cls": 0.880393, "eta": "7:07:52", "iter": 1960, "loss": 0.881120, "loss_bbox": 0.221967, "loss_cls": 0.291232, "loss_mask": 0.255751, "loss_rpn_bbox_fpn2": 0.005317, "loss_rpn_bbox_fpn3": 0.009808, "loss_rpn_bbox_fpn4": 0.013494, "loss_rpn_bbox_fpn5": 0.010907, "loss_rpn_bbox_fpn6": 0.001676, "loss_rpn_cls_fpn2": 0.009302, "loss_rpn_cls_fpn3": 0.014839, "loss_rpn_cls_fpn4": 0.017060, "loss_rpn_cls_fpn5": 0.005854, "loss_rpn_cls_fpn6": 0.000857, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.291600}
json_stats: {"accuracy_cls": 0.895020, "eta": "7:07:07", "iter": 1980, "loss": 0.739869, "loss_bbox": 0.204026, "loss_cls": 0.242876, "loss_mask": 0.195189, "loss_rpn_bbox_fpn2": 0.002674, "loss_rpn_bbox_fpn3": 0.011621, "loss_rpn_bbox_fpn4": 0.010940, "loss_rpn_bbox_fpn5": 0.005342, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008655, "loss_rpn_cls_fpn3": 0.012671, "loss_rpn_cls_fpn4": 0.007791, "loss_rpn_cls_fpn5": 0.003644, "loss_rpn_cls_fpn6": 0.000164, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.291151}
json_stats: {"accuracy_cls": 0.876465, "eta": "7:06:25", "iter": 2000, "loss": 0.818533, "loss_bbox": 0.237890, "loss_cls": 0.288878, "loss_mask": 0.197207, "loss_rpn_bbox_fpn2": 0.004004, "loss_rpn_bbox_fpn3": 0.010825, "loss_rpn_bbox_fpn4": 0.020418, "loss_rpn_bbox_fpn5": 0.007708, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008246, "loss_rpn_cls_fpn3": 0.013688, "loss_rpn_cls_fpn4": 0.015501, "loss_rpn_cls_fpn5": 0.006097, "loss_rpn_cls_fpn6": 0.000096, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.290739}
json_stats: {"accuracy_cls": 0.886098, "eta": "7:05:42", "iter": 2020, "loss": 0.764610, "loss_bbox": 0.212498, "loss_cls": 0.257240, "loss_mask": 0.197645, "loss_rpn_bbox_fpn2": 0.005760, "loss_rpn_bbox_fpn3": 0.012517, "loss_rpn_bbox_fpn4": 0.019502, "loss_rpn_bbox_fpn5": 0.002758, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011723, "loss_rpn_cls_fpn3": 0.015154, "loss_rpn_cls_fpn4": 0.011787, "loss_rpn_cls_fpn5": 0.003922, "loss_rpn_cls_fpn6": 0.000183, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.290322}
json_stats: {"accuracy_cls": 0.888254, "eta": "7:04:58", "iter": 2040, "loss": 0.696241, "loss_bbox": 0.200321, "loss_cls": 0.238431, "loss_mask": 0.196624, "loss_rpn_bbox_fpn2": 0.005763, "loss_rpn_bbox_fpn3": 0.010197, "loss_rpn_bbox_fpn4": 0.010457, "loss_rpn_bbox_fpn5": 0.004805, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.016489, "loss_rpn_cls_fpn3": 0.011572, "loss_rpn_cls_fpn4": 0.011210, "loss_rpn_cls_fpn5": 0.003765, "loss_rpn_cls_fpn6": 0.000589, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.289891}
json_stats: {"accuracy_cls": 0.887476, "eta": "7:04:16", "iter": 2060, "loss": 0.804213, "loss_bbox": 0.188414, "loss_cls": 0.261588, "loss_mask": 0.221755, "loss_rpn_bbox_fpn2": 0.002943, "loss_rpn_bbox_fpn3": 0.005848, "loss_rpn_bbox_fpn4": 0.014611, "loss_rpn_bbox_fpn5": 0.007421, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008748, "loss_rpn_cls_fpn3": 0.010662, "loss_rpn_cls_fpn4": 0.011132, "loss_rpn_cls_fpn5": 0.004407, "loss_rpn_cls_fpn6": 0.000304, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.289476}
json_stats: {"accuracy_cls": 0.868156, "eta": "7:03:40", "iter": 2080, "loss": 0.853228, "loss_bbox": 0.232615, "loss_cls": 0.299100, "loss_mask": 0.207045, "loss_rpn_bbox_fpn2": 0.005207, "loss_rpn_bbox_fpn3": 0.013608, "loss_rpn_bbox_fpn4": 0.022448, "loss_rpn_bbox_fpn5": 0.005432, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.014272, "loss_rpn_cls_fpn3": 0.018554, "loss_rpn_cls_fpn4": 0.016981, "loss_rpn_cls_fpn5": 0.006442, "loss_rpn_cls_fpn6": 0.000210, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.289134}
json_stats: {"accuracy_cls": 0.879691, "eta": "7:03:00", "iter": 2100, "loss": 0.808455, "loss_bbox": 0.219512, "loss_cls": 0.270705, "loss_mask": 0.214582, "loss_rpn_bbox_fpn2": 0.003065, "loss_rpn_bbox_fpn3": 0.011578, "loss_rpn_bbox_fpn4": 0.016046, "loss_rpn_bbox_fpn5": 0.007355, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007490, "loss_rpn_cls_fpn3": 0.013243, "loss_rpn_cls_fpn4": 0.014226, "loss_rpn_cls_fpn5": 0.006541, "loss_rpn_cls_fpn6": 0.000128, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.288741}
json_stats: {"accuracy_cls": 0.891051, "eta": "7:02:19", "iter": 2120, "loss": 0.721905, "loss_bbox": 0.213058, "loss_cls": 0.250320, "loss_mask": 0.178528, "loss_rpn_bbox_fpn2": 0.002678, "loss_rpn_bbox_fpn3": 0.007708, "loss_rpn_bbox_fpn4": 0.013666, "loss_rpn_bbox_fpn5": 0.003605, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007821, "loss_rpn_cls_fpn3": 0.011219, "loss_rpn_cls_fpn4": 0.007660, "loss_rpn_cls_fpn5": 0.007290, "loss_rpn_cls_fpn6": 0.000363, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.288343}
json_stats: {"accuracy_cls": 0.871582, "eta": "7:01:41", "iter": 2140, "loss": 0.829537, "loss_bbox": 0.222321, "loss_cls": 0.299606, "loss_mask": 0.211474, "loss_rpn_bbox_fpn2": 0.004740, "loss_rpn_bbox_fpn3": 0.010657, "loss_rpn_bbox_fpn4": 0.016970, "loss_rpn_bbox_fpn5": 0.005419, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.016525, "loss_rpn_cls_fpn3": 0.014627, "loss_rpn_cls_fpn4": 0.010909, "loss_rpn_cls_fpn5": 0.004770, "loss_rpn_cls_fpn6": 0.000079, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.287971}
json_stats: {"accuracy_cls": 0.888138, "eta": "7:01:08", "iter": 2160, "loss": 0.763687, "loss_bbox": 0.204923, "loss_cls": 0.258096, "loss_mask": 0.197412, "loss_rpn_bbox_fpn2": 0.002191, "loss_rpn_bbox_fpn3": 0.006935, "loss_rpn_bbox_fpn4": 0.012400, "loss_rpn_bbox_fpn5": 0.007992, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006812, "loss_rpn_cls_fpn3": 0.009459, "loss_rpn_cls_fpn4": 0.014386, "loss_rpn_cls_fpn5": 0.004748, "loss_rpn_cls_fpn6": 0.000159, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.287669}
json_stats: {"accuracy_cls": 0.901377, "eta": "7:00:32", "iter": 2180, "loss": 0.686239, "loss_bbox": 0.195566, "loss_cls": 0.233235, "loss_mask": 0.181021, "loss_rpn_bbox_fpn2": 0.002338, "loss_rpn_bbox_fpn3": 0.006689, "loss_rpn_bbox_fpn4": 0.008568, "loss_rpn_bbox_fpn5": 0.007463, "loss_rpn_bbox_fpn6": 0.001051, "loss_rpn_cls_fpn2": 0.004176, "loss_rpn_cls_fpn3": 0.009373, "loss_rpn_cls_fpn4": 0.011520, "loss_rpn_cls_fpn5": 0.003102, "loss_rpn_cls_fpn6": 0.000769, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.287320}
json_stats: {"accuracy_cls": 0.895020, "eta": "6:59:52", "iter": 2200, "loss": 0.711233, "loss_bbox": 0.206342, "loss_cls": 0.249119, "loss_mask": 0.203722, "loss_rpn_bbox_fpn2": 0.004927, "loss_rpn_bbox_fpn3": 0.005057, "loss_rpn_bbox_fpn4": 0.008563, "loss_rpn_bbox_fpn5": 0.007592, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.013050, "loss_rpn_cls_fpn3": 0.008974, "loss_rpn_cls_fpn4": 0.011791, "loss_rpn_cls_fpn5": 0.004363, "loss_rpn_cls_fpn6": 0.000253, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.286928}
json_stats: {"accuracy_cls": 0.890179, "eta": "6:59:19", "iter": 2220, "loss": 0.729346, "loss_bbox": 0.216871, "loss_cls": 0.242794, "loss_mask": 0.214938, "loss_rpn_bbox_fpn2": 0.003085, "loss_rpn_bbox_fpn3": 0.008612, "loss_rpn_bbox_fpn4": 0.018103, "loss_rpn_bbox_fpn5": 0.006271, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007447, "loss_rpn_cls_fpn3": 0.008096, "loss_rpn_cls_fpn4": 0.008879, "loss_rpn_cls_fpn5": 0.004968, "loss_rpn_cls_fpn6": 0.000146, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.286624}
json_stats: {"accuracy_cls": 0.871094, "eta": "6:58:47", "iter": 2240, "loss": 0.889077, "loss_bbox": 0.235805, "loss_cls": 0.291312, "loss_mask": 0.225856, "loss_rpn_bbox_fpn2": 0.004365, "loss_rpn_bbox_fpn3": 0.007959, "loss_rpn_bbox_fpn4": 0.009955, "loss_rpn_bbox_fpn5": 0.005102, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.014344, "loss_rpn_cls_fpn3": 0.012103, "loss_rpn_cls_fpn4": 0.006190, "loss_rpn_cls_fpn5": 0.002712, "loss_rpn_cls_fpn6": 0.000045, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.286320}
json_stats: {"accuracy_cls": 0.873680, "eta": "6:58:20", "iter": 2260, "loss": 0.861957, "loss_bbox": 0.221483, "loss_cls": 0.299206, "loss_mask": 0.215322, "loss_rpn_bbox_fpn2": 0.006210, "loss_rpn_bbox_fpn3": 0.008470, "loss_rpn_bbox_fpn4": 0.015821, "loss_rpn_bbox_fpn5": 0.007250, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.012877, "loss_rpn_cls_fpn3": 0.012375, "loss_rpn_cls_fpn4": 0.009620, "loss_rpn_cls_fpn5": 0.005892, "loss_rpn_cls_fpn6": 0.000415, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.286081}
json_stats: {"accuracy_cls": 0.885440, "eta": "6:57:50", "iter": 2280, "loss": 0.778041, "loss_bbox": 0.212443, "loss_cls": 0.265785, "loss_mask": 0.209304, "loss_rpn_bbox_fpn2": 0.003166, "loss_rpn_bbox_fpn3": 0.008761, "loss_rpn_bbox_fpn4": 0.016797, "loss_rpn_bbox_fpn5": 0.005998, "loss_rpn_bbox_fpn6": 0.000587, "loss_rpn_cls_fpn2": 0.009119, "loss_rpn_cls_fpn3": 0.010295, "loss_rpn_cls_fpn4": 0.014245, "loss_rpn_cls_fpn5": 0.006229, "loss_rpn_cls_fpn6": 0.000739, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.285802}
json_stats: {"accuracy_cls": 0.890267, "eta": "6:57:19", "iter": 2300, "loss": 0.730500, "loss_bbox": 0.218807, "loss_cls": 0.254370, "loss_mask": 0.196800, "loss_rpn_bbox_fpn2": 0.004219, "loss_rpn_bbox_fpn3": 0.006675, "loss_rpn_bbox_fpn4": 0.012826, "loss_rpn_bbox_fpn5": 0.003867, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010044, "loss_rpn_cls_fpn3": 0.011898, "loss_rpn_cls_fpn4": 0.004905, "loss_rpn_cls_fpn5": 0.003370, "loss_rpn_cls_fpn6": 0.000255, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.285518}
json_stats: {"accuracy_cls": 0.892090, "eta": "6:56:49", "iter": 2320, "loss": 0.752210, "loss_bbox": 0.201316, "loss_cls": 0.254310, "loss_mask": 0.196158, "loss_rpn_bbox_fpn2": 0.004009, "loss_rpn_bbox_fpn3": 0.006925, "loss_rpn_bbox_fpn4": 0.011542, "loss_rpn_bbox_fpn5": 0.006551, "loss_rpn_bbox_fpn6": 0.000257, "loss_rpn_cls_fpn2": 0.006374, "loss_rpn_cls_fpn3": 0.012315, "loss_rpn_cls_fpn4": 0.007587, "loss_rpn_cls_fpn5": 0.004774, "loss_rpn_cls_fpn6": 0.000717, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.285237}
json_stats: {"accuracy_cls": 0.884275, "eta": "6:56:27", "iter": 2340, "loss": 0.751282, "loss_bbox": 0.228509, "loss_cls": 0.254072, "loss_mask": 0.181490, "loss_rpn_bbox_fpn2": 0.003112, "loss_rpn_bbox_fpn3": 0.004846, "loss_rpn_bbox_fpn4": 0.015447, "loss_rpn_bbox_fpn5": 0.012013, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008115, "loss_rpn_cls_fpn3": 0.011513, "loss_rpn_cls_fpn4": 0.013327, "loss_rpn_cls_fpn5": 0.004219, "loss_rpn_cls_fpn6": 0.000165, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.285056}
json_stats: {"accuracy_cls": 0.891162, "eta": "6:56:04", "iter": 2360, "loss": 0.702071, "loss_bbox": 0.196285, "loss_cls": 0.249806, "loss_mask": 0.186815, "loss_rpn_bbox_fpn2": 0.001946, "loss_rpn_bbox_fpn3": 0.008230, "loss_rpn_bbox_fpn4": 0.015807, "loss_rpn_bbox_fpn5": 0.004163, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008130, "loss_rpn_cls_fpn3": 0.007319, "loss_rpn_cls_fpn4": 0.010110, "loss_rpn_cls_fpn5": 0.002513, "loss_rpn_cls_fpn6": 0.000019, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.284857}
json_stats: {"accuracy_cls": 0.895208, "eta": "6:55:46", "iter": 2380, "loss": 0.704436, "loss_bbox": 0.200531, "loss_cls": 0.244380, "loss_mask": 0.184641, "loss_rpn_bbox_fpn2": 0.001664, "loss_rpn_bbox_fpn3": 0.006353, "loss_rpn_bbox_fpn4": 0.011331, "loss_rpn_bbox_fpn5": 0.005277, "loss_rpn_bbox_fpn6": 0.000311, "loss_rpn_cls_fpn2": 0.002167, "loss_rpn_cls_fpn3": 0.010320, "loss_rpn_cls_fpn4": 0.007096, "loss_rpn_cls_fpn5": 0.007049, "loss_rpn_cls_fpn6": 0.001060, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.284716}
json_stats: {"accuracy_cls": 0.895874, "eta": "6:55:17", "iter": 2400, "loss": 0.723897, "loss_bbox": 0.185271, "loss_cls": 0.247393, "loss_mask": 0.188525, "loss_rpn_bbox_fpn2": 0.004192, "loss_rpn_bbox_fpn3": 0.005759, "loss_rpn_bbox_fpn4": 0.013102, "loss_rpn_bbox_fpn5": 0.005923, "loss_rpn_bbox_fpn6": 0.001438, "loss_rpn_cls_fpn2": 0.013018, "loss_rpn_cls_fpn3": 0.010478, "loss_rpn_cls_fpn4": 0.007232, "loss_rpn_cls_fpn5": 0.006874, "loss_rpn_cls_fpn6": 0.000968, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.284451}
json_stats: {"accuracy_cls": 0.880488, "eta": "6:55:00", "iter": 2420, "loss": 0.764722, "loss_bbox": 0.191264, "loss_cls": 0.283597, "loss_mask": 0.204015, "loss_rpn_bbox_fpn2": 0.004561, "loss_rpn_bbox_fpn3": 0.008066, "loss_rpn_bbox_fpn4": 0.018597, "loss_rpn_bbox_fpn5": 0.006603, "loss_rpn_bbox_fpn6": 0.000296, "loss_rpn_cls_fpn2": 0.007630, "loss_rpn_cls_fpn3": 0.011250, "loss_rpn_cls_fpn4": 0.013449, "loss_rpn_cls_fpn5": 0.004214, "loss_rpn_cls_fpn6": 0.001021, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.284317}
json_stats: {"accuracy_cls": 0.898438, "eta": "6:54:40", "iter": 2440, "loss": 0.712431, "loss_bbox": 0.217233, "loss_cls": 0.238083, "loss_mask": 0.177853, "loss_rpn_bbox_fpn2": 0.004308, "loss_rpn_bbox_fpn3": 0.008894, "loss_rpn_bbox_fpn4": 0.010709, "loss_rpn_bbox_fpn5": 0.006119, "loss_rpn_bbox_fpn6": 0.001056, "loss_rpn_cls_fpn2": 0.015746, "loss_rpn_cls_fpn3": 0.009563, "loss_rpn_cls_fpn4": 0.008432, "loss_rpn_cls_fpn5": 0.005684, "loss_rpn_cls_fpn6": 0.001194, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.284153}
json_stats: {"accuracy_cls": 0.877930, "eta": "6:54:18", "iter": 2460, "loss": 0.786862, "loss_bbox": 0.222131, "loss_cls": 0.274607, "loss_mask": 0.192045, "loss_rpn_bbox_fpn2": 0.004839, "loss_rpn_bbox_fpn3": 0.008933, "loss_rpn_bbox_fpn4": 0.018783, "loss_rpn_bbox_fpn5": 0.007538, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008169, "loss_rpn_cls_fpn3": 0.013066, "loss_rpn_cls_fpn4": 0.012787, "loss_rpn_cls_fpn5": 0.004353, "loss_rpn_cls_fpn6": 0.000110, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.283970}
json_stats: {"accuracy_cls": 0.886998, "eta": "6:53:48", "iter": 2480, "loss": 0.756586, "loss_bbox": 0.212874, "loss_cls": 0.257611, "loss_mask": 0.196955, "loss_rpn_bbox_fpn2": 0.003855, "loss_rpn_bbox_fpn3": 0.009151, "loss_rpn_bbox_fpn4": 0.016639, "loss_rpn_bbox_fpn5": 0.006284, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009083, "loss_rpn_cls_fpn3": 0.010224, "loss_rpn_cls_fpn4": 0.010093, "loss_rpn_cls_fpn5": 0.004104, "loss_rpn_cls_fpn6": 0.001000, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.283695}
json_stats: {"accuracy_cls": 0.882812, "eta": "6:53:32", "iter": 2500, "loss": 0.806935, "loss_bbox": 0.207047, "loss_cls": 0.271914, "loss_mask": 0.213529, "loss_rpn_bbox_fpn2": 0.003540, "loss_rpn_bbox_fpn3": 0.006541, "loss_rpn_bbox_fpn4": 0.013019, "loss_rpn_bbox_fpn5": 0.007797, "loss_rpn_bbox_fpn6": 0.000161, "loss_rpn_cls_fpn2": 0.009775, "loss_rpn_cls_fpn3": 0.017453, "loss_rpn_cls_fpn4": 0.007595, "loss_rpn_cls_fpn5": 0.005055, "loss_rpn_cls_fpn6": 0.000468, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.283575}
json_stats: {"accuracy_cls": 0.894884, "eta": "6:53:02", "iter": 2520, "loss": 0.721129, "loss_bbox": 0.194357, "loss_cls": 0.237063, "loss_mask": 0.182945, "loss_rpn_bbox_fpn2": 0.002586, "loss_rpn_bbox_fpn3": 0.005197, "loss_rpn_bbox_fpn4": 0.013163, "loss_rpn_bbox_fpn5": 0.005663, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008774, "loss_rpn_cls_fpn3": 0.010066, "loss_rpn_cls_fpn4": 0.008898, "loss_rpn_cls_fpn5": 0.003844, "loss_rpn_cls_fpn6": 0.000214, "lr": 0.001000, "mb_qsize": 64, "mem": 5902, "time": 0.283294}
json_stats: {"accuracy_cls": 0.894349, "eta": "6:52:43", "iter": 2540, "loss": 0.765204, "loss_bbox": 0.215093, "loss_cls": 0.266066, "loss_mask": 0.198078, "loss_rpn_bbox_fpn2": 0.002020, "loss_rpn_bbox_fpn3": 0.009402, "loss_rpn_bbox_fpn4": 0.009068, "loss_rpn_bbox_fpn5": 0.004712, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011312, "loss_rpn_cls_fpn3": 0.013900, "loss_rpn_cls_fpn4": 0.008444, "loss_rpn_cls_fpn5": 0.004101, "loss_rpn_cls_fpn6": 0.000427, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.283140}
json_stats: {"accuracy_cls": 0.882812, "eta": "6:52:18", "iter": 2560, "loss": 0.736462, "loss_bbox": 0.197170, "loss_cls": 0.260652, "loss_mask": 0.182180, "loss_rpn_bbox_fpn2": 0.006056, "loss_rpn_bbox_fpn3": 0.004530, "loss_rpn_bbox_fpn4": 0.011216, "loss_rpn_bbox_fpn5": 0.004694, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011041, "loss_rpn_cls_fpn3": 0.007225, "loss_rpn_cls_fpn4": 0.010124, "loss_rpn_cls_fpn5": 0.003710, "loss_rpn_cls_fpn6": 0.000617, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.282916}
json_stats: {"accuracy_cls": 0.869692, "eta": "6:51:51", "iter": 2580, "loss": 0.809758, "loss_bbox": 0.224165, "loss_cls": 0.298578, "loss_mask": 0.210067, "loss_rpn_bbox_fpn2": 0.002732, "loss_rpn_bbox_fpn3": 0.011003, "loss_rpn_bbox_fpn4": 0.017432, "loss_rpn_bbox_fpn5": 0.007282, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009574, "loss_rpn_cls_fpn3": 0.010557, "loss_rpn_cls_fpn4": 0.008494, "loss_rpn_cls_fpn5": 0.002854, "loss_rpn_cls_fpn6": 0.000594, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.282675}
json_stats: {"accuracy_cls": 0.900166, "eta": "6:51:26", "iter": 2600, "loss": 0.722529, "loss_bbox": 0.201811, "loss_cls": 0.240073, "loss_mask": 0.176516, "loss_rpn_bbox_fpn2": 0.002658, "loss_rpn_bbox_fpn3": 0.009598, "loss_rpn_bbox_fpn4": 0.010256, "loss_rpn_bbox_fpn5": 0.006590, "loss_rpn_bbox_fpn6": 0.000266, "loss_rpn_cls_fpn2": 0.007646, "loss_rpn_cls_fpn3": 0.007648, "loss_rpn_cls_fpn4": 0.009337, "loss_rpn_cls_fpn5": 0.004042, "loss_rpn_cls_fpn6": 0.000334, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.282450}
json_stats: {"accuracy_cls": 0.884666, "eta": "6:50:59", "iter": 2620, "loss": 0.749565, "loss_bbox": 0.205853, "loss_cls": 0.271922, "loss_mask": 0.192476, "loss_rpn_bbox_fpn2": 0.002950, "loss_rpn_bbox_fpn3": 0.005858, "loss_rpn_bbox_fpn4": 0.016723, "loss_rpn_bbox_fpn5": 0.008978, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006571, "loss_rpn_cls_fpn3": 0.009548, "loss_rpn_cls_fpn4": 0.011373, "loss_rpn_cls_fpn5": 0.004026, "loss_rpn_cls_fpn6": 0.000365, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.282215}
json_stats: {"accuracy_cls": 0.878418, "eta": "6:50:41", "iter": 2640, "loss": 0.856287, "loss_bbox": 0.220205, "loss_cls": 0.291159, "loss_mask": 0.186375, "loss_rpn_bbox_fpn2": 0.005950, "loss_rpn_bbox_fpn3": 0.014736, "loss_rpn_bbox_fpn4": 0.018011, "loss_rpn_bbox_fpn5": 0.010930, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.015597, "loss_rpn_cls_fpn3": 0.013802, "loss_rpn_cls_fpn4": 0.009366, "loss_rpn_cls_fpn5": 0.004932, "loss_rpn_cls_fpn6": 0.000161, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.282067}
json_stats: {"accuracy_cls": 0.902131, "eta": "6:50:16", "iter": 2660, "loss": 0.695391, "loss_bbox": 0.198378, "loss_cls": 0.233184, "loss_mask": 0.205743, "loss_rpn_bbox_fpn2": 0.001872, "loss_rpn_bbox_fpn3": 0.006490, "loss_rpn_bbox_fpn4": 0.011713, "loss_rpn_bbox_fpn5": 0.008263, "loss_rpn_bbox_fpn6": 0.000502, "loss_rpn_cls_fpn2": 0.010034, "loss_rpn_cls_fpn3": 0.010081, "loss_rpn_cls_fpn4": 0.005418, "loss_rpn_cls_fpn5": 0.005513, "loss_rpn_cls_fpn6": 0.000416, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.281845}
json_stats: {"accuracy_cls": 0.896973, "eta": "6:50:01", "iter": 2680, "loss": 0.679082, "loss_bbox": 0.195941, "loss_cls": 0.241098, "loss_mask": 0.162378, "loss_rpn_bbox_fpn2": 0.002798, "loss_rpn_bbox_fpn3": 0.008302, "loss_rpn_bbox_fpn4": 0.008261, "loss_rpn_bbox_fpn5": 0.007645, "loss_rpn_bbox_fpn6": 0.000824, "loss_rpn_cls_fpn2": 0.007689, "loss_rpn_cls_fpn3": 0.009778, "loss_rpn_cls_fpn4": 0.005271, "loss_rpn_cls_fpn5": 0.003316, "loss_rpn_cls_fpn6": 0.000811, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.281739}
json_stats: {"accuracy_cls": 0.892325, "eta": "6:49:37", "iter": 2700, "loss": 0.754775, "loss_bbox": 0.201274, "loss_cls": 0.246958, "loss_mask": 0.201219, "loss_rpn_bbox_fpn2": 0.004326, "loss_rpn_bbox_fpn3": 0.009905, "loss_rpn_bbox_fpn4": 0.015539, "loss_rpn_bbox_fpn5": 0.006625, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005794, "loss_rpn_cls_fpn3": 0.012674, "loss_rpn_cls_fpn4": 0.011518, "loss_rpn_cls_fpn5": 0.005215, "loss_rpn_cls_fpn6": 0.000103, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.281532}
json_stats: {"accuracy_cls": 0.886719, "eta": "6:49:17", "iter": 2720, "loss": 0.761063, "loss_bbox": 0.205460, "loss_cls": 0.253388, "loss_mask": 0.188326, "loss_rpn_bbox_fpn2": 0.003732, "loss_rpn_bbox_fpn3": 0.008591, "loss_rpn_bbox_fpn4": 0.014327, "loss_rpn_bbox_fpn5": 0.009470, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009231, "loss_rpn_cls_fpn3": 0.008037, "loss_rpn_cls_fpn4": 0.008321, "loss_rpn_cls_fpn5": 0.003443, "loss_rpn_cls_fpn6": 0.000244, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.281360}
json_stats: {"accuracy_cls": 0.881422, "eta": "6:49:01", "iter": 2740, "loss": 0.776952, "loss_bbox": 0.216512, "loss_cls": 0.276769, "loss_mask": 0.185310, "loss_rpn_bbox_fpn2": 0.006242, "loss_rpn_bbox_fpn3": 0.011156, "loss_rpn_bbox_fpn4": 0.011442, "loss_rpn_bbox_fpn5": 0.004028, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.013926, "loss_rpn_cls_fpn3": 0.013434, "loss_rpn_cls_fpn4": 0.008618, "loss_rpn_cls_fpn5": 0.002452, "loss_rpn_cls_fpn6": 0.000410, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.281248}
json_stats: {"accuracy_cls": 0.889380, "eta": "6:48:41", "iter": 2760, "loss": 0.687541, "loss_bbox": 0.190201, "loss_cls": 0.264928, "loss_mask": 0.174545, "loss_rpn_bbox_fpn2": 0.003535, "loss_rpn_bbox_fpn3": 0.006886, "loss_rpn_bbox_fpn4": 0.016336, "loss_rpn_bbox_fpn5": 0.001881, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011840, "loss_rpn_cls_fpn3": 0.010334, "loss_rpn_cls_fpn4": 0.007156, "loss_rpn_cls_fpn5": 0.001802, "loss_rpn_cls_fpn6": 0.000017, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.281085}
json_stats: {"accuracy_cls": 0.888823, "eta": "6:48:16", "iter": 2780, "loss": 0.757882, "loss_bbox": 0.234491, "loss_cls": 0.266291, "loss_mask": 0.228774, "loss_rpn_bbox_fpn2": 0.002082, "loss_rpn_bbox_fpn3": 0.008060, "loss_rpn_bbox_fpn4": 0.012683, "loss_rpn_bbox_fpn5": 0.008446, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005562, "loss_rpn_cls_fpn3": 0.006030, "loss_rpn_cls_fpn4": 0.008718, "loss_rpn_cls_fpn5": 0.003172, "loss_rpn_cls_fpn6": 0.000244, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.280861}
json_stats: {"accuracy_cls": 0.895020, "eta": "6:47:54", "iter": 2800, "loss": 0.680939, "loss_bbox": 0.207696, "loss_cls": 0.230782, "loss_mask": 0.176877, "loss_rpn_bbox_fpn2": 0.003186, "loss_rpn_bbox_fpn3": 0.005344, "loss_rpn_bbox_fpn4": 0.006098, "loss_rpn_bbox_fpn5": 0.007453, "loss_rpn_bbox_fpn6": 0.000678, "loss_rpn_cls_fpn2": 0.004630, "loss_rpn_cls_fpn3": 0.008132, "loss_rpn_cls_fpn4": 0.008324, "loss_rpn_cls_fpn5": 0.003815, "loss_rpn_cls_fpn6": 0.000882, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.280670}
json_stats: {"accuracy_cls": 0.876485, "eta": "6:47:31", "iter": 2820, "loss": 0.793341, "loss_bbox": 0.209738, "loss_cls": 0.259427, "loss_mask": 0.207636, "loss_rpn_bbox_fpn2": 0.002777, "loss_rpn_bbox_fpn3": 0.004406, "loss_rpn_bbox_fpn4": 0.014319, "loss_rpn_bbox_fpn5": 0.005678, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004837, "loss_rpn_cls_fpn3": 0.008813, "loss_rpn_cls_fpn4": 0.011297, "loss_rpn_cls_fpn5": 0.004233, "loss_rpn_cls_fpn6": 0.000067, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.280475}
json_stats: {"accuracy_cls": 0.885656, "eta": "6:47:08", "iter": 2840, "loss": 0.759644, "loss_bbox": 0.214040, "loss_cls": 0.272146, "loss_mask": 0.178832, "loss_rpn_bbox_fpn2": 0.002490, "loss_rpn_bbox_fpn3": 0.009820, "loss_rpn_bbox_fpn4": 0.015268, "loss_rpn_bbox_fpn5": 0.005366, "loss_rpn_bbox_fpn6": 0.000349, "loss_rpn_cls_fpn2": 0.005541, "loss_rpn_cls_fpn3": 0.011458, "loss_rpn_cls_fpn4": 0.009246, "loss_rpn_cls_fpn5": 0.004613, "loss_rpn_cls_fpn6": 0.000735, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.280273}
json_stats: {"accuracy_cls": 0.891323, "eta": "6:46:39", "iter": 2860, "loss": 0.678539, "loss_bbox": 0.192926, "loss_cls": 0.238035, "loss_mask": 0.185478, "loss_rpn_bbox_fpn2": 0.002602, "loss_rpn_bbox_fpn3": 0.004633, "loss_rpn_bbox_fpn4": 0.009109, "loss_rpn_bbox_fpn5": 0.002385, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006788, "loss_rpn_cls_fpn3": 0.006063, "loss_rpn_cls_fpn4": 0.005972, "loss_rpn_cls_fpn5": 0.002539, "loss_rpn_cls_fpn6": 0.000100, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.280005}
json_stats: {"accuracy_cls": 0.890625, "eta": "6:46:21", "iter": 2880, "loss": 0.672610, "loss_bbox": 0.202520, "loss_cls": 0.233846, "loss_mask": 0.175274, "loss_rpn_bbox_fpn2": 0.002963, "loss_rpn_bbox_fpn3": 0.005520, "loss_rpn_bbox_fpn4": 0.010832, "loss_rpn_bbox_fpn5": 0.005911, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006015, "loss_rpn_cls_fpn3": 0.007589, "loss_rpn_cls_fpn4": 0.009728, "loss_rpn_cls_fpn5": 0.003624, "loss_rpn_cls_fpn6": 0.000537, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.279864}
json_stats: {"accuracy_cls": 0.883517, "eta": "6:45:54", "iter": 2900, "loss": 0.745745, "loss_bbox": 0.207170, "loss_cls": 0.264737, "loss_mask": 0.185075, "loss_rpn_bbox_fpn2": 0.002316, "loss_rpn_bbox_fpn3": 0.009157, "loss_rpn_bbox_fpn4": 0.015299, "loss_rpn_bbox_fpn5": 0.003910, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010501, "loss_rpn_cls_fpn3": 0.010168, "loss_rpn_cls_fpn4": 0.005470, "loss_rpn_cls_fpn5": 0.005475, "loss_rpn_cls_fpn6": 0.000004, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.279611}
json_stats: {"accuracy_cls": 0.883301, "eta": "6:45:29", "iter": 2920, "loss": 0.808274, "loss_bbox": 0.233618, "loss_cls": 0.269159, "loss_mask": 0.212061, "loss_rpn_bbox_fpn2": 0.003153, "loss_rpn_bbox_fpn3": 0.009784, "loss_rpn_bbox_fpn4": 0.011952, "loss_rpn_bbox_fpn5": 0.009014, "loss_rpn_bbox_fpn6": 0.000266, "loss_rpn_cls_fpn2": 0.009265, "loss_rpn_cls_fpn3": 0.006720, "loss_rpn_cls_fpn4": 0.010241, "loss_rpn_cls_fpn5": 0.004164, "loss_rpn_cls_fpn6": 0.000513, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.279390}
json_stats: {"accuracy_cls": 0.883107, "eta": "6:45:07", "iter": 2940, "loss": 0.788613, "loss_bbox": 0.213646, "loss_cls": 0.271423, "loss_mask": 0.196293, "loss_rpn_bbox_fpn2": 0.004289, "loss_rpn_bbox_fpn3": 0.004307, "loss_rpn_bbox_fpn4": 0.009354, "loss_rpn_bbox_fpn5": 0.006383, "loss_rpn_bbox_fpn6": 0.000294, "loss_rpn_cls_fpn2": 0.007535, "loss_rpn_cls_fpn3": 0.009984, "loss_rpn_cls_fpn4": 0.008528, "loss_rpn_cls_fpn5": 0.006249, "loss_rpn_cls_fpn6": 0.000566, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.279199}
json_stats: {"accuracy_cls": 0.888051, "eta": "6:44:45", "iter": 2960, "loss": 0.832532, "loss_bbox": 0.207702, "loss_cls": 0.266712, "loss_mask": 0.217244, "loss_rpn_bbox_fpn2": 0.005785, "loss_rpn_bbox_fpn3": 0.008567, "loss_rpn_bbox_fpn4": 0.014447, "loss_rpn_bbox_fpn5": 0.005842, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009927, "loss_rpn_cls_fpn3": 0.008969, "loss_rpn_cls_fpn4": 0.006417, "loss_rpn_cls_fpn5": 0.003825, "loss_rpn_cls_fpn6": 0.000002, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.279013}
json_stats: {"accuracy_cls": 0.891331, "eta": "6:44:20", "iter": 2980, "loss": 0.740594, "loss_bbox": 0.173460, "loss_cls": 0.244322, "loss_mask": 0.182934, "loss_rpn_bbox_fpn2": 0.002019, "loss_rpn_bbox_fpn3": 0.003044, "loss_rpn_bbox_fpn4": 0.010642, "loss_rpn_bbox_fpn5": 0.004134, "loss_rpn_bbox_fpn6": 0.000540, "loss_rpn_cls_fpn2": 0.007290, "loss_rpn_cls_fpn3": 0.004717, "loss_rpn_cls_fpn4": 0.006282, "loss_rpn_cls_fpn5": 0.005839, "loss_rpn_cls_fpn6": 0.000546, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.278798}
json_stats: {"accuracy_cls": 0.875563, "eta": "6:44:03", "iter": 3000, "loss": 0.746182, "loss_bbox": 0.196944, "loss_cls": 0.267396, "loss_mask": 0.189636, "loss_rpn_bbox_fpn2": 0.001629, "loss_rpn_bbox_fpn3": 0.007419, "loss_rpn_bbox_fpn4": 0.010041, "loss_rpn_bbox_fpn5": 0.007859, "loss_rpn_bbox_fpn6": 0.001152, "loss_rpn_cls_fpn2": 0.007787, "loss_rpn_cls_fpn3": 0.010920, "loss_rpn_cls_fpn4": 0.009345, "loss_rpn_cls_fpn5": 0.003993, "loss_rpn_cls_fpn6": 0.001708, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.278662}
json_stats: {"accuracy_cls": 0.898115, "eta": "6:43:46", "iter": 3020, "loss": 0.712408, "loss_bbox": 0.200407, "loss_cls": 0.239419, "loss_mask": 0.196412, "loss_rpn_bbox_fpn2": 0.002698, "loss_rpn_bbox_fpn3": 0.009027, "loss_rpn_bbox_fpn4": 0.008421, "loss_rpn_bbox_fpn5": 0.005278, "loss_rpn_bbox_fpn6": 0.000663, "loss_rpn_cls_fpn2": 0.006198, "loss_rpn_cls_fpn3": 0.010156, "loss_rpn_cls_fpn4": 0.006703, "loss_rpn_cls_fpn5": 0.003110, "loss_rpn_cls_fpn6": 0.000899, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.278535}
json_stats: {"accuracy_cls": 0.902344, "eta": "6:43:36", "iter": 3040, "loss": 0.729357, "loss_bbox": 0.205100, "loss_cls": 0.243340, "loss_mask": 0.206856, "loss_rpn_bbox_fpn2": 0.004154, "loss_rpn_bbox_fpn3": 0.004144, "loss_rpn_bbox_fpn4": 0.011189, "loss_rpn_bbox_fpn5": 0.004176, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007969, "loss_rpn_cls_fpn3": 0.005900, "loss_rpn_cls_fpn4": 0.009187, "loss_rpn_cls_fpn5": 0.004278, "loss_rpn_cls_fpn6": 0.001579, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.278479}
json_stats: {"accuracy_cls": 0.894215, "eta": "6:43:32", "iter": 3060, "loss": 0.724771, "loss_bbox": 0.224455, "loss_cls": 0.251626, "loss_mask": 0.187811, "loss_rpn_bbox_fpn2": 0.004239, "loss_rpn_bbox_fpn3": 0.008637, "loss_rpn_bbox_fpn4": 0.012705, "loss_rpn_bbox_fpn5": 0.009437, "loss_rpn_bbox_fpn6": 0.000453, "loss_rpn_cls_fpn2": 0.010427, "loss_rpn_cls_fpn3": 0.010585, "loss_rpn_cls_fpn4": 0.013560, "loss_rpn_cls_fpn5": 0.004488, "loss_rpn_cls_fpn6": 0.000535, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.278498}
json_stats: {"accuracy_cls": 0.894978, "eta": "6:43:14", "iter": 3080, "loss": 0.705773, "loss_bbox": 0.215815, "loss_cls": 0.253777, "loss_mask": 0.191528, "loss_rpn_bbox_fpn2": 0.003304, "loss_rpn_bbox_fpn3": 0.005381, "loss_rpn_bbox_fpn4": 0.008888, "loss_rpn_bbox_fpn5": 0.005432, "loss_rpn_bbox_fpn6": 0.000088, "loss_rpn_cls_fpn2": 0.004727, "loss_rpn_cls_fpn3": 0.007544, "loss_rpn_cls_fpn4": 0.005871, "loss_rpn_cls_fpn5": 0.005166, "loss_rpn_cls_fpn6": 0.000131, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.278350}
json_stats: {"accuracy_cls": 0.889629, "eta": "6:42:52", "iter": 3100, "loss": 0.661810, "loss_bbox": 0.196467, "loss_cls": 0.243532, "loss_mask": 0.187435, "loss_rpn_bbox_fpn2": 0.003375, "loss_rpn_bbox_fpn3": 0.006983, "loss_rpn_bbox_fpn4": 0.016889, "loss_rpn_bbox_fpn5": 0.003012, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006727, "loss_rpn_cls_fpn3": 0.005900, "loss_rpn_cls_fpn4": 0.013272, "loss_rpn_cls_fpn5": 0.003114, "loss_rpn_cls_fpn6": 0.000815, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.278166}
json_stats: {"accuracy_cls": 0.886598, "eta": "6:42:34", "iter": 3120, "loss": 0.721514, "loss_bbox": 0.195399, "loss_cls": 0.259737, "loss_mask": 0.186531, "loss_rpn_bbox_fpn2": 0.003225, "loss_rpn_bbox_fpn3": 0.005834, "loss_rpn_bbox_fpn4": 0.013278, "loss_rpn_bbox_fpn5": 0.004167, "loss_rpn_bbox_fpn6": 0.001070, "loss_rpn_cls_fpn2": 0.010430, "loss_rpn_cls_fpn3": 0.010998, "loss_rpn_cls_fpn4": 0.007034, "loss_rpn_cls_fpn5": 0.003033, "loss_rpn_cls_fpn6": 0.001091, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.278025}
json_stats: {"accuracy_cls": 0.893507, "eta": "6:42:17", "iter": 3140, "loss": 0.646661, "loss_bbox": 0.188902, "loss_cls": 0.239502, "loss_mask": 0.171399, "loss_rpn_bbox_fpn2": 0.002570, "loss_rpn_bbox_fpn3": 0.008143, "loss_rpn_bbox_fpn4": 0.015638, "loss_rpn_bbox_fpn5": 0.002584, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006384, "loss_rpn_cls_fpn3": 0.008325, "loss_rpn_cls_fpn4": 0.006671, "loss_rpn_cls_fpn5": 0.003181, "loss_rpn_cls_fpn6": 0.000028, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.277889}
json_stats: {"accuracy_cls": 0.891379, "eta": "6:42:05", "iter": 3160, "loss": 0.729709, "loss_bbox": 0.188543, "loss_cls": 0.243480, "loss_mask": 0.189300, "loss_rpn_bbox_fpn2": 0.003961, "loss_rpn_bbox_fpn3": 0.007157, "loss_rpn_bbox_fpn4": 0.013922, "loss_rpn_bbox_fpn5": 0.005923, "loss_rpn_bbox_fpn6": 0.001207, "loss_rpn_cls_fpn2": 0.010838, "loss_rpn_cls_fpn3": 0.010491, "loss_rpn_cls_fpn4": 0.009760, "loss_rpn_cls_fpn5": 0.003818, "loss_rpn_cls_fpn6": 0.000451, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.277820}
json_stats: {"accuracy_cls": 0.891116, "eta": "6:41:45", "iter": 3180, "loss": 0.669804, "loss_bbox": 0.190923, "loss_cls": 0.239833, "loss_mask": 0.187987, "loss_rpn_bbox_fpn2": 0.001404, "loss_rpn_bbox_fpn3": 0.007044, "loss_rpn_bbox_fpn4": 0.007632, "loss_rpn_bbox_fpn5": 0.004754, "loss_rpn_bbox_fpn6": 0.000949, "loss_rpn_cls_fpn2": 0.006323, "loss_rpn_cls_fpn3": 0.009829, "loss_rpn_cls_fpn4": 0.006801, "loss_rpn_cls_fpn5": 0.004889, "loss_rpn_cls_fpn6": 0.000303, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.277650}
json_stats: {"accuracy_cls": 0.888672, "eta": "6:41:28", "iter": 3200, "loss": 0.719004, "loss_bbox": 0.201501, "loss_cls": 0.255221, "loss_mask": 0.186680, "loss_rpn_bbox_fpn2": 0.004845, "loss_rpn_bbox_fpn3": 0.005945, "loss_rpn_bbox_fpn4": 0.010486, "loss_rpn_bbox_fpn5": 0.007138, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011760, "loss_rpn_cls_fpn3": 0.005859, "loss_rpn_cls_fpn4": 0.009788, "loss_rpn_cls_fpn5": 0.004566, "loss_rpn_cls_fpn6": 0.000802, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.277520}
json_stats: {"accuracy_cls": 0.894531, "eta": "6:41:05", "iter": 3220, "loss": 0.723528, "loss_bbox": 0.201966, "loss_cls": 0.252350, "loss_mask": 0.192485, "loss_rpn_bbox_fpn2": 0.001277, "loss_rpn_bbox_fpn3": 0.008556, "loss_rpn_bbox_fpn4": 0.010928, "loss_rpn_bbox_fpn5": 0.006748, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006770, "loss_rpn_cls_fpn3": 0.012469, "loss_rpn_cls_fpn4": 0.006194, "loss_rpn_cls_fpn5": 0.003224, "loss_rpn_cls_fpn6": 0.000928, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.277321}
json_stats: {"accuracy_cls": 0.882663, "eta": "6:40:50", "iter": 3240, "loss": 0.774721, "loss_bbox": 0.206003, "loss_cls": 0.260042, "loss_mask": 0.210428, "loss_rpn_bbox_fpn2": 0.004033, "loss_rpn_bbox_fpn3": 0.009304, "loss_rpn_bbox_fpn4": 0.017565, "loss_rpn_bbox_fpn5": 0.005492, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.012486, "loss_rpn_cls_fpn3": 0.010248, "loss_rpn_cls_fpn4": 0.009532, "loss_rpn_cls_fpn5": 0.004048, "loss_rpn_cls_fpn6": 0.000242, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.277213}
json_stats: {"accuracy_cls": 0.876953, "eta": "6:40:30", "iter": 3260, "loss": 0.793363, "loss_bbox": 0.217882, "loss_cls": 0.282346, "loss_mask": 0.203106, "loss_rpn_bbox_fpn2": 0.004946, "loss_rpn_bbox_fpn3": 0.007187, "loss_rpn_bbox_fpn4": 0.015087, "loss_rpn_bbox_fpn5": 0.008686, "loss_rpn_bbox_fpn6": 0.000148, "loss_rpn_cls_fpn2": 0.013781, "loss_rpn_cls_fpn3": 0.009063, "loss_rpn_cls_fpn4": 0.010071, "loss_rpn_cls_fpn5": 0.004474, "loss_rpn_cls_fpn6": 0.000275, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.277039}
json_stats: {"accuracy_cls": 0.893663, "eta": "6:40:11", "iter": 3280, "loss": 0.764043, "loss_bbox": 0.212344, "loss_cls": 0.236808, "loss_mask": 0.204095, "loss_rpn_bbox_fpn2": 0.003702, "loss_rpn_bbox_fpn3": 0.010931, "loss_rpn_bbox_fpn4": 0.011224, "loss_rpn_bbox_fpn5": 0.004829, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006340, "loss_rpn_cls_fpn3": 0.009712, "loss_rpn_cls_fpn4": 0.008892, "loss_rpn_cls_fpn5": 0.002556, "loss_rpn_cls_fpn6": 0.000515, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.276882}
json_stats: {"accuracy_cls": 0.897315, "eta": "6:39:59", "iter": 3300, "loss": 0.715631, "loss_bbox": 0.211295, "loss_cls": 0.231756, "loss_mask": 0.184198, "loss_rpn_bbox_fpn2": 0.002992, "loss_rpn_bbox_fpn3": 0.007840, "loss_rpn_bbox_fpn4": 0.011186, "loss_rpn_bbox_fpn5": 0.005223, "loss_rpn_bbox_fpn6": 0.000134, "loss_rpn_cls_fpn2": 0.006260, "loss_rpn_cls_fpn3": 0.009454, "loss_rpn_cls_fpn4": 0.007378, "loss_rpn_cls_fpn5": 0.003890, "loss_rpn_cls_fpn6": 0.001050, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.276811}
json_stats: {"accuracy_cls": 0.895508, "eta": "6:39:41", "iter": 3320, "loss": 0.696877, "loss_bbox": 0.195287, "loss_cls": 0.240296, "loss_mask": 0.188837, "loss_rpn_bbox_fpn2": 0.001598, "loss_rpn_bbox_fpn3": 0.006625, "loss_rpn_bbox_fpn4": 0.008068, "loss_rpn_bbox_fpn5": 0.004404, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006262, "loss_rpn_cls_fpn3": 0.012375, "loss_rpn_cls_fpn4": 0.008363, "loss_rpn_cls_fpn5": 0.001958, "loss_rpn_cls_fpn6": 0.000480, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.276662}
json_stats: {"accuracy_cls": 0.905118, "eta": "6:39:24", "iter": 3340, "loss": 0.656022, "loss_bbox": 0.184034, "loss_cls": 0.240294, "loss_mask": 0.169307, "loss_rpn_bbox_fpn2": 0.001271, "loss_rpn_bbox_fpn3": 0.002363, "loss_rpn_bbox_fpn4": 0.008882, "loss_rpn_bbox_fpn5": 0.006208, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003996, "loss_rpn_cls_fpn3": 0.005283, "loss_rpn_cls_fpn4": 0.009223, "loss_rpn_cls_fpn5": 0.003989, "loss_rpn_cls_fpn6": 0.000110, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.276530}
json_stats: {"accuracy_cls": 0.886052, "eta": "6:39:05", "iter": 3360, "loss": 0.772112, "loss_bbox": 0.223259, "loss_cls": 0.263108, "loss_mask": 0.193784, "loss_rpn_bbox_fpn2": 0.002846, "loss_rpn_bbox_fpn3": 0.007066, "loss_rpn_bbox_fpn4": 0.011743, "loss_rpn_bbox_fpn5": 0.006261, "loss_rpn_bbox_fpn6": 0.000132, "loss_rpn_cls_fpn2": 0.009641, "loss_rpn_cls_fpn3": 0.008751, "loss_rpn_cls_fpn4": 0.011044, "loss_rpn_cls_fpn5": 0.005064, "loss_rpn_cls_fpn6": 0.000317, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.276375}
json_stats: {"accuracy_cls": 0.878193, "eta": "6:38:46", "iter": 3380, "loss": 0.743631, "loss_bbox": 0.211753, "loss_cls": 0.268392, "loss_mask": 0.184259, "loss_rpn_bbox_fpn2": 0.004040, "loss_rpn_bbox_fpn3": 0.013148, "loss_rpn_bbox_fpn4": 0.021719, "loss_rpn_bbox_fpn5": 0.004356, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008011, "loss_rpn_cls_fpn3": 0.012560, "loss_rpn_cls_fpn4": 0.008873, "loss_rpn_cls_fpn5": 0.001522, "loss_rpn_cls_fpn6": 0.000727, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.276227}
json_stats: {"accuracy_cls": 0.885742, "eta": "6:38:29", "iter": 3400, "loss": 0.758515, "loss_bbox": 0.212648, "loss_cls": 0.270896, "loss_mask": 0.172898, "loss_rpn_bbox_fpn2": 0.005109, "loss_rpn_bbox_fpn3": 0.007713, "loss_rpn_bbox_fpn4": 0.012633, "loss_rpn_bbox_fpn5": 0.007432, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006140, "loss_rpn_cls_fpn3": 0.008378, "loss_rpn_cls_fpn4": 0.003698, "loss_rpn_cls_fpn5": 0.003341, "loss_rpn_cls_fpn6": 0.000382, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.276092}
json_stats: {"accuracy_cls": 0.903318, "eta": "6:38:10", "iter": 3420, "loss": 0.674327, "loss_bbox": 0.184772, "loss_cls": 0.241565, "loss_mask": 0.172206, "loss_rpn_bbox_fpn2": 0.002547, "loss_rpn_bbox_fpn3": 0.005822, "loss_rpn_bbox_fpn4": 0.010575, "loss_rpn_bbox_fpn5": 0.004629, "loss_rpn_bbox_fpn6": 0.000331, "loss_rpn_cls_fpn2": 0.009061, "loss_rpn_cls_fpn3": 0.009290, "loss_rpn_cls_fpn4": 0.007024, "loss_rpn_cls_fpn5": 0.003913, "loss_rpn_cls_fpn6": 0.000823, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.275932}
json_stats: {"accuracy_cls": 0.906738, "eta": "6:37:51", "iter": 3440, "loss": 0.602682, "loss_bbox": 0.174086, "loss_cls": 0.211471, "loss_mask": 0.161143, "loss_rpn_bbox_fpn2": 0.003102, "loss_rpn_bbox_fpn3": 0.005917, "loss_rpn_bbox_fpn4": 0.006824, "loss_rpn_bbox_fpn5": 0.004387, "loss_rpn_bbox_fpn6": 0.001904, "loss_rpn_cls_fpn2": 0.011490, "loss_rpn_cls_fpn3": 0.008279, "loss_rpn_cls_fpn4": 0.005195, "loss_rpn_cls_fpn5": 0.004260, "loss_rpn_cls_fpn6": 0.000520, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.275783}
json_stats: {"accuracy_cls": 0.892308, "eta": "6:37:34", "iter": 3460, "loss": 0.686787, "loss_bbox": 0.198752, "loss_cls": 0.261888, "loss_mask": 0.174700, "loss_rpn_bbox_fpn2": 0.004455, "loss_rpn_bbox_fpn3": 0.009965, "loss_rpn_bbox_fpn4": 0.013641, "loss_rpn_bbox_fpn5": 0.002350, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007885, "loss_rpn_cls_fpn3": 0.008302, "loss_rpn_cls_fpn4": 0.008601, "loss_rpn_cls_fpn5": 0.001630, "loss_rpn_cls_fpn6": 0.000005, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.275651}
json_stats: {"accuracy_cls": 0.900879, "eta": "6:37:11", "iter": 3480, "loss": 0.675332, "loss_bbox": 0.191567, "loss_cls": 0.235410, "loss_mask": 0.171886, "loss_rpn_bbox_fpn2": 0.002205, "loss_rpn_bbox_fpn3": 0.005668, "loss_rpn_bbox_fpn4": 0.009102, "loss_rpn_bbox_fpn5": 0.001092, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003998, "loss_rpn_cls_fpn3": 0.006032, "loss_rpn_cls_fpn4": 0.004788, "loss_rpn_cls_fpn5": 0.001496, "loss_rpn_cls_fpn6": 0.000073, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.275447}
json_stats: {"accuracy_cls": 0.891768, "eta": "6:36:56", "iter": 3500, "loss": 0.732200, "loss_bbox": 0.195228, "loss_cls": 0.269945, "loss_mask": 0.186891, "loss_rpn_bbox_fpn2": 0.006553, "loss_rpn_bbox_fpn3": 0.006066, "loss_rpn_bbox_fpn4": 0.009810, "loss_rpn_bbox_fpn5": 0.008635, "loss_rpn_bbox_fpn6": 0.000472, "loss_rpn_cls_fpn2": 0.011050, "loss_rpn_cls_fpn3": 0.009487, "loss_rpn_cls_fpn4": 0.005591, "loss_rpn_cls_fpn5": 0.002956, "loss_rpn_cls_fpn6": 0.000720, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.275337}
json_stats: {"accuracy_cls": 0.891776, "eta": "6:36:37", "iter": 3520, "loss": 0.787977, "loss_bbox": 0.227254, "loss_cls": 0.239478, "loss_mask": 0.198604, "loss_rpn_bbox_fpn2": 0.002326, "loss_rpn_bbox_fpn3": 0.003597, "loss_rpn_bbox_fpn4": 0.008711, "loss_rpn_bbox_fpn5": 0.009533, "loss_rpn_bbox_fpn6": 0.000919, "loss_rpn_cls_fpn2": 0.006900, "loss_rpn_cls_fpn3": 0.008595, "loss_rpn_cls_fpn4": 0.007580, "loss_rpn_cls_fpn5": 0.004504, "loss_rpn_cls_fpn6": 0.000684, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.275180}
json_stats: {"accuracy_cls": 0.890801, "eta": "6:36:26", "iter": 3540, "loss": 0.733979, "loss_bbox": 0.191504, "loss_cls": 0.249457, "loss_mask": 0.170664, "loss_rpn_bbox_fpn2": 0.006158, "loss_rpn_bbox_fpn3": 0.008166, "loss_rpn_bbox_fpn4": 0.017751, "loss_rpn_bbox_fpn5": 0.005228, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011289, "loss_rpn_cls_fpn3": 0.011546, "loss_rpn_cls_fpn4": 0.010146, "loss_rpn_cls_fpn5": 0.004752, "loss_rpn_cls_fpn6": 0.000468, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.275121}
json_stats: {"accuracy_cls": 0.904498, "eta": "6:36:07", "iter": 3560, "loss": 0.616989, "loss_bbox": 0.194583, "loss_cls": 0.212294, "loss_mask": 0.168029, "loss_rpn_bbox_fpn2": 0.002512, "loss_rpn_bbox_fpn3": 0.006129, "loss_rpn_bbox_fpn4": 0.010348, "loss_rpn_bbox_fpn5": 0.005554, "loss_rpn_bbox_fpn6": 0.000278, "loss_rpn_cls_fpn2": 0.007072, "loss_rpn_cls_fpn3": 0.006776, "loss_rpn_cls_fpn4": 0.007767, "loss_rpn_cls_fpn5": 0.002476, "loss_rpn_cls_fpn6": 0.000997, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274962}
json_stats: {"accuracy_cls": 0.884721, "eta": "6:35:53", "iter": 3580, "loss": 0.765900, "loss_bbox": 0.206492, "loss_cls": 0.267095, "loss_mask": 0.164933, "loss_rpn_bbox_fpn2": 0.004366, "loss_rpn_bbox_fpn3": 0.009979, "loss_rpn_bbox_fpn4": 0.010713, "loss_rpn_bbox_fpn5": 0.004489, "loss_rpn_bbox_fpn6": 0.000229, "loss_rpn_cls_fpn2": 0.010216, "loss_rpn_cls_fpn3": 0.013102, "loss_rpn_cls_fpn4": 0.009657, "loss_rpn_cls_fpn5": 0.006267, "loss_rpn_cls_fpn6": 0.000506, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274866}
json_stats: {"accuracy_cls": 0.910645, "eta": "6:35:37", "iter": 3600, "loss": 0.583396, "loss_bbox": 0.179023, "loss_cls": 0.198924, "loss_mask": 0.163628, "loss_rpn_bbox_fpn2": 0.002466, "loss_rpn_bbox_fpn3": 0.006896, "loss_rpn_bbox_fpn4": 0.005506, "loss_rpn_bbox_fpn5": 0.003160, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006208, "loss_rpn_cls_fpn3": 0.008646, "loss_rpn_cls_fpn4": 0.005751, "loss_rpn_cls_fpn5": 0.001742, "loss_rpn_cls_fpn6": 0.000126, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274744}
json_stats: {"accuracy_cls": 0.896484, "eta": "6:35:25", "iter": 3620, "loss": 0.686049, "loss_bbox": 0.214724, "loss_cls": 0.233101, "loss_mask": 0.198239, "loss_rpn_bbox_fpn2": 0.003564, "loss_rpn_bbox_fpn3": 0.007101, "loss_rpn_bbox_fpn4": 0.010560, "loss_rpn_bbox_fpn5": 0.006494, "loss_rpn_bbox_fpn6": 0.000285, "loss_rpn_cls_fpn2": 0.010706, "loss_rpn_cls_fpn3": 0.009352, "loss_rpn_cls_fpn4": 0.008889, "loss_rpn_cls_fpn5": 0.004933, "loss_rpn_cls_fpn6": 0.000368, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274660}
json_stats: {"accuracy_cls": 0.880521, "eta": "6:35:14", "iter": 3640, "loss": 0.723804, "loss_bbox": 0.206632, "loss_cls": 0.263647, "loss_mask": 0.160602, "loss_rpn_bbox_fpn2": 0.000862, "loss_rpn_bbox_fpn3": 0.004182, "loss_rpn_bbox_fpn4": 0.013024, "loss_rpn_bbox_fpn5": 0.004605, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004087, "loss_rpn_cls_fpn3": 0.007482, "loss_rpn_cls_fpn4": 0.005290, "loss_rpn_cls_fpn5": 0.003109, "loss_rpn_cls_fpn6": 0.000189, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274598}
json_stats: {"accuracy_cls": 0.894756, "eta": "6:34:59", "iter": 3660, "loss": 0.747860, "loss_bbox": 0.218253, "loss_cls": 0.254952, "loss_mask": 0.188519, "loss_rpn_bbox_fpn2": 0.002571, "loss_rpn_bbox_fpn3": 0.005201, "loss_rpn_bbox_fpn4": 0.011260, "loss_rpn_bbox_fpn5": 0.006154, "loss_rpn_bbox_fpn6": 0.000235, "loss_rpn_cls_fpn2": 0.006246, "loss_rpn_cls_fpn3": 0.009493, "loss_rpn_cls_fpn4": 0.008897, "loss_rpn_cls_fpn5": 0.003764, "loss_rpn_cls_fpn6": 0.000348, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274485}
json_stats: {"accuracy_cls": 0.895408, "eta": "6:34:43", "iter": 3680, "loss": 0.708034, "loss_bbox": 0.200851, "loss_cls": 0.242473, "loss_mask": 0.189950, "loss_rpn_bbox_fpn2": 0.001790, "loss_rpn_bbox_fpn3": 0.006871, "loss_rpn_bbox_fpn4": 0.022070, "loss_rpn_bbox_fpn5": 0.001898, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005644, "loss_rpn_cls_fpn3": 0.006474, "loss_rpn_cls_fpn4": 0.011200, "loss_rpn_cls_fpn5": 0.003270, "loss_rpn_cls_fpn6": 0.000013, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274372}
json_stats: {"accuracy_cls": 0.861809, "eta": "6:34:31", "iter": 3700, "loss": 0.903900, "loss_bbox": 0.222807, "loss_cls": 0.309359, "loss_mask": 0.226166, "loss_rpn_bbox_fpn2": 0.003837, "loss_rpn_bbox_fpn3": 0.007198, "loss_rpn_bbox_fpn4": 0.026578, "loss_rpn_bbox_fpn5": 0.009407, "loss_rpn_bbox_fpn6": 0.000156, "loss_rpn_cls_fpn2": 0.008517, "loss_rpn_cls_fpn3": 0.017359, "loss_rpn_cls_fpn4": 0.010702, "loss_rpn_cls_fpn5": 0.004637, "loss_rpn_cls_fpn6": 0.000452, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274298}
json_stats: {"accuracy_cls": 0.893034, "eta": "6:34:18", "iter": 3720, "loss": 0.662139, "loss_bbox": 0.186825, "loss_cls": 0.251142, "loss_mask": 0.156661, "loss_rpn_bbox_fpn2": 0.002533, "loss_rpn_bbox_fpn3": 0.006648, "loss_rpn_bbox_fpn4": 0.015578, "loss_rpn_bbox_fpn5": 0.004762, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006805, "loss_rpn_cls_fpn3": 0.009870, "loss_rpn_cls_fpn4": 0.007199, "loss_rpn_cls_fpn5": 0.002645, "loss_rpn_cls_fpn6": 0.000024, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274202}
json_stats: {"accuracy_cls": 0.892138, "eta": "6:34:01", "iter": 3740, "loss": 0.700617, "loss_bbox": 0.196364, "loss_cls": 0.255348, "loss_mask": 0.180879, "loss_rpn_bbox_fpn2": 0.001915, "loss_rpn_bbox_fpn3": 0.009120, "loss_rpn_bbox_fpn4": 0.009877, "loss_rpn_bbox_fpn5": 0.005636, "loss_rpn_bbox_fpn6": 0.000875, "loss_rpn_cls_fpn2": 0.006047, "loss_rpn_cls_fpn3": 0.012256, "loss_rpn_cls_fpn4": 0.006521, "loss_rpn_cls_fpn5": 0.003898, "loss_rpn_cls_fpn6": 0.000274, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.274070}
json_stats: {"accuracy_cls": 0.887383, "eta": "6:33:45", "iter": 3760, "loss": 0.729287, "loss_bbox": 0.200750, "loss_cls": 0.258975, "loss_mask": 0.192233, "loss_rpn_bbox_fpn2": 0.002676, "loss_rpn_bbox_fpn3": 0.007620, "loss_rpn_bbox_fpn4": 0.018496, "loss_rpn_bbox_fpn5": 0.005556, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007677, "loss_rpn_cls_fpn3": 0.009020, "loss_rpn_cls_fpn4": 0.010818, "loss_rpn_cls_fpn5": 0.005886, "loss_rpn_cls_fpn6": 0.000095, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273948}
json_stats: {"accuracy_cls": 0.890283, "eta": "6:33:32", "iter": 3780, "loss": 0.714858, "loss_bbox": 0.204748, "loss_cls": 0.257834, "loss_mask": 0.185935, "loss_rpn_bbox_fpn2": 0.001914, "loss_rpn_bbox_fpn3": 0.005574, "loss_rpn_bbox_fpn4": 0.010728, "loss_rpn_bbox_fpn5": 0.003989, "loss_rpn_bbox_fpn6": 0.000655, "loss_rpn_cls_fpn2": 0.006016, "loss_rpn_cls_fpn3": 0.008986, "loss_rpn_cls_fpn4": 0.008976, "loss_rpn_cls_fpn5": 0.004176, "loss_rpn_cls_fpn6": 0.000915, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273866}
json_stats: {"accuracy_cls": 0.891259, "eta": "6:33:15", "iter": 3800, "loss": 0.734484, "loss_bbox": 0.222629, "loss_cls": 0.255573, "loss_mask": 0.192023, "loss_rpn_bbox_fpn2": 0.003462, "loss_rpn_bbox_fpn3": 0.011176, "loss_rpn_bbox_fpn4": 0.009461, "loss_rpn_bbox_fpn5": 0.002079, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004944, "loss_rpn_cls_fpn3": 0.010829, "loss_rpn_cls_fpn4": 0.006683, "loss_rpn_cls_fpn5": 0.002212, "loss_rpn_cls_fpn6": 0.000034, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273727}
json_stats: {"accuracy_cls": 0.893555, "eta": "6:33:00", "iter": 3820, "loss": 0.691316, "loss_bbox": 0.204678, "loss_cls": 0.244174, "loss_mask": 0.187108, "loss_rpn_bbox_fpn2": 0.002849, "loss_rpn_bbox_fpn3": 0.005191, "loss_rpn_bbox_fpn4": 0.010083, "loss_rpn_bbox_fpn5": 0.007461, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006787, "loss_rpn_cls_fpn3": 0.006691, "loss_rpn_cls_fpn4": 0.009003, "loss_rpn_cls_fpn5": 0.004791, "loss_rpn_cls_fpn6": 0.000519, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273614}
json_stats: {"accuracy_cls": 0.896973, "eta": "6:32:39", "iter": 3840, "loss": 0.722727, "loss_bbox": 0.195312, "loss_cls": 0.252108, "loss_mask": 0.197163, "loss_rpn_bbox_fpn2": 0.004246, "loss_rpn_bbox_fpn3": 0.006219, "loss_rpn_bbox_fpn4": 0.009636, "loss_rpn_bbox_fpn5": 0.004901, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011499, "loss_rpn_cls_fpn3": 0.007851, "loss_rpn_cls_fpn4": 0.007025, "loss_rpn_cls_fpn5": 0.001678, "loss_rpn_cls_fpn6": 0.000063, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273445}
json_stats: {"accuracy_cls": 0.903809, "eta": "6:32:26", "iter": 3860, "loss": 0.634729, "loss_bbox": 0.169902, "loss_cls": 0.243234, "loss_mask": 0.171797, "loss_rpn_bbox_fpn2": 0.003457, "loss_rpn_bbox_fpn3": 0.007663, "loss_rpn_bbox_fpn4": 0.020862, "loss_rpn_bbox_fpn5": 0.005102, "loss_rpn_bbox_fpn6": 0.000919, "loss_rpn_cls_fpn2": 0.008327, "loss_rpn_cls_fpn3": 0.008492, "loss_rpn_cls_fpn4": 0.011043, "loss_rpn_cls_fpn5": 0.003839, "loss_rpn_cls_fpn6": 0.000461, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273351}
json_stats: {"accuracy_cls": 0.913225, "eta": "6:32:07", "iter": 3880, "loss": 0.658138, "loss_bbox": 0.180774, "loss_cls": 0.208026, "loss_mask": 0.176822, "loss_rpn_bbox_fpn2": 0.001281, "loss_rpn_bbox_fpn3": 0.005603, "loss_rpn_bbox_fpn4": 0.008758, "loss_rpn_bbox_fpn5": 0.004136, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007498, "loss_rpn_cls_fpn3": 0.007399, "loss_rpn_cls_fpn4": 0.005965, "loss_rpn_cls_fpn5": 0.001958, "loss_rpn_cls_fpn6": 0.000276, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273193}
json_stats: {"accuracy_cls": 0.892499, "eta": "6:31:51", "iter": 3900, "loss": 0.632047, "loss_bbox": 0.194878, "loss_cls": 0.236735, "loss_mask": 0.162144, "loss_rpn_bbox_fpn2": 0.002299, "loss_rpn_bbox_fpn3": 0.006334, "loss_rpn_bbox_fpn4": 0.007643, "loss_rpn_bbox_fpn5": 0.002344, "loss_rpn_bbox_fpn6": 0.000178, "loss_rpn_cls_fpn2": 0.005621, "loss_rpn_cls_fpn3": 0.009330, "loss_rpn_cls_fpn4": 0.006331, "loss_rpn_cls_fpn5": 0.002031, "loss_rpn_cls_fpn6": 0.000383, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273072}
json_stats: {"accuracy_cls": 0.898883, "eta": "6:31:39", "iter": 3920, "loss": 0.725431, "loss_bbox": 0.194771, "loss_cls": 0.246156, "loss_mask": 0.199941, "loss_rpn_bbox_fpn2": 0.001340, "loss_rpn_bbox_fpn3": 0.007073, "loss_rpn_bbox_fpn4": 0.010817, "loss_rpn_bbox_fpn5": 0.007682, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004084, "loss_rpn_cls_fpn3": 0.008566, "loss_rpn_cls_fpn4": 0.006675, "loss_rpn_cls_fpn5": 0.005730, "loss_rpn_cls_fpn6": 0.000371, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.273000}
json_stats: {"accuracy_cls": 0.899414, "eta": "6:31:26", "iter": 3940, "loss": 0.661669, "loss_bbox": 0.190709, "loss_cls": 0.231804, "loss_mask": 0.175826, "loss_rpn_bbox_fpn2": 0.003365, "loss_rpn_bbox_fpn3": 0.004340, "loss_rpn_bbox_fpn4": 0.006775, "loss_rpn_bbox_fpn5": 0.003756, "loss_rpn_bbox_fpn6": 0.000475, "loss_rpn_cls_fpn2": 0.008738, "loss_rpn_cls_fpn3": 0.006653, "loss_rpn_cls_fpn4": 0.004547, "loss_rpn_cls_fpn5": 0.003811, "loss_rpn_cls_fpn6": 0.000262, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272909}
json_stats: {"accuracy_cls": 0.891602, "eta": "6:31:12", "iter": 3960, "loss": 0.642680, "loss_bbox": 0.159975, "loss_cls": 0.238177, "loss_mask": 0.146544, "loss_rpn_bbox_fpn2": 0.005047, "loss_rpn_bbox_fpn3": 0.007507, "loss_rpn_bbox_fpn4": 0.007770, "loss_rpn_bbox_fpn5": 0.003627, "loss_rpn_bbox_fpn6": 0.000304, "loss_rpn_cls_fpn2": 0.008430, "loss_rpn_cls_fpn3": 0.007211, "loss_rpn_cls_fpn4": 0.003844, "loss_rpn_cls_fpn5": 0.001650, "loss_rpn_cls_fpn6": 0.000434, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272808}
json_stats: {"accuracy_cls": 0.890625, "eta": "6:30:57", "iter": 3980, "loss": 0.685909, "loss_bbox": 0.187344, "loss_cls": 0.249903, "loss_mask": 0.178338, "loss_rpn_bbox_fpn2": 0.002274, "loss_rpn_bbox_fpn3": 0.009549, "loss_rpn_bbox_fpn4": 0.006808, "loss_rpn_bbox_fpn5": 0.003969, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009524, "loss_rpn_cls_fpn3": 0.007625, "loss_rpn_cls_fpn4": 0.005633, "loss_rpn_cls_fpn5": 0.001414, "loss_rpn_cls_fpn6": 0.000443, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272694}
json_stats: {"accuracy_cls": 0.885793, "eta": "6:30:44", "iter": 4000, "loss": 0.694008, "loss_bbox": 0.191039, "loss_cls": 0.247752, "loss_mask": 0.177152, "loss_rpn_bbox_fpn2": 0.002560, "loss_rpn_bbox_fpn3": 0.006290, "loss_rpn_bbox_fpn4": 0.011516, "loss_rpn_bbox_fpn5": 0.007026, "loss_rpn_bbox_fpn6": 0.000135, "loss_rpn_cls_fpn2": 0.008382, "loss_rpn_cls_fpn3": 0.006756, "loss_rpn_cls_fpn4": 0.010876, "loss_rpn_cls_fpn5": 0.005395, "loss_rpn_cls_fpn6": 0.000303, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272610}
json_stats: {"accuracy_cls": 0.896484, "eta": "6:30:32", "iter": 4020, "loss": 0.709091, "loss_bbox": 0.193233, "loss_cls": 0.240599, "loss_mask": 0.203610, "loss_rpn_bbox_fpn2": 0.002754, "loss_rpn_bbox_fpn3": 0.008453, "loss_rpn_bbox_fpn4": 0.015248, "loss_rpn_bbox_fpn5": 0.004792, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009112, "loss_rpn_cls_fpn3": 0.010378, "loss_rpn_cls_fpn4": 0.008561, "loss_rpn_cls_fpn5": 0.003848, "loss_rpn_cls_fpn6": 0.000147, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272534}
json_stats: {"accuracy_cls": 0.888528, "eta": "6:30:21", "iter": 4040, "loss": 0.707967, "loss_bbox": 0.202005, "loss_cls": 0.266541, "loss_mask": 0.166591, "loss_rpn_bbox_fpn2": 0.004248, "loss_rpn_bbox_fpn3": 0.007196, "loss_rpn_bbox_fpn4": 0.013828, "loss_rpn_bbox_fpn5": 0.004979, "loss_rpn_bbox_fpn6": 0.001231, "loss_rpn_cls_fpn2": 0.008923, "loss_rpn_cls_fpn3": 0.012072, "loss_rpn_cls_fpn4": 0.009145, "loss_rpn_cls_fpn5": 0.003756, "loss_rpn_cls_fpn6": 0.000737, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272466}
json_stats: {"accuracy_cls": 0.891113, "eta": "6:30:07", "iter": 4060, "loss": 0.729451, "loss_bbox": 0.208229, "loss_cls": 0.264372, "loss_mask": 0.191014, "loss_rpn_bbox_fpn2": 0.004771, "loss_rpn_bbox_fpn3": 0.007881, "loss_rpn_bbox_fpn4": 0.011607, "loss_rpn_bbox_fpn5": 0.007419, "loss_rpn_bbox_fpn6": 0.001325, "loss_rpn_cls_fpn2": 0.008137, "loss_rpn_cls_fpn3": 0.008632, "loss_rpn_cls_fpn4": 0.007780, "loss_rpn_cls_fpn5": 0.002994, "loss_rpn_cls_fpn6": 0.000975, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272373}
json_stats: {"accuracy_cls": 0.898626, "eta": "6:29:58", "iter": 4080, "loss": 0.596881, "loss_bbox": 0.168162, "loss_cls": 0.233922, "loss_mask": 0.149037, "loss_rpn_bbox_fpn2": 0.003585, "loss_rpn_bbox_fpn3": 0.005188, "loss_rpn_bbox_fpn4": 0.015067, "loss_rpn_bbox_fpn5": 0.003089, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006516, "loss_rpn_cls_fpn3": 0.005881, "loss_rpn_cls_fpn4": 0.005419, "loss_rpn_cls_fpn5": 0.002387, "loss_rpn_cls_fpn6": 0.000011, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272329}
json_stats: {"accuracy_cls": 0.878679, "eta": "6:29:47", "iter": 4100, "loss": 0.766515, "loss_bbox": 0.197617, "loss_cls": 0.271374, "loss_mask": 0.183369, "loss_rpn_bbox_fpn2": 0.003310, "loss_rpn_bbox_fpn3": 0.008918, "loss_rpn_bbox_fpn4": 0.015604, "loss_rpn_bbox_fpn5": 0.003246, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008999, "loss_rpn_cls_fpn3": 0.009823, "loss_rpn_cls_fpn4": 0.006972, "loss_rpn_cls_fpn5": 0.002138, "loss_rpn_cls_fpn6": 0.000047, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272262}
json_stats: {"accuracy_cls": 0.882812, "eta": "6:29:37", "iter": 4120, "loss": 0.694351, "loss_bbox": 0.200620, "loss_cls": 0.247973, "loss_mask": 0.176922, "loss_rpn_bbox_fpn2": 0.003612, "loss_rpn_bbox_fpn3": 0.009567, "loss_rpn_bbox_fpn4": 0.016206, "loss_rpn_bbox_fpn5": 0.004792, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009461, "loss_rpn_cls_fpn3": 0.010911, "loss_rpn_cls_fpn4": 0.005120, "loss_rpn_cls_fpn5": 0.003368, "loss_rpn_cls_fpn6": 0.000017, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272211}
json_stats: {"accuracy_cls": 0.903809, "eta": "6:29:25", "iter": 4140, "loss": 0.709384, "loss_bbox": 0.189375, "loss_cls": 0.227647, "loss_mask": 0.197380, "loss_rpn_bbox_fpn2": 0.002740, "loss_rpn_bbox_fpn3": 0.006549, "loss_rpn_bbox_fpn4": 0.010483, "loss_rpn_bbox_fpn5": 0.008243, "loss_rpn_bbox_fpn6": 0.000641, "loss_rpn_cls_fpn2": 0.007879, "loss_rpn_cls_fpn3": 0.008002, "loss_rpn_cls_fpn4": 0.006645, "loss_rpn_cls_fpn5": 0.003354, "loss_rpn_cls_fpn6": 0.000397, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272131}
json_stats: {"accuracy_cls": 0.893228, "eta": "6:29:14", "iter": 4160, "loss": 0.781032, "loss_bbox": 0.211286, "loss_cls": 0.267399, "loss_mask": 0.195765, "loss_rpn_bbox_fpn2": 0.005185, "loss_rpn_bbox_fpn3": 0.009032, "loss_rpn_bbox_fpn4": 0.010777, "loss_rpn_bbox_fpn5": 0.003885, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011578, "loss_rpn_cls_fpn3": 0.008558, "loss_rpn_cls_fpn4": 0.006444, "loss_rpn_cls_fpn5": 0.003489, "loss_rpn_cls_fpn6": 0.000118, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.272069}
json_stats: {"accuracy_cls": 0.898438, "eta": "6:29:02", "iter": 4180, "loss": 0.710503, "loss_bbox": 0.179765, "loss_cls": 0.238615, "loss_mask": 0.180584, "loss_rpn_bbox_fpn2": 0.002403, "loss_rpn_bbox_fpn3": 0.005753, "loss_rpn_bbox_fpn4": 0.011737, "loss_rpn_bbox_fpn5": 0.004925, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009433, "loss_rpn_cls_fpn3": 0.008453, "loss_rpn_cls_fpn4": 0.007281, "loss_rpn_cls_fpn5": 0.002765, "loss_rpn_cls_fpn6": 0.000446, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.271989}
json_stats: {"accuracy_cls": 0.888672, "eta": "6:28:53", "iter": 4200, "loss": 0.759317, "loss_bbox": 0.205443, "loss_cls": 0.260217, "loss_mask": 0.187691, "loss_rpn_bbox_fpn2": 0.002509, "loss_rpn_bbox_fpn3": 0.007239, "loss_rpn_bbox_fpn4": 0.016680, "loss_rpn_bbox_fpn5": 0.007971, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006975, "loss_rpn_cls_fpn3": 0.011292, "loss_rpn_cls_fpn4": 0.007458, "loss_rpn_cls_fpn5": 0.003572, "loss_rpn_cls_fpn6": 0.000501, "lr": 0.001000, "mb_qsize": 64, "mem": 5903, "time": 0.271957}
json_stats: {"accuracy_cls": 0.908203, "eta": "6:28:40", "iter": 4220, "loss": 0.622767, "loss_bbox": 0.173327, "loss_cls": 0.212334, "loss_mask": 0.170687, "loss_rpn_bbox_fpn2": 0.000838, "loss_rpn_bbox_fpn3": 0.005364, "loss_rpn_bbox_fpn4": 0.007880, "loss_rpn_bbox_fpn5": 0.003801, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003042, "loss_rpn_cls_fpn3": 0.004816, "loss_rpn_cls_fpn4": 0.005134, "loss_rpn_cls_fpn5": 0.001033, "loss_rpn_cls_fpn6": 0.000142, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271868}
json_stats: {"accuracy_cls": 0.897461, "eta": "6:28:25", "iter": 4240, "loss": 0.797384, "loss_bbox": 0.216494, "loss_cls": 0.245921, "loss_mask": 0.208239, "loss_rpn_bbox_fpn2": 0.003050, "loss_rpn_bbox_fpn3": 0.004863, "loss_rpn_bbox_fpn4": 0.010161, "loss_rpn_bbox_fpn5": 0.005514, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009811, "loss_rpn_cls_fpn3": 0.009171, "loss_rpn_cls_fpn4": 0.009290, "loss_rpn_cls_fpn5": 0.003206, "loss_rpn_cls_fpn6": 0.000340, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271755}
json_stats: {"accuracy_cls": 0.897016, "eta": "6:28:12", "iter": 4260, "loss": 0.686167, "loss_bbox": 0.179717, "loss_cls": 0.231200, "loss_mask": 0.178201, "loss_rpn_bbox_fpn2": 0.001539, "loss_rpn_bbox_fpn3": 0.004796, "loss_rpn_bbox_fpn4": 0.012197, "loss_rpn_bbox_fpn5": 0.004294, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007284, "loss_rpn_cls_fpn3": 0.006259, "loss_rpn_cls_fpn4": 0.008636, "loss_rpn_cls_fpn5": 0.003378, "loss_rpn_cls_fpn6": 0.000021, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271661}
json_stats: {"accuracy_cls": 0.892524, "eta": "6:27:59", "iter": 4280, "loss": 0.661765, "loss_bbox": 0.186733, "loss_cls": 0.251414, "loss_mask": 0.168316, "loss_rpn_bbox_fpn2": 0.002752, "loss_rpn_bbox_fpn3": 0.005753, "loss_rpn_bbox_fpn4": 0.012336, "loss_rpn_bbox_fpn5": 0.005322, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009294, "loss_rpn_cls_fpn3": 0.010749, "loss_rpn_cls_fpn4": 0.008059, "loss_rpn_cls_fpn5": 0.002610, "loss_rpn_cls_fpn6": 0.000174, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271577}
json_stats: {"accuracy_cls": 0.895808, "eta": "6:27:44", "iter": 4300, "loss": 0.662244, "loss_bbox": 0.179900, "loss_cls": 0.228285, "loss_mask": 0.177574, "loss_rpn_bbox_fpn2": 0.003436, "loss_rpn_bbox_fpn3": 0.005638, "loss_rpn_bbox_fpn4": 0.012227, "loss_rpn_bbox_fpn5": 0.007043, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007042, "loss_rpn_cls_fpn3": 0.008298, "loss_rpn_cls_fpn4": 0.006627, "loss_rpn_cls_fpn5": 0.003046, "loss_rpn_cls_fpn6": 0.000320, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271469}
json_stats: {"accuracy_cls": 0.892578, "eta": "6:27:32", "iter": 4320, "loss": 0.720108, "loss_bbox": 0.191219, "loss_cls": 0.253929, "loss_mask": 0.179015, "loss_rpn_bbox_fpn2": 0.001652, "loss_rpn_bbox_fpn3": 0.009125, "loss_rpn_bbox_fpn4": 0.010176, "loss_rpn_bbox_fpn5": 0.005893, "loss_rpn_bbox_fpn6": 0.000930, "loss_rpn_cls_fpn2": 0.011330, "loss_rpn_cls_fpn3": 0.011249, "loss_rpn_cls_fpn4": 0.005895, "loss_rpn_cls_fpn5": 0.002750, "loss_rpn_cls_fpn6": 0.000371, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271383}
json_stats: {"accuracy_cls": 0.903320, "eta": "6:27:21", "iter": 4340, "loss": 0.686225, "loss_bbox": 0.196408, "loss_cls": 0.216366, "loss_mask": 0.191606, "loss_rpn_bbox_fpn2": 0.002246, "loss_rpn_bbox_fpn3": 0.005258, "loss_rpn_bbox_fpn4": 0.009106, "loss_rpn_bbox_fpn5": 0.003863, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008218, "loss_rpn_cls_fpn3": 0.004465, "loss_rpn_cls_fpn4": 0.007929, "loss_rpn_cls_fpn5": 0.003739, "loss_rpn_cls_fpn6": 0.000081, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271327}
json_stats: {"accuracy_cls": 0.898660, "eta": "6:27:09", "iter": 4360, "loss": 0.714552, "loss_bbox": 0.201507, "loss_cls": 0.231068, "loss_mask": 0.186834, "loss_rpn_bbox_fpn2": 0.004785, "loss_rpn_bbox_fpn3": 0.005909, "loss_rpn_bbox_fpn4": 0.009742, "loss_rpn_bbox_fpn5": 0.004408, "loss_rpn_bbox_fpn6": 0.000804, "loss_rpn_cls_fpn2": 0.010071, "loss_rpn_cls_fpn3": 0.009022, "loss_rpn_cls_fpn4": 0.008550, "loss_rpn_cls_fpn5": 0.003187, "loss_rpn_cls_fpn6": 0.000728, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271245}
json_stats: {"accuracy_cls": 0.899982, "eta": "6:26:58", "iter": 4380, "loss": 0.662889, "loss_bbox": 0.180934, "loss_cls": 0.225266, "loss_mask": 0.179268, "loss_rpn_bbox_fpn2": 0.001584, "loss_rpn_bbox_fpn3": 0.005107, "loss_rpn_bbox_fpn4": 0.014359, "loss_rpn_bbox_fpn5": 0.004568, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008105, "loss_rpn_cls_fpn3": 0.008082, "loss_rpn_cls_fpn4": 0.007010, "loss_rpn_cls_fpn5": 0.004336, "loss_rpn_cls_fpn6": 0.000076, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271177}
json_stats: {"accuracy_cls": 0.890425, "eta": "6:26:46", "iter": 4400, "loss": 0.656647, "loss_bbox": 0.190736, "loss_cls": 0.245771, "loss_mask": 0.169642, "loss_rpn_bbox_fpn2": 0.003698, "loss_rpn_bbox_fpn3": 0.006823, "loss_rpn_bbox_fpn4": 0.009276, "loss_rpn_bbox_fpn5": 0.004827, "loss_rpn_bbox_fpn6": 0.001038, "loss_rpn_cls_fpn2": 0.006692, "loss_rpn_cls_fpn3": 0.009472, "loss_rpn_cls_fpn4": 0.006251, "loss_rpn_cls_fpn5": 0.002511, "loss_rpn_cls_fpn6": 0.000669, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271100}
json_stats: {"accuracy_cls": 0.894374, "eta": "6:26:33", "iter": 4420, "loss": 0.742139, "loss_bbox": 0.197586, "loss_cls": 0.251769, "loss_mask": 0.178637, "loss_rpn_bbox_fpn2": 0.003208, "loss_rpn_bbox_fpn3": 0.007367, "loss_rpn_bbox_fpn4": 0.012452, "loss_rpn_bbox_fpn5": 0.003845, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007426, "loss_rpn_cls_fpn3": 0.006522, "loss_rpn_cls_fpn4": 0.007135, "loss_rpn_cls_fpn5": 0.003452, "loss_rpn_cls_fpn6": 0.000941, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.271015}
json_stats: {"accuracy_cls": 0.880250, "eta": "6:26:21", "iter": 4440, "loss": 0.686247, "loss_bbox": 0.179227, "loss_cls": 0.267901, "loss_mask": 0.174952, "loss_rpn_bbox_fpn2": 0.003747, "loss_rpn_bbox_fpn3": 0.007159, "loss_rpn_bbox_fpn4": 0.012558, "loss_rpn_bbox_fpn5": 0.007140, "loss_rpn_bbox_fpn6": 0.000238, "loss_rpn_cls_fpn2": 0.007396, "loss_rpn_cls_fpn3": 0.007678, "loss_rpn_cls_fpn4": 0.009213, "loss_rpn_cls_fpn5": 0.005609, "loss_rpn_cls_fpn6": 0.000076, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270942}
json_stats: {"accuracy_cls": 0.916992, "eta": "6:26:04", "iter": 4460, "loss": 0.580102, "loss_bbox": 0.161426, "loss_cls": 0.204515, "loss_mask": 0.152991, "loss_rpn_bbox_fpn2": 0.001655, "loss_rpn_bbox_fpn3": 0.004293, "loss_rpn_bbox_fpn4": 0.007862, "loss_rpn_bbox_fpn5": 0.003070, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003620, "loss_rpn_cls_fpn3": 0.005043, "loss_rpn_cls_fpn4": 0.003853, "loss_rpn_cls_fpn5": 0.001630, "loss_rpn_cls_fpn6": 0.000002, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270801}
json_stats: {"accuracy_cls": 0.880451, "eta": "6:25:51", "iter": 4480, "loss": 0.773319, "loss_bbox": 0.205419, "loss_cls": 0.276207, "loss_mask": 0.214057, "loss_rpn_bbox_fpn2": 0.002437, "loss_rpn_bbox_fpn3": 0.006854, "loss_rpn_bbox_fpn4": 0.013937, "loss_rpn_bbox_fpn5": 0.007895, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006093, "loss_rpn_cls_fpn3": 0.006114, "loss_rpn_cls_fpn4": 0.009730, "loss_rpn_cls_fpn5": 0.002140, "loss_rpn_cls_fpn6": 0.000282, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270713}
json_stats: {"accuracy_cls": 0.890136, "eta": "6:25:38", "iter": 4500, "loss": 0.671841, "loss_bbox": 0.196570, "loss_cls": 0.253012, "loss_mask": 0.176132, "loss_rpn_bbox_fpn2": 0.002054, "loss_rpn_bbox_fpn3": 0.006712, "loss_rpn_bbox_fpn4": 0.015323, "loss_rpn_bbox_fpn5": 0.006025, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005504, "loss_rpn_cls_fpn3": 0.007556, "loss_rpn_cls_fpn4": 0.010627, "loss_rpn_cls_fpn5": 0.002568, "loss_rpn_cls_fpn6": 0.000024, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270626}
json_stats: {"accuracy_cls": 0.888184, "eta": "6:25:26", "iter": 4520, "loss": 0.710867, "loss_bbox": 0.188551, "loss_cls": 0.246237, "loss_mask": 0.187730, "loss_rpn_bbox_fpn2": 0.001807, "loss_rpn_bbox_fpn3": 0.005572, "loss_rpn_bbox_fpn4": 0.008249, "loss_rpn_bbox_fpn5": 0.006363, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006995, "loss_rpn_cls_fpn3": 0.007197, "loss_rpn_cls_fpn4": 0.004365, "loss_rpn_cls_fpn5": 0.005454, "loss_rpn_cls_fpn6": 0.000281, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270548}
json_stats: {"accuracy_cls": 0.904297, "eta": "6:25:14", "iter": 4540, "loss": 0.663335, "loss_bbox": 0.178448, "loss_cls": 0.233117, "loss_mask": 0.172643, "loss_rpn_bbox_fpn2": 0.002234, "loss_rpn_bbox_fpn3": 0.005387, "loss_rpn_bbox_fpn4": 0.009345, "loss_rpn_bbox_fpn5": 0.004557, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005083, "loss_rpn_cls_fpn3": 0.008352, "loss_rpn_cls_fpn4": 0.007322, "loss_rpn_cls_fpn5": 0.000793, "loss_rpn_cls_fpn6": 0.000045, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270471}
json_stats: {"accuracy_cls": 0.907319, "eta": "6:24:58", "iter": 4560, "loss": 0.608414, "loss_bbox": 0.181979, "loss_cls": 0.208485, "loss_mask": 0.153275, "loss_rpn_bbox_fpn2": 0.002297, "loss_rpn_bbox_fpn3": 0.005141, "loss_rpn_bbox_fpn4": 0.008633, "loss_rpn_bbox_fpn5": 0.004753, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007641, "loss_rpn_cls_fpn3": 0.006386, "loss_rpn_cls_fpn4": 0.006416, "loss_rpn_cls_fpn5": 0.001793, "loss_rpn_cls_fpn6": 0.000003, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270351}
json_stats: {"accuracy_cls": 0.912334, "eta": "6:24:45", "iter": 4580, "loss": 0.612699, "loss_bbox": 0.156023, "loss_cls": 0.212014, "loss_mask": 0.167280, "loss_rpn_bbox_fpn2": 0.001593, "loss_rpn_bbox_fpn3": 0.005448, "loss_rpn_bbox_fpn4": 0.006933, "loss_rpn_bbox_fpn5": 0.004109, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004761, "loss_rpn_cls_fpn3": 0.004519, "loss_rpn_cls_fpn4": 0.006735, "loss_rpn_cls_fpn5": 0.001907, "loss_rpn_cls_fpn6": 0.000073, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270254}
json_stats: {"accuracy_cls": 0.888127, "eta": "6:24:36", "iter": 4600, "loss": 0.746121, "loss_bbox": 0.199766, "loss_cls": 0.262380, "loss_mask": 0.197736, "loss_rpn_bbox_fpn2": 0.002244, "loss_rpn_bbox_fpn3": 0.006870, "loss_rpn_bbox_fpn4": 0.014619, "loss_rpn_bbox_fpn5": 0.005712, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007976, "loss_rpn_cls_fpn3": 0.006173, "loss_rpn_cls_fpn4": 0.007183, "loss_rpn_cls_fpn5": 0.002619, "loss_rpn_cls_fpn6": 0.000065, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270219}
json_stats: {"accuracy_cls": 0.911133, "eta": "6:24:23", "iter": 4620, "loss": 0.673248, "loss_bbox": 0.196118, "loss_cls": 0.221691, "loss_mask": 0.183936, "loss_rpn_bbox_fpn2": 0.002754, "loss_rpn_bbox_fpn3": 0.005939, "loss_rpn_bbox_fpn4": 0.009045, "loss_rpn_bbox_fpn5": 0.005890, "loss_rpn_bbox_fpn6": 0.000611, "loss_rpn_cls_fpn2": 0.004830, "loss_rpn_cls_fpn3": 0.007496, "loss_rpn_cls_fpn4": 0.005205, "loss_rpn_cls_fpn5": 0.003610, "loss_rpn_cls_fpn6": 0.000308, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270131}
json_stats: {"accuracy_cls": 0.897776, "eta": "6:24:12", "iter": 4640, "loss": 0.680001, "loss_bbox": 0.184996, "loss_cls": 0.244261, "loss_mask": 0.165776, "loss_rpn_bbox_fpn2": 0.002498, "loss_rpn_bbox_fpn3": 0.007867, "loss_rpn_bbox_fpn4": 0.011607, "loss_rpn_bbox_fpn5": 0.004803, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007959, "loss_rpn_cls_fpn3": 0.006875, "loss_rpn_cls_fpn4": 0.008385, "loss_rpn_cls_fpn5": 0.003228, "loss_rpn_cls_fpn6": 0.000275, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.270060}
json_stats: {"accuracy_cls": 0.885736, "eta": "6:23:59", "iter": 4660, "loss": 0.735664, "loss_bbox": 0.201213, "loss_cls": 0.255803, "loss_mask": 0.176917, "loss_rpn_bbox_fpn2": 0.007255, "loss_rpn_bbox_fpn3": 0.008508, "loss_rpn_bbox_fpn4": 0.009534, "loss_rpn_bbox_fpn5": 0.005097, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010271, "loss_rpn_cls_fpn3": 0.010093, "loss_rpn_cls_fpn4": 0.006382, "loss_rpn_cls_fpn5": 0.002250, "loss_rpn_cls_fpn6": 0.000095, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269978}
json_stats: {"accuracy_cls": 0.892352, "eta": "6:23:48", "iter": 4680, "loss": 0.741729, "loss_bbox": 0.187814, "loss_cls": 0.261013, "loss_mask": 0.181017, "loss_rpn_bbox_fpn2": 0.002677, "loss_rpn_bbox_fpn3": 0.005839, "loss_rpn_bbox_fpn4": 0.011081, "loss_rpn_bbox_fpn5": 0.006261, "loss_rpn_bbox_fpn6": 0.000286, "loss_rpn_cls_fpn2": 0.007250, "loss_rpn_cls_fpn3": 0.007703, "loss_rpn_cls_fpn4": 0.004190, "loss_rpn_cls_fpn5": 0.003484, "loss_rpn_cls_fpn6": 0.000812, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269907}
json_stats: {"accuracy_cls": 0.881975, "eta": "6:23:37", "iter": 4700, "loss": 0.740469, "loss_bbox": 0.208445, "loss_cls": 0.269514, "loss_mask": 0.176117, "loss_rpn_bbox_fpn2": 0.003572, "loss_rpn_bbox_fpn3": 0.005512, "loss_rpn_bbox_fpn4": 0.019125, "loss_rpn_bbox_fpn5": 0.005455, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006875, "loss_rpn_cls_fpn3": 0.007651, "loss_rpn_cls_fpn4": 0.007284, "loss_rpn_cls_fpn5": 0.001982, "loss_rpn_cls_fpn6": 0.000242, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269840}
json_stats: {"accuracy_cls": 0.891879, "eta": "6:23:27", "iter": 4720, "loss": 0.665849, "loss_bbox": 0.187578, "loss_cls": 0.247931, "loss_mask": 0.147678, "loss_rpn_bbox_fpn2": 0.002468, "loss_rpn_bbox_fpn3": 0.004449, "loss_rpn_bbox_fpn4": 0.013826, "loss_rpn_bbox_fpn5": 0.003012, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004596, "loss_rpn_cls_fpn3": 0.005423, "loss_rpn_cls_fpn4": 0.007483, "loss_rpn_cls_fpn5": 0.002789, "loss_rpn_cls_fpn6": 0.000747, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269785}
json_stats: {"accuracy_cls": 0.892582, "eta": "6:23:15", "iter": 4740, "loss": 0.683872, "loss_bbox": 0.189407, "loss_cls": 0.246173, "loss_mask": 0.188465, "loss_rpn_bbox_fpn2": 0.001944, "loss_rpn_bbox_fpn3": 0.005654, "loss_rpn_bbox_fpn4": 0.016274, "loss_rpn_bbox_fpn5": 0.008483, "loss_rpn_bbox_fpn6": 0.000093, "loss_rpn_cls_fpn2": 0.003906, "loss_rpn_cls_fpn3": 0.006824, "loss_rpn_cls_fpn4": 0.009593, "loss_rpn_cls_fpn5": 0.004880, "loss_rpn_cls_fpn6": 0.000308, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269715}
json_stats: {"accuracy_cls": 0.896634, "eta": "6:23:03", "iter": 4760, "loss": 0.696974, "loss_bbox": 0.205559, "loss_cls": 0.233055, "loss_mask": 0.163531, "loss_rpn_bbox_fpn2": 0.001347, "loss_rpn_bbox_fpn3": 0.007880, "loss_rpn_bbox_fpn4": 0.009261, "loss_rpn_bbox_fpn5": 0.004696, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004338, "loss_rpn_cls_fpn3": 0.007965, "loss_rpn_cls_fpn4": 0.006641, "loss_rpn_cls_fpn5": 0.002775, "loss_rpn_cls_fpn6": 0.000058, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269636}
json_stats: {"accuracy_cls": 0.891301, "eta": "6:22:53", "iter": 4780, "loss": 0.714016, "loss_bbox": 0.199380, "loss_cls": 0.249473, "loss_mask": 0.189246, "loss_rpn_bbox_fpn2": 0.002143, "loss_rpn_bbox_fpn3": 0.007762, "loss_rpn_bbox_fpn4": 0.015724, "loss_rpn_bbox_fpn5": 0.003971, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006941, "loss_rpn_cls_fpn3": 0.006791, "loss_rpn_cls_fpn4": 0.007832, "loss_rpn_cls_fpn5": 0.003656, "loss_rpn_cls_fpn6": 0.000149, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269573}
json_stats: {"accuracy_cls": 0.896973, "eta": "6:22:40", "iter": 4800, "loss": 0.652469, "loss_bbox": 0.185043, "loss_cls": 0.239476, "loss_mask": 0.172576, "loss_rpn_bbox_fpn2": 0.004846, "loss_rpn_bbox_fpn3": 0.004349, "loss_rpn_bbox_fpn4": 0.006368, "loss_rpn_bbox_fpn5": 0.005933, "loss_rpn_bbox_fpn6": 0.001465, "loss_rpn_cls_fpn2": 0.006172, "loss_rpn_cls_fpn3": 0.007949, "loss_rpn_cls_fpn4": 0.006806, "loss_rpn_cls_fpn5": 0.003920, "loss_rpn_cls_fpn6": 0.000718, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269485}
json_stats: {"accuracy_cls": 0.901916, "eta": "6:22:28", "iter": 4820, "loss": 0.653044, "loss_bbox": 0.180629, "loss_cls": 0.238366, "loss_mask": 0.160725, "loss_rpn_bbox_fpn2": 0.002835, "loss_rpn_bbox_fpn3": 0.007253, "loss_rpn_bbox_fpn4": 0.008844, "loss_rpn_bbox_fpn5": 0.003124, "loss_rpn_bbox_fpn6": 0.000047, "loss_rpn_cls_fpn2": 0.007142, "loss_rpn_cls_fpn3": 0.006014, "loss_rpn_cls_fpn4": 0.005527, "loss_rpn_cls_fpn5": 0.001316, "loss_rpn_cls_fpn6": 0.000109, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269416}
json_stats: {"accuracy_cls": 0.905073, "eta": "6:22:16", "iter": 4840, "loss": 0.617326, "loss_bbox": 0.180572, "loss_cls": 0.217136, "loss_mask": 0.161611, "loss_rpn_bbox_fpn2": 0.002943, "loss_rpn_bbox_fpn3": 0.006596, "loss_rpn_bbox_fpn4": 0.009942, "loss_rpn_bbox_fpn5": 0.003688, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003562, "loss_rpn_cls_fpn3": 0.005837, "loss_rpn_cls_fpn4": 0.007459, "loss_rpn_cls_fpn5": 0.001608, "loss_rpn_cls_fpn6": 0.000247, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269331}
json_stats: {"accuracy_cls": 0.911673, "eta": "6:22:02", "iter": 4860, "loss": 0.594202, "loss_bbox": 0.182432, "loss_cls": 0.203593, "loss_mask": 0.171266, "loss_rpn_bbox_fpn2": 0.000813, "loss_rpn_bbox_fpn3": 0.003232, "loss_rpn_bbox_fpn4": 0.007009, "loss_rpn_bbox_fpn5": 0.005984, "loss_rpn_bbox_fpn6": 0.000932, "loss_rpn_cls_fpn2": 0.004733, "loss_rpn_cls_fpn3": 0.003512, "loss_rpn_cls_fpn4": 0.002221, "loss_rpn_cls_fpn5": 0.001977, "loss_rpn_cls_fpn6": 0.000464, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269232}
json_stats: {"accuracy_cls": 0.897008, "eta": "6:21:51", "iter": 4880, "loss": 0.641625, "loss_bbox": 0.179638, "loss_cls": 0.238493, "loss_mask": 0.179313, "loss_rpn_bbox_fpn2": 0.003987, "loss_rpn_bbox_fpn3": 0.004867, "loss_rpn_bbox_fpn4": 0.007911, "loss_rpn_bbox_fpn5": 0.005089, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007153, "loss_rpn_cls_fpn3": 0.005973, "loss_rpn_cls_fpn4": 0.005958, "loss_rpn_cls_fpn5": 0.002149, "loss_rpn_cls_fpn6": 0.000223, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269171}
json_stats: {"accuracy_cls": 0.900391, "eta": "6:21:37", "iter": 4900, "loss": 0.665637, "loss_bbox": 0.192405, "loss_cls": 0.233529, "loss_mask": 0.174006, "loss_rpn_bbox_fpn2": 0.001906, "loss_rpn_bbox_fpn3": 0.007545, "loss_rpn_bbox_fpn4": 0.010848, "loss_rpn_bbox_fpn5": 0.003957, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005891, "loss_rpn_cls_fpn3": 0.007645, "loss_rpn_cls_fpn4": 0.004212, "loss_rpn_cls_fpn5": 0.001744, "loss_rpn_cls_fpn6": 0.000500, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269062}
json_stats: {"accuracy_cls": 0.895996, "eta": "6:21:26", "iter": 4920, "loss": 0.672617, "loss_bbox": 0.183475, "loss_cls": 0.227766, "loss_mask": 0.181446, "loss_rpn_bbox_fpn2": 0.004886, "loss_rpn_bbox_fpn3": 0.006671, "loss_rpn_bbox_fpn4": 0.010125, "loss_rpn_bbox_fpn5": 0.002243, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008410, "loss_rpn_cls_fpn3": 0.008118, "loss_rpn_cls_fpn4": 0.004147, "loss_rpn_cls_fpn5": 0.000887, "loss_rpn_cls_fpn6": 0.000003, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.269002}
json_stats: {"accuracy_cls": 0.894545, "eta": "6:21:15", "iter": 4940, "loss": 0.737255, "loss_bbox": 0.188078, "loss_cls": 0.253926, "loss_mask": 0.182118, "loss_rpn_bbox_fpn2": 0.004267, "loss_rpn_bbox_fpn3": 0.005841, "loss_rpn_bbox_fpn4": 0.012579, "loss_rpn_bbox_fpn5": 0.007633, "loss_rpn_bbox_fpn6": 0.000189, "loss_rpn_cls_fpn2": 0.007422, "loss_rpn_cls_fpn3": 0.005486, "loss_rpn_cls_fpn4": 0.010748, "loss_rpn_cls_fpn5": 0.003404, "loss_rpn_cls_fpn6": 0.000643, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268934}
json_stats: {"accuracy_cls": 0.872559, "eta": "6:21:07", "iter": 4960, "loss": 0.843815, "loss_bbox": 0.227687, "loss_cls": 0.290060, "loss_mask": 0.193958, "loss_rpn_bbox_fpn2": 0.001682, "loss_rpn_bbox_fpn3": 0.007349, "loss_rpn_bbox_fpn4": 0.019784, "loss_rpn_bbox_fpn5": 0.008573, "loss_rpn_bbox_fpn6": 0.000036, "loss_rpn_cls_fpn2": 0.005926, "loss_rpn_cls_fpn3": 0.013280, "loss_rpn_cls_fpn4": 0.009043, "loss_rpn_cls_fpn5": 0.003539, "loss_rpn_cls_fpn6": 0.000710, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268898}
json_stats: {"accuracy_cls": 0.887695, "eta": "6:20:55", "iter": 4980, "loss": 0.711491, "loss_bbox": 0.201881, "loss_cls": 0.243325, "loss_mask": 0.182462, "loss_rpn_bbox_fpn2": 0.004492, "loss_rpn_bbox_fpn3": 0.009345, "loss_rpn_bbox_fpn4": 0.012522, "loss_rpn_bbox_fpn5": 0.001849, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007880, "loss_rpn_cls_fpn3": 0.008714, "loss_rpn_cls_fpn4": 0.008382, "loss_rpn_cls_fpn5": 0.001854, "loss_rpn_cls_fpn6": 0.000037, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268823}
json_stats: {"accuracy_cls": 0.887300, "eta": "6:20:46", "iter": 5000, "loss": 0.712435, "loss_bbox": 0.206358, "loss_cls": 0.262358, "loss_mask": 0.169238, "loss_rpn_bbox_fpn2": 0.005727, "loss_rpn_bbox_fpn3": 0.006074, "loss_rpn_bbox_fpn4": 0.011417, "loss_rpn_bbox_fpn5": 0.005623, "loss_rpn_bbox_fpn6": 0.000160, "loss_rpn_cls_fpn2": 0.007444, "loss_rpn_cls_fpn3": 0.007019, "loss_rpn_cls_fpn4": 0.006943, "loss_rpn_cls_fpn5": 0.004150, "loss_rpn_cls_fpn6": 0.000128, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268787}
json_stats: {"accuracy_cls": 0.891113, "eta": "6:20:36", "iter": 5020, "loss": 0.762983, "loss_bbox": 0.216957, "loss_cls": 0.259260, "loss_mask": 0.183469, "loss_rpn_bbox_fpn2": 0.002641, "loss_rpn_bbox_fpn3": 0.006901, "loss_rpn_bbox_fpn4": 0.013310, "loss_rpn_bbox_fpn5": 0.005566, "loss_rpn_bbox_fpn6": 0.000325, "loss_rpn_cls_fpn2": 0.006984, "loss_rpn_cls_fpn3": 0.007167, "loss_rpn_cls_fpn4": 0.009789, "loss_rpn_cls_fpn5": 0.003743, "loss_rpn_cls_fpn6": 0.000528, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268725}
json_stats: {"accuracy_cls": 0.895959, "eta": "6:20:25", "iter": 5040, "loss": 0.628834, "loss_bbox": 0.186907, "loss_cls": 0.243855, "loss_mask": 0.162047, "loss_rpn_bbox_fpn2": 0.002113, "loss_rpn_bbox_fpn3": 0.007901, "loss_rpn_bbox_fpn4": 0.010133, "loss_rpn_bbox_fpn5": 0.003026, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005815, "loss_rpn_cls_fpn3": 0.006377, "loss_rpn_cls_fpn4": 0.005546, "loss_rpn_cls_fpn5": 0.001815, "loss_rpn_cls_fpn6": 0.000031, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268658}
json_stats: {"accuracy_cls": 0.898772, "eta": "6:20:11", "iter": 5060, "loss": 0.677296, "loss_bbox": 0.182010, "loss_cls": 0.231835, "loss_mask": 0.166718, "loss_rpn_bbox_fpn2": 0.002977, "loss_rpn_bbox_fpn3": 0.008186, "loss_rpn_bbox_fpn4": 0.011970, "loss_rpn_bbox_fpn5": 0.004233, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007475, "loss_rpn_cls_fpn3": 0.006770, "loss_rpn_cls_fpn4": 0.007755, "loss_rpn_cls_fpn5": 0.002659, "loss_rpn_cls_fpn6": 0.000013, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268556}
json_stats: {"accuracy_cls": 0.904785, "eta": "6:19:58", "iter": 5080, "loss": 0.624271, "loss_bbox": 0.172248, "loss_cls": 0.238207, "loss_mask": 0.183632, "loss_rpn_bbox_fpn2": 0.001801, "loss_rpn_bbox_fpn3": 0.005245, "loss_rpn_bbox_fpn4": 0.007340, "loss_rpn_bbox_fpn5": 0.002637, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004617, "loss_rpn_cls_fpn3": 0.005389, "loss_rpn_cls_fpn4": 0.005271, "loss_rpn_cls_fpn5": 0.001028, "loss_rpn_cls_fpn6": 0.000002, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268472}
json_stats: {"accuracy_cls": 0.876653, "eta": "6:19:47", "iter": 5100, "loss": 0.799938, "loss_bbox": 0.196247, "loss_cls": 0.294485, "loss_mask": 0.179534, "loss_rpn_bbox_fpn2": 0.002123, "loss_rpn_bbox_fpn3": 0.006812, "loss_rpn_bbox_fpn4": 0.017630, "loss_rpn_bbox_fpn5": 0.004131, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005963, "loss_rpn_cls_fpn3": 0.010145, "loss_rpn_cls_fpn4": 0.008078, "loss_rpn_cls_fpn5": 0.003246, "loss_rpn_cls_fpn6": 0.000031, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268402}
json_stats: {"accuracy_cls": 0.896973, "eta": "6:19:39", "iter": 5120, "loss": 0.690814, "loss_bbox": 0.195295, "loss_cls": 0.248873, "loss_mask": 0.192863, "loss_rpn_bbox_fpn2": 0.003679, "loss_rpn_bbox_fpn3": 0.006158, "loss_rpn_bbox_fpn4": 0.007437, "loss_rpn_bbox_fpn5": 0.005738, "loss_rpn_bbox_fpn6": 0.000448, "loss_rpn_cls_fpn2": 0.007985, "loss_rpn_cls_fpn3": 0.007910, "loss_rpn_cls_fpn4": 0.005624, "loss_rpn_cls_fpn5": 0.003317, "loss_rpn_cls_fpn6": 0.000394, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268374}
json_stats: {"accuracy_cls": 0.897100, "eta": "6:19:27", "iter": 5140, "loss": 0.615417, "loss_bbox": 0.179852, "loss_cls": 0.231154, "loss_mask": 0.169566, "loss_rpn_bbox_fpn2": 0.002287, "loss_rpn_bbox_fpn3": 0.003820, "loss_rpn_bbox_fpn4": 0.006718, "loss_rpn_bbox_fpn5": 0.006207, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002683, "loss_rpn_cls_fpn3": 0.004738, "loss_rpn_cls_fpn4": 0.007302, "loss_rpn_cls_fpn5": 0.001118, "loss_rpn_cls_fpn6": 0.000062, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268301}
json_stats: {"accuracy_cls": 0.890137, "eta": "6:19:18", "iter": 5160, "loss": 0.702158, "loss_bbox": 0.180565, "loss_cls": 0.259736, "loss_mask": 0.166217, "loss_rpn_bbox_fpn2": 0.003166, "loss_rpn_bbox_fpn3": 0.005670, "loss_rpn_bbox_fpn4": 0.010742, "loss_rpn_bbox_fpn5": 0.006087, "loss_rpn_bbox_fpn6": 0.000349, "loss_rpn_cls_fpn2": 0.006398, "loss_rpn_cls_fpn3": 0.004116, "loss_rpn_cls_fpn4": 0.006622, "loss_rpn_cls_fpn5": 0.002924, "loss_rpn_cls_fpn6": 0.000405, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268246}
json_stats: {"accuracy_cls": 0.909685, "eta": "6:19:08", "iter": 5180, "loss": 0.595903, "loss_bbox": 0.157832, "loss_cls": 0.220245, "loss_mask": 0.140977, "loss_rpn_bbox_fpn2": 0.002898, "loss_rpn_bbox_fpn3": 0.007167, "loss_rpn_bbox_fpn4": 0.014451, "loss_rpn_bbox_fpn5": 0.002127, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006638, "loss_rpn_cls_fpn3": 0.007857, "loss_rpn_cls_fpn4": 0.008047, "loss_rpn_cls_fpn5": 0.001894, "loss_rpn_cls_fpn6": 0.000279, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268203}
json_stats: {"accuracy_cls": 0.887566, "eta": "6:18:58", "iter": 5200, "loss": 0.717001, "loss_bbox": 0.194619, "loss_cls": 0.255539, "loss_mask": 0.163817, "loss_rpn_bbox_fpn2": 0.002487, "loss_rpn_bbox_fpn3": 0.006707, "loss_rpn_bbox_fpn4": 0.015720, "loss_rpn_bbox_fpn5": 0.005409, "loss_rpn_bbox_fpn6": 0.000379, "loss_rpn_cls_fpn2": 0.006910, "loss_rpn_cls_fpn3": 0.008470, "loss_rpn_cls_fpn4": 0.009054, "loss_rpn_cls_fpn5": 0.002398, "loss_rpn_cls_fpn6": 0.000255, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268143}
json_stats: {"accuracy_cls": 0.901716, "eta": "6:18:49", "iter": 5220, "loss": 0.666639, "loss_bbox": 0.194147, "loss_cls": 0.234586, "loss_mask": 0.201495, "loss_rpn_bbox_fpn2": 0.002980, "loss_rpn_bbox_fpn3": 0.006315, "loss_rpn_bbox_fpn4": 0.011817, "loss_rpn_bbox_fpn5": 0.004681, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005371, "loss_rpn_cls_fpn3": 0.007585, "loss_rpn_cls_fpn4": 0.004974, "loss_rpn_cls_fpn5": 0.002088, "loss_rpn_cls_fpn6": 0.000006, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268096}
json_stats: {"accuracy_cls": 0.890992, "eta": "6:18:37", "iter": 5240, "loss": 0.718495, "loss_bbox": 0.198597, "loss_cls": 0.255346, "loss_mask": 0.192695, "loss_rpn_bbox_fpn2": 0.001314, "loss_rpn_bbox_fpn3": 0.007157, "loss_rpn_bbox_fpn4": 0.012746, "loss_rpn_bbox_fpn5": 0.005596, "loss_rpn_bbox_fpn6": 0.000181, "loss_rpn_cls_fpn2": 0.004428, "loss_rpn_cls_fpn3": 0.007496, "loss_rpn_cls_fpn4": 0.007790, "loss_rpn_cls_fpn5": 0.003864, "loss_rpn_cls_fpn6": 0.000183, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.268021}
json_stats: {"accuracy_cls": 0.886230, "eta": "6:18:26", "iter": 5260, "loss": 0.654031, "loss_bbox": 0.191457, "loss_cls": 0.241605, "loss_mask": 0.161323, "loss_rpn_bbox_fpn2": 0.003476, "loss_rpn_bbox_fpn3": 0.006614, "loss_rpn_bbox_fpn4": 0.011253, "loss_rpn_bbox_fpn5": 0.005080, "loss_rpn_bbox_fpn6": 0.000356, "loss_rpn_cls_fpn2": 0.006961, "loss_rpn_cls_fpn3": 0.009356, "loss_rpn_cls_fpn4": 0.006670, "loss_rpn_cls_fpn5": 0.001996, "loss_rpn_cls_fpn6": 0.000090, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267955}
json_stats: {"accuracy_cls": 0.895315, "eta": "6:18:15", "iter": 5280, "loss": 0.599193, "loss_bbox": 0.166774, "loss_cls": 0.242270, "loss_mask": 0.145482, "loss_rpn_bbox_fpn2": 0.001918, "loss_rpn_bbox_fpn3": 0.007326, "loss_rpn_bbox_fpn4": 0.011390, "loss_rpn_bbox_fpn5": 0.005036, "loss_rpn_bbox_fpn6": 0.000422, "loss_rpn_cls_fpn2": 0.004653, "loss_rpn_cls_fpn3": 0.007306, "loss_rpn_cls_fpn4": 0.004401, "loss_rpn_cls_fpn5": 0.002325, "loss_rpn_cls_fpn6": 0.000250, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267887}
json_stats: {"accuracy_cls": 0.887207, "eta": "6:18:08", "iter": 5300, "loss": 0.696588, "loss_bbox": 0.188932, "loss_cls": 0.240450, "loss_mask": 0.180269, "loss_rpn_bbox_fpn2": 0.002774, "loss_rpn_bbox_fpn3": 0.006040, "loss_rpn_bbox_fpn4": 0.009300, "loss_rpn_bbox_fpn5": 0.007777, "loss_rpn_bbox_fpn6": 0.000456, "loss_rpn_cls_fpn2": 0.005558, "loss_rpn_cls_fpn3": 0.007397, "loss_rpn_cls_fpn4": 0.006230, "loss_rpn_cls_fpn5": 0.004300, "loss_rpn_cls_fpn6": 0.000597, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267869}
json_stats: {"accuracy_cls": 0.905052, "eta": "6:17:53", "iter": 5320, "loss": 0.613925, "loss_bbox": 0.173862, "loss_cls": 0.230184, "loss_mask": 0.166136, "loss_rpn_bbox_fpn2": 0.002693, "loss_rpn_bbox_fpn3": 0.006484, "loss_rpn_bbox_fpn4": 0.006751, "loss_rpn_bbox_fpn5": 0.003032, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010003, "loss_rpn_cls_fpn3": 0.007560, "loss_rpn_cls_fpn4": 0.005008, "loss_rpn_cls_fpn5": 0.001344, "loss_rpn_cls_fpn6": 0.000010, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267756}
json_stats: {"accuracy_cls": 0.895566, "eta": "6:17:41", "iter": 5340, "loss": 0.639916, "loss_bbox": 0.178454, "loss_cls": 0.239473, "loss_mask": 0.147749, "loss_rpn_bbox_fpn2": 0.003456, "loss_rpn_bbox_fpn3": 0.005130, "loss_rpn_bbox_fpn4": 0.010784, "loss_rpn_bbox_fpn5": 0.002108, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008537, "loss_rpn_cls_fpn3": 0.005183, "loss_rpn_cls_fpn4": 0.005578, "loss_rpn_cls_fpn5": 0.002463, "loss_rpn_cls_fpn6": 0.000010, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267678}
json_stats: {"accuracy_cls": 0.885254, "eta": "6:17:31", "iter": 5360, "loss": 0.748120, "loss_bbox": 0.194750, "loss_cls": 0.267238, "loss_mask": 0.199163, "loss_rpn_bbox_fpn2": 0.003474, "loss_rpn_bbox_fpn3": 0.008893, "loss_rpn_bbox_fpn4": 0.014522, "loss_rpn_bbox_fpn5": 0.007392, "loss_rpn_bbox_fpn6": 0.000310, "loss_rpn_cls_fpn2": 0.007733, "loss_rpn_cls_fpn3": 0.008467, "loss_rpn_cls_fpn4": 0.008654, "loss_rpn_cls_fpn5": 0.005257, "loss_rpn_cls_fpn6": 0.000603, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267617}
json_stats: {"accuracy_cls": 0.908098, "eta": "6:17:19", "iter": 5380, "loss": 0.682085, "loss_bbox": 0.193457, "loss_cls": 0.220916, "loss_mask": 0.195946, "loss_rpn_bbox_fpn2": 0.001979, "loss_rpn_bbox_fpn3": 0.004573, "loss_rpn_bbox_fpn4": 0.006721, "loss_rpn_bbox_fpn5": 0.005212, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005518, "loss_rpn_cls_fpn3": 0.007355, "loss_rpn_cls_fpn4": 0.005328, "loss_rpn_cls_fpn5": 0.005186, "loss_rpn_cls_fpn6": 0.000047, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267544}
json_stats: {"accuracy_cls": 0.912109, "eta": "6:17:07", "iter": 5400, "loss": 0.597987, "loss_bbox": 0.170000, "loss_cls": 0.205043, "loss_mask": 0.161123, "loss_rpn_bbox_fpn2": 0.001975, "loss_rpn_bbox_fpn3": 0.005005, "loss_rpn_bbox_fpn4": 0.010255, "loss_rpn_bbox_fpn5": 0.004312, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004429, "loss_rpn_cls_fpn3": 0.004911, "loss_rpn_cls_fpn4": 0.003135, "loss_rpn_cls_fpn5": 0.002220, "loss_rpn_cls_fpn6": 0.000082, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267469}
json_stats: {"accuracy_cls": 0.899414, "eta": "6:16:55", "iter": 5420, "loss": 0.664666, "loss_bbox": 0.186034, "loss_cls": 0.235928, "loss_mask": 0.157581, "loss_rpn_bbox_fpn2": 0.001352, "loss_rpn_bbox_fpn3": 0.006146, "loss_rpn_bbox_fpn4": 0.010471, "loss_rpn_bbox_fpn5": 0.000473, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005033, "loss_rpn_cls_fpn3": 0.005540, "loss_rpn_cls_fpn4": 0.005021, "loss_rpn_cls_fpn5": 0.001010, "loss_rpn_cls_fpn6": 0.000000, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267391}
json_stats: {"accuracy_cls": 0.898926, "eta": "6:16:45", "iter": 5440, "loss": 0.648826, "loss_bbox": 0.182086, "loss_cls": 0.233879, "loss_mask": 0.182417, "loss_rpn_bbox_fpn2": 0.001098, "loss_rpn_bbox_fpn3": 0.007662, "loss_rpn_bbox_fpn4": 0.007906, "loss_rpn_bbox_fpn5": 0.003831, "loss_rpn_bbox_fpn6": 0.000304, "loss_rpn_cls_fpn2": 0.007110, "loss_rpn_cls_fpn3": 0.010299, "loss_rpn_cls_fpn4": 0.003316, "loss_rpn_cls_fpn5": 0.001946, "loss_rpn_cls_fpn6": 0.000126, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267336}
json_stats: {"accuracy_cls": 0.892005, "eta": "6:16:35", "iter": 5460, "loss": 0.692524, "loss_bbox": 0.187522, "loss_cls": 0.248993, "loss_mask": 0.157340, "loss_rpn_bbox_fpn2": 0.003247, "loss_rpn_bbox_fpn3": 0.010428, "loss_rpn_bbox_fpn4": 0.010111, "loss_rpn_bbox_fpn5": 0.006651, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010310, "loss_rpn_cls_fpn3": 0.008086, "loss_rpn_cls_fpn4": 0.003428, "loss_rpn_cls_fpn5": 0.001981, "loss_rpn_cls_fpn6": 0.000026, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267278}
json_stats: {"accuracy_cls": 0.895276, "eta": "6:16:28", "iter": 5480, "loss": 0.667575, "loss_bbox": 0.179190, "loss_cls": 0.231855, "loss_mask": 0.166435, "loss_rpn_bbox_fpn2": 0.003264, "loss_rpn_bbox_fpn3": 0.005682, "loss_rpn_bbox_fpn4": 0.008412, "loss_rpn_bbox_fpn5": 0.004717, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003754, "loss_rpn_cls_fpn3": 0.004341, "loss_rpn_cls_fpn4": 0.006480, "loss_rpn_cls_fpn5": 0.002755, "loss_rpn_cls_fpn6": 0.000104, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267251}
json_stats: {"accuracy_cls": 0.892578, "eta": "6:16:22", "iter": 5500, "loss": 0.757084, "loss_bbox": 0.207906, "loss_cls": 0.253109, "loss_mask": 0.184142, "loss_rpn_bbox_fpn2": 0.002252, "loss_rpn_bbox_fpn3": 0.007399, "loss_rpn_bbox_fpn4": 0.012183, "loss_rpn_bbox_fpn5": 0.005863, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004853, "loss_rpn_cls_fpn3": 0.004661, "loss_rpn_cls_fpn4": 0.008129, "loss_rpn_cls_fpn5": 0.001595, "loss_rpn_cls_fpn6": 0.000025, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267247}
json_stats: {"accuracy_cls": 0.886719, "eta": "6:16:11", "iter": 5520, "loss": 0.716526, "loss_bbox": 0.210853, "loss_cls": 0.257869, "loss_mask": 0.194484, "loss_rpn_bbox_fpn2": 0.002304, "loss_rpn_bbox_fpn3": 0.007028, "loss_rpn_bbox_fpn4": 0.013918, "loss_rpn_bbox_fpn5": 0.007668, "loss_rpn_bbox_fpn6": 0.000462, "loss_rpn_cls_fpn2": 0.007474, "loss_rpn_cls_fpn3": 0.005814, "loss_rpn_cls_fpn4": 0.008161, "loss_rpn_cls_fpn5": 0.005603, "loss_rpn_cls_fpn6": 0.000337, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267177}
json_stats: {"accuracy_cls": 0.890844, "eta": "6:16:02", "iter": 5540, "loss": 0.699093, "loss_bbox": 0.183940, "loss_cls": 0.243930, "loss_mask": 0.168522, "loss_rpn_bbox_fpn2": 0.002804, "loss_rpn_bbox_fpn3": 0.005815, "loss_rpn_bbox_fpn4": 0.015010, "loss_rpn_bbox_fpn5": 0.004204, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007252, "loss_rpn_cls_fpn3": 0.006486, "loss_rpn_cls_fpn4": 0.008129, "loss_rpn_cls_fpn5": 0.002689, "loss_rpn_cls_fpn6": 0.000053, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267134}
json_stats: {"accuracy_cls": 0.891113, "eta": "6:15:51", "iter": 5560, "loss": 0.689832, "loss_bbox": 0.193030, "loss_cls": 0.261156, "loss_mask": 0.157692, "loss_rpn_bbox_fpn2": 0.005252, "loss_rpn_bbox_fpn3": 0.010566, "loss_rpn_bbox_fpn4": 0.009329, "loss_rpn_bbox_fpn5": 0.004057, "loss_rpn_bbox_fpn6": 0.000338, "loss_rpn_cls_fpn2": 0.008731, "loss_rpn_cls_fpn3": 0.008559, "loss_rpn_cls_fpn4": 0.004405, "loss_rpn_cls_fpn5": 0.003723, "loss_rpn_cls_fpn6": 0.000318, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267067}
json_stats: {"accuracy_cls": 0.887849, "eta": "6:15:42", "iter": 5580, "loss": 0.699263, "loss_bbox": 0.200106, "loss_cls": 0.269478, "loss_mask": 0.180491, "loss_rpn_bbox_fpn2": 0.005106, "loss_rpn_bbox_fpn3": 0.008055, "loss_rpn_bbox_fpn4": 0.012500, "loss_rpn_bbox_fpn5": 0.006475, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007102, "loss_rpn_cls_fpn3": 0.009950, "loss_rpn_cls_fpn4": 0.007583, "loss_rpn_cls_fpn5": 0.002348, "loss_rpn_cls_fpn6": 0.000497, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.267034}
json_stats: {"accuracy_cls": 0.895754, "eta": "6:15:33", "iter": 5600, "loss": 0.693324, "loss_bbox": 0.203333, "loss_cls": 0.245049, "loss_mask": 0.165670, "loss_rpn_bbox_fpn2": 0.002887, "loss_rpn_bbox_fpn3": 0.005504, "loss_rpn_bbox_fpn4": 0.012607, "loss_rpn_bbox_fpn5": 0.005014, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004125, "loss_rpn_cls_fpn3": 0.007073, "loss_rpn_cls_fpn4": 0.005210, "loss_rpn_cls_fpn5": 0.003877, "loss_rpn_cls_fpn6": 0.000536, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266979}
json_stats: {"accuracy_cls": 0.889648, "eta": "6:15:20", "iter": 5620, "loss": 0.706865, "loss_bbox": 0.199618, "loss_cls": 0.248390, "loss_mask": 0.185675, "loss_rpn_bbox_fpn2": 0.002689, "loss_rpn_bbox_fpn3": 0.007888, "loss_rpn_bbox_fpn4": 0.011144, "loss_rpn_bbox_fpn5": 0.007026, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006243, "loss_rpn_cls_fpn3": 0.006554, "loss_rpn_cls_fpn4": 0.005855, "loss_rpn_cls_fpn5": 0.002241, "loss_rpn_cls_fpn6": 0.000266, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266891}
json_stats: {"accuracy_cls": 0.900738, "eta": "6:15:09", "iter": 5640, "loss": 0.583502, "loss_bbox": 0.172753, "loss_cls": 0.219086, "loss_mask": 0.154028, "loss_rpn_bbox_fpn2": 0.003574, "loss_rpn_bbox_fpn3": 0.005380, "loss_rpn_bbox_fpn4": 0.006535, "loss_rpn_bbox_fpn5": 0.003371, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007024, "loss_rpn_cls_fpn3": 0.004315, "loss_rpn_cls_fpn4": 0.005365, "loss_rpn_cls_fpn5": 0.002135, "loss_rpn_cls_fpn6": 0.000156, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266831}
json_stats: {"accuracy_cls": 0.892772, "eta": "6:14:59", "iter": 5660, "loss": 0.677036, "loss_bbox": 0.208645, "loss_cls": 0.246304, "loss_mask": 0.186680, "loss_rpn_bbox_fpn2": 0.002676, "loss_rpn_bbox_fpn3": 0.010810, "loss_rpn_bbox_fpn4": 0.010465, "loss_rpn_bbox_fpn5": 0.003743, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005358, "loss_rpn_cls_fpn3": 0.009318, "loss_rpn_cls_fpn4": 0.006024, "loss_rpn_cls_fpn5": 0.002434, "loss_rpn_cls_fpn6": 0.000376, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266773}
json_stats: {"accuracy_cls": 0.900385, "eta": "6:14:48", "iter": 5680, "loss": 0.668891, "loss_bbox": 0.167731, "loss_cls": 0.227149, "loss_mask": 0.164094, "loss_rpn_bbox_fpn2": 0.001593, "loss_rpn_bbox_fpn3": 0.006275, "loss_rpn_bbox_fpn4": 0.006666, "loss_rpn_bbox_fpn5": 0.003333, "loss_rpn_bbox_fpn6": 0.000103, "loss_rpn_cls_fpn2": 0.005128, "loss_rpn_cls_fpn3": 0.007647, "loss_rpn_cls_fpn4": 0.003794, "loss_rpn_cls_fpn5": 0.002449, "loss_rpn_cls_fpn6": 0.000048, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266709}
json_stats: {"accuracy_cls": 0.892677, "eta": "6:14:38", "iter": 5700, "loss": 0.673720, "loss_bbox": 0.189503, "loss_cls": 0.248205, "loss_mask": 0.161219, "loss_rpn_bbox_fpn2": 0.001388, "loss_rpn_bbox_fpn3": 0.004815, "loss_rpn_bbox_fpn4": 0.013520, "loss_rpn_bbox_fpn5": 0.004521, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005007, "loss_rpn_cls_fpn3": 0.004733, "loss_rpn_cls_fpn4": 0.005736, "loss_rpn_cls_fpn5": 0.002251, "loss_rpn_cls_fpn6": 0.000218, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266648}
json_stats: {"accuracy_cls": 0.899509, "eta": "6:14:31", "iter": 5720, "loss": 0.661163, "loss_bbox": 0.187533, "loss_cls": 0.237770, "loss_mask": 0.171087, "loss_rpn_bbox_fpn2": 0.004223, "loss_rpn_bbox_fpn3": 0.003856, "loss_rpn_bbox_fpn4": 0.012007, "loss_rpn_bbox_fpn5": 0.008014, "loss_rpn_bbox_fpn6": 0.000656, "loss_rpn_cls_fpn2": 0.009130, "loss_rpn_cls_fpn3": 0.009076, "loss_rpn_cls_fpn4": 0.005805, "loss_rpn_cls_fpn5": 0.003833, "loss_rpn_cls_fpn6": 0.000444, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266626}
json_stats: {"accuracy_cls": 0.887397, "eta": "6:14:24", "iter": 5740, "loss": 0.661332, "loss_bbox": 0.178154, "loss_cls": 0.250399, "loss_mask": 0.170304, "loss_rpn_bbox_fpn2": 0.002756, "loss_rpn_bbox_fpn3": 0.006359, "loss_rpn_bbox_fpn4": 0.016875, "loss_rpn_bbox_fpn5": 0.005369, "loss_rpn_bbox_fpn6": 0.001532, "loss_rpn_cls_fpn2": 0.008976, "loss_rpn_cls_fpn3": 0.008872, "loss_rpn_cls_fpn4": 0.005475, "loss_rpn_cls_fpn5": 0.002512, "loss_rpn_cls_fpn6": 0.000464, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266611}
json_stats: {"accuracy_cls": 0.890930, "eta": "6:14:14", "iter": 5760, "loss": 0.692626, "loss_bbox": 0.203623, "loss_cls": 0.239864, "loss_mask": 0.177746, "loss_rpn_bbox_fpn2": 0.005321, "loss_rpn_bbox_fpn3": 0.007368, "loss_rpn_bbox_fpn4": 0.011082, "loss_rpn_bbox_fpn5": 0.007372, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009529, "loss_rpn_cls_fpn3": 0.007546, "loss_rpn_cls_fpn4": 0.006978, "loss_rpn_cls_fpn5": 0.002133, "loss_rpn_cls_fpn6": 0.000105, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266549}
json_stats: {"accuracy_cls": 0.884684, "eta": "6:14:03", "iter": 5780, "loss": 0.754844, "loss_bbox": 0.195023, "loss_cls": 0.271085, "loss_mask": 0.187615, "loss_rpn_bbox_fpn2": 0.003759, "loss_rpn_bbox_fpn3": 0.009049, "loss_rpn_bbox_fpn4": 0.012535, "loss_rpn_bbox_fpn5": 0.002553, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011458, "loss_rpn_cls_fpn3": 0.006797, "loss_rpn_cls_fpn4": 0.005222, "loss_rpn_cls_fpn5": 0.001119, "loss_rpn_cls_fpn6": 0.000053, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266492}
json_stats: {"accuracy_cls": 0.883428, "eta": "6:13:53", "iter": 5800, "loss": 0.796432, "loss_bbox": 0.216156, "loss_cls": 0.273902, "loss_mask": 0.190454, "loss_rpn_bbox_fpn2": 0.003384, "loss_rpn_bbox_fpn3": 0.010200, "loss_rpn_bbox_fpn4": 0.012439, "loss_rpn_bbox_fpn5": 0.005652, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.009636, "loss_rpn_cls_fpn3": 0.009700, "loss_rpn_cls_fpn4": 0.006934, "loss_rpn_cls_fpn5": 0.002389, "loss_rpn_cls_fpn6": 0.000220, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266435}
json_stats: {"accuracy_cls": 0.900015, "eta": "6:13:43", "iter": 5820, "loss": 0.595033, "loss_bbox": 0.156506, "loss_cls": 0.203096, "loss_mask": 0.185520, "loss_rpn_bbox_fpn2": 0.001161, "loss_rpn_bbox_fpn3": 0.003041, "loss_rpn_bbox_fpn4": 0.007717, "loss_rpn_bbox_fpn5": 0.003872, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002835, "loss_rpn_cls_fpn3": 0.002586, "loss_rpn_cls_fpn4": 0.003447, "loss_rpn_cls_fpn5": 0.001510, "loss_rpn_cls_fpn6": 0.000013, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266375}
json_stats: {"accuracy_cls": 0.900555, "eta": "6:13:34", "iter": 5840, "loss": 0.686365, "loss_bbox": 0.198700, "loss_cls": 0.245609, "loss_mask": 0.168521, "loss_rpn_bbox_fpn2": 0.004066, "loss_rpn_bbox_fpn3": 0.004371, "loss_rpn_bbox_fpn4": 0.010194, "loss_rpn_bbox_fpn5": 0.004276, "loss_rpn_bbox_fpn6": 0.000253, "loss_rpn_cls_fpn2": 0.006825, "loss_rpn_cls_fpn3": 0.009181, "loss_rpn_cls_fpn4": 0.005070, "loss_rpn_cls_fpn5": 0.003293, "loss_rpn_cls_fpn6": 0.000268, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266329}
json_stats: {"accuracy_cls": 0.899184, "eta": "6:13:25", "iter": 5860, "loss": 0.606323, "loss_bbox": 0.173055, "loss_cls": 0.226177, "loss_mask": 0.147016, "loss_rpn_bbox_fpn2": 0.002838, "loss_rpn_bbox_fpn3": 0.003848, "loss_rpn_bbox_fpn4": 0.014244, "loss_rpn_bbox_fpn5": 0.005094, "loss_rpn_bbox_fpn6": 0.000212, "loss_rpn_cls_fpn2": 0.002161, "loss_rpn_cls_fpn3": 0.003732, "loss_rpn_cls_fpn4": 0.007662, "loss_rpn_cls_fpn5": 0.003696, "loss_rpn_cls_fpn6": 0.000891, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266286}
json_stats: {"accuracy_cls": 0.911668, "eta": "6:13:14", "iter": 5880, "loss": 0.570969, "loss_bbox": 0.162574, "loss_cls": 0.208960, "loss_mask": 0.140055, "loss_rpn_bbox_fpn2": 0.001990, "loss_rpn_bbox_fpn3": 0.003455, "loss_rpn_bbox_fpn4": 0.009005, "loss_rpn_bbox_fpn5": 0.003920, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003241, "loss_rpn_cls_fpn3": 0.002887, "loss_rpn_cls_fpn4": 0.004924, "loss_rpn_cls_fpn5": 0.001847, "loss_rpn_cls_fpn6": 0.000017, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266224}
json_stats: {"accuracy_cls": 0.889164, "eta": "6:13:06", "iter": 5900, "loss": 0.702401, "loss_bbox": 0.183581, "loss_cls": 0.249883, "loss_mask": 0.169567, "loss_rpn_bbox_fpn2": 0.003011, "loss_rpn_bbox_fpn3": 0.004727, "loss_rpn_bbox_fpn4": 0.013488, "loss_rpn_bbox_fpn5": 0.001376, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005621, "loss_rpn_cls_fpn3": 0.005195, "loss_rpn_cls_fpn4": 0.010772, "loss_rpn_cls_fpn5": 0.002922, "loss_rpn_cls_fpn6": 0.000017, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266189}
json_stats: {"accuracy_cls": 0.867676, "eta": "6:12:58", "iter": 5920, "loss": 0.779293, "loss_bbox": 0.212416, "loss_cls": 0.292439, "loss_mask": 0.181976, "loss_rpn_bbox_fpn2": 0.004288, "loss_rpn_bbox_fpn3": 0.011942, "loss_rpn_bbox_fpn4": 0.021688, "loss_rpn_bbox_fpn5": 0.006928, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008296, "loss_rpn_cls_fpn3": 0.009110, "loss_rpn_cls_fpn4": 0.005914, "loss_rpn_cls_fpn5": 0.003258, "loss_rpn_cls_fpn6": 0.000054, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266154}
json_stats: {"accuracy_cls": 0.895996, "eta": "6:12:47", "iter": 5940, "loss": 0.663520, "loss_bbox": 0.190658, "loss_cls": 0.234401, "loss_mask": 0.160848, "loss_rpn_bbox_fpn2": 0.001302, "loss_rpn_bbox_fpn3": 0.002772, "loss_rpn_bbox_fpn4": 0.007508, "loss_rpn_bbox_fpn5": 0.002832, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001900, "loss_rpn_cls_fpn3": 0.007383, "loss_rpn_cls_fpn4": 0.004147, "loss_rpn_cls_fpn5": 0.001186, "loss_rpn_cls_fpn6": 0.000803, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266095}
json_stats: {"accuracy_cls": 0.897244, "eta": "6:12:40", "iter": 5960, "loss": 0.666665, "loss_bbox": 0.182091, "loss_cls": 0.232232, "loss_mask": 0.148473, "loss_rpn_bbox_fpn2": 0.003406, "loss_rpn_bbox_fpn3": 0.004732, "loss_rpn_bbox_fpn4": 0.008078, "loss_rpn_bbox_fpn5": 0.006137, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.011153, "loss_rpn_cls_fpn3": 0.004141, "loss_rpn_cls_fpn4": 0.004511, "loss_rpn_cls_fpn5": 0.001486, "loss_rpn_cls_fpn6": 0.000110, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266068}
json_stats: {"accuracy_cls": 0.879349, "eta": "6:12:32", "iter": 5980, "loss": 0.734572, "loss_bbox": 0.197208, "loss_cls": 0.272274, "loss_mask": 0.168143, "loss_rpn_bbox_fpn2": 0.005773, "loss_rpn_bbox_fpn3": 0.007596, "loss_rpn_bbox_fpn4": 0.011974, "loss_rpn_bbox_fpn5": 0.005428, "loss_rpn_bbox_fpn6": 0.000843, "loss_rpn_cls_fpn2": 0.012526, "loss_rpn_cls_fpn3": 0.005345, "loss_rpn_cls_fpn4": 0.007199, "loss_rpn_cls_fpn5": 0.002881, "loss_rpn_cls_fpn6": 0.000462, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.266037}
json_stats: {"accuracy_cls": 0.893892, "eta": "6:12:22", "iter": 6000, "loss": 0.649567, "loss_bbox": 0.182307, "loss_cls": 0.241668, "loss_mask": 0.178792, "loss_rpn_bbox_fpn2": 0.002359, "loss_rpn_bbox_fpn3": 0.007293, "loss_rpn_bbox_fpn4": 0.008051, "loss_rpn_bbox_fpn5": 0.002582, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008030, "loss_rpn_cls_fpn3": 0.007566, "loss_rpn_cls_fpn4": 0.007292, "loss_rpn_cls_fpn5": 0.001360, "loss_rpn_cls_fpn6": 0.000005, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.265978}
json_stats: {"accuracy_cls": 0.901431, "eta": "6:12:11", "iter": 6020, "loss": 0.651921, "loss_bbox": 0.189853, "loss_cls": 0.227731, "loss_mask": 0.155278, "loss_rpn_bbox_fpn2": 0.003554, "loss_rpn_bbox_fpn3": 0.007928, "loss_rpn_bbox_fpn4": 0.013974, "loss_rpn_bbox_fpn5": 0.004521, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.008121, "loss_rpn_cls_fpn3": 0.005913, "loss_rpn_cls_fpn4": 0.008006, "loss_rpn_cls_fpn5": 0.001203, "loss_rpn_cls_fpn6": 0.000135, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.265911}
json_stats: {"accuracy_cls": 0.889691, "eta": "6:12:03", "iter": 6040, "loss": 0.746289, "loss_bbox": 0.202739, "loss_cls": 0.268676, "loss_mask": 0.190971, "loss_rpn_bbox_fpn2": 0.002793, "loss_rpn_bbox_fpn3": 0.008571, "loss_rpn_bbox_fpn4": 0.010154, "loss_rpn_bbox_fpn5": 0.008472, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.010369, "loss_rpn_cls_fpn3": 0.007623, "loss_rpn_cls_fpn4": 0.006773, "loss_rpn_cls_fpn5": 0.001616, "loss_rpn_cls_fpn6": 0.000233, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.265878}
json_stats: {"accuracy_cls": 0.915039, "eta": "6:11:53", "iter": 6060, "loss": 0.567943, "loss_bbox": 0.157690, "loss_cls": 0.209330, "loss_mask": 0.154850, "loss_rpn_bbox_fpn2": 0.002184, "loss_rpn_bbox_fpn3": 0.003721, "loss_rpn_bbox_fpn4": 0.008211, "loss_rpn_bbox_fpn5": 0.004350, "loss_rpn_bbox_fpn6": 0.000236, "loss_rpn_cls_fpn2": 0.007449, "loss_rpn_cls_fpn3": 0.006428, "loss_rpn_cls_fpn4": 0.003077, "loss_rpn_cls_fpn5": 0.002807, "loss_rpn_cls_fpn6": 0.000364, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.265832}
json_stats: {"accuracy_cls": 0.884277, "eta": "6:11:43", "iter": 6080, "loss": 0.665986, "loss_bbox": 0.193205, "loss_cls": 0.255167, "loss_mask": 0.182258, "loss_rpn_bbox_fpn2": 0.001887, "loss_rpn_bbox_fpn3": 0.006734, "loss_rpn_bbox_fpn4": 0.013558, "loss_rpn_bbox_fpn5": 0.004964, "loss_rpn_bbox_fpn6": 0.000108, "loss_rpn_cls_fpn2": 0.004595, "loss_rpn_cls_fpn3": 0.005884, "loss_rpn_cls_fpn4": 0.007489, "loss_rpn_cls_fpn5": 0.002452, "loss_rpn_cls_fpn6": 0.000350, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.265776}
json_stats: {"accuracy_cls": 0.894043, "eta": "6:11:35", "iter": 6100, "loss": 0.704085, "loss_bbox": 0.209666, "loss_cls": 0.245237, "loss_mask": 0.163929, "loss_rpn_bbox_fpn2": 0.002382, "loss_rpn_bbox_fpn3": 0.006415, "loss_rpn_bbox_fpn4": 0.009550, "loss_rpn_bbox_fpn5": 0.005412, "loss_rpn_bbox_fpn6": 0.000208, "loss_rpn_cls_fpn2": 0.006204, "loss_rpn_cls_fpn3": 0.010135, "loss_rpn_cls_fpn4": 0.004135, "loss_rpn_cls_fpn5": 0.002207, "loss_rpn_cls_fpn6": 0.000251, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.265745}
json_stats: {"accuracy_cls": 0.903782, "eta": "6:11:26", "iter": 6120, "loss": 0.621365, "loss_bbox": 0.184824, "loss_cls": 0.226055, "loss_mask": 0.173381, "loss_rpn_bbox_fpn2": 0.003097, "loss_rpn_bbox_fpn3": 0.004468, "loss_rpn_bbox_fpn4": 0.009922, "loss_rpn_bbox_fpn5": 0.005919, "loss_rpn_bbox_fpn6": 0.000187, "loss_rpn_cls_fpn2": 0.004952, "loss_rpn_cls_fpn3": 0.003551, "loss_rpn_cls_fpn4": 0.002911, "loss_rpn_cls_fpn5": 0.002677, "loss_rpn_cls_fpn6": 0.000037, "lr": 0.001000, "mb_qsize": 64, "mem": 5905, "time": 0.265690}
json_stats: {"accuracy_cls": 0.899902, "eta": "6:11:16", "iter": 6140, "loss": 0.642462, "loss_bbox": 0.179804, "loss_cls": 0.231219, "loss_mask": 0.178046, "loss_rpn_bbox_fpn2": 0.003432, "loss_rpn_bbox_fpn3": 0.006382, "loss_rpn_bbox_fpn4": 0.012555, "loss_rpn_bbox_fpn5": 0.004151, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.006596, "loss_rpn_cls_fpn3": 0.005148, "loss_rpn_cls_fpn4": 0.007187, "loss_rpn_cls_fpn5": 0.002387, "loss_rpn_cls_fpn6": 0.000194, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265636}
json_stats: {"accuracy_cls": 0.919837, "eta": "6:11:03", "iter": 6160, "loss": 0.577463, "loss_bbox": 0.158019, "loss_cls": 0.195244, "loss_mask": 0.170750, "loss_rpn_bbox_fpn2": 0.001085, "loss_rpn_bbox_fpn3": 0.003848, "loss_rpn_bbox_fpn4": 0.006936, "loss_rpn_bbox_fpn5": 0.004437, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004310, "loss_rpn_cls_fpn3": 0.006129, "loss_rpn_cls_fpn4": 0.003707, "loss_rpn_cls_fpn5": 0.003406, "loss_rpn_cls_fpn6": 0.000115, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265548}
json_stats: {"accuracy_cls": 0.909180, "eta": "6:10:55", "iter": 6180, "loss": 0.590457, "loss_bbox": 0.171595, "loss_cls": 0.219384, "loss_mask": 0.162312, "loss_rpn_bbox_fpn2": 0.002128, "loss_rpn_bbox_fpn3": 0.005482, "loss_rpn_bbox_fpn4": 0.007979, "loss_rpn_bbox_fpn5": 0.002605, "loss_rpn_bbox_fpn6": 0.000222, "loss_rpn_cls_fpn2": 0.006613, "loss_rpn_cls_fpn3": 0.007402, "loss_rpn_cls_fpn4": 0.005267, "loss_rpn_cls_fpn5": 0.001873, "loss_rpn_cls_fpn6": 0.000058, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265517}
json_stats: {"accuracy_cls": 0.894531, "eta": "6:10:46", "iter": 6200, "loss": 0.653462, "loss_bbox": 0.193200, "loss_cls": 0.245603, "loss_mask": 0.168124, "loss_rpn_bbox_fpn2": 0.002988, "loss_rpn_bbox_fpn3": 0.006285, "loss_rpn_bbox_fpn4": 0.007914, "loss_rpn_bbox_fpn5": 0.003003, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005996, "loss_rpn_cls_fpn3": 0.005280, "loss_rpn_cls_fpn4": 0.005369, "loss_rpn_cls_fpn5": 0.003322, "loss_rpn_cls_fpn6": 0.000072, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265477}
json_stats: {"accuracy_cls": 0.879395, "eta": "6:10:38", "iter": 6220, "loss": 0.724795, "loss_bbox": 0.205000, "loss_cls": 0.279079, "loss_mask": 0.197303, "loss_rpn_bbox_fpn2": 0.002877, "loss_rpn_bbox_fpn3": 0.009471, "loss_rpn_bbox_fpn4": 0.006561, "loss_rpn_bbox_fpn5": 0.003118, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.007306, "loss_rpn_cls_fpn3": 0.006333, "loss_rpn_cls_fpn4": 0.004062, "loss_rpn_cls_fpn5": 0.002816, "loss_rpn_cls_fpn6": 0.000009, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265444}
json_stats: {"accuracy_cls": 0.902020, "eta": "6:10:30", "iter": 6240, "loss": 0.681007, "loss_bbox": 0.206425, "loss_cls": 0.234592, "loss_mask": 0.180386, "loss_rpn_bbox_fpn2": 0.001316, "loss_rpn_bbox_fpn3": 0.004533, "loss_rpn_bbox_fpn4": 0.008282, "loss_rpn_bbox_fpn5": 0.002750, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002879, "loss_rpn_cls_fpn3": 0.005015, "loss_rpn_cls_fpn4": 0.004290, "loss_rpn_cls_fpn5": 0.001450, "loss_rpn_cls_fpn6": 0.000024, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265402}
json_stats: {"accuracy_cls": 0.885262, "eta": "6:10:23", "iter": 6260, "loss": 0.692732, "loss_bbox": 0.180806, "loss_cls": 0.260846, "loss_mask": 0.162915, "loss_rpn_bbox_fpn2": 0.001560, "loss_rpn_bbox_fpn3": 0.005446, "loss_rpn_bbox_fpn4": 0.014238, "loss_rpn_bbox_fpn5": 0.004018, "loss_rpn_bbox_fpn6": 0.000084, "loss_rpn_cls_fpn2": 0.002984, "loss_rpn_cls_fpn3": 0.008796, "loss_rpn_cls_fpn4": 0.005128, "loss_rpn_cls_fpn5": 0.001704, "loss_rpn_cls_fpn6": 0.000173, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265382}
json_stats: {"accuracy_cls": 0.897949, "eta": "6:10:14", "iter": 6280, "loss": 0.649741, "loss_bbox": 0.202523, "loss_cls": 0.240358, "loss_mask": 0.166120, "loss_rpn_bbox_fpn2": 0.003517, "loss_rpn_bbox_fpn3": 0.005732, "loss_rpn_bbox_fpn4": 0.008175, "loss_rpn_bbox_fpn5": 0.005958, "loss_rpn_bbox_fpn6": 0.000653, "loss_rpn_cls_fpn2": 0.006455, "loss_rpn_cls_fpn3": 0.009045, "loss_rpn_cls_fpn4": 0.007571, "loss_rpn_cls_fpn5": 0.001753, "loss_rpn_cls_fpn6": 0.000351, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265337}
json_stats: {"accuracy_cls": 0.892687, "eta": "6:10:05", "iter": 6300, "loss": 0.664819, "loss_bbox": 0.199887, "loss_cls": 0.239278, "loss_mask": 0.187554, "loss_rpn_bbox_fpn2": 0.001134, "loss_rpn_bbox_fpn3": 0.005825, "loss_rpn_bbox_fpn4": 0.010023, "loss_rpn_bbox_fpn5": 0.005641, "loss_rpn_bbox_fpn6": 0.001585, "loss_rpn_cls_fpn2": 0.001870, "loss_rpn_cls_fpn3": 0.008498, "loss_rpn_cls_fpn4": 0.003538, "loss_rpn_cls_fpn5": 0.002730, "loss_rpn_cls_fpn6": 0.000485, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265302}
json_stats: {"accuracy_cls": 0.891113, "eta": "6:09:58", "iter": 6320, "loss": 0.625217, "loss_bbox": 0.181289, "loss_cls": 0.236438, "loss_mask": 0.150891, "loss_rpn_bbox_fpn2": 0.002363, "loss_rpn_bbox_fpn3": 0.006162, "loss_rpn_bbox_fpn4": 0.010315, "loss_rpn_bbox_fpn5": 0.002987, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002878, "loss_rpn_cls_fpn3": 0.008318, "loss_rpn_cls_fpn4": 0.004598, "loss_rpn_cls_fpn5": 0.001415, "loss_rpn_cls_fpn6": 0.000006, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265281}
json_stats: {"accuracy_cls": 0.898004, "eta": "6:09:51", "iter": 6340, "loss": 0.634222, "loss_bbox": 0.184241, "loss_cls": 0.224894, "loss_mask": 0.153405, "loss_rpn_bbox_fpn2": 0.003171, "loss_rpn_bbox_fpn3": 0.004426, "loss_rpn_bbox_fpn4": 0.010184, "loss_rpn_bbox_fpn5": 0.005301, "loss_rpn_bbox_fpn6": 0.000322, "loss_rpn_cls_fpn2": 0.004169, "loss_rpn_cls_fpn3": 0.005857, "loss_rpn_cls_fpn4": 0.006260, "loss_rpn_cls_fpn5": 0.001679, "loss_rpn_cls_fpn6": 0.000719, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265255}
json_stats: {"accuracy_cls": 0.920248, "eta": "6:09:44", "iter": 6360, "loss": 0.549227, "loss_bbox": 0.158944, "loss_cls": 0.198672, "loss_mask": 0.154560, "loss_rpn_bbox_fpn2": 0.002381, "loss_rpn_bbox_fpn3": 0.003634, "loss_rpn_bbox_fpn4": 0.008262, "loss_rpn_bbox_fpn5": 0.005350, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003697, "loss_rpn_cls_fpn3": 0.004419, "loss_rpn_cls_fpn4": 0.004401, "loss_rpn_cls_fpn5": 0.001753, "loss_rpn_cls_fpn6": 0.000010, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265235}
json_stats: {"accuracy_cls": 0.900335, "eta": "6:09:35", "iter": 6380, "loss": 0.663943, "loss_bbox": 0.174720, "loss_cls": 0.242159, "loss_mask": 0.158173, "loss_rpn_bbox_fpn2": 0.003100, "loss_rpn_bbox_fpn3": 0.005608, "loss_rpn_bbox_fpn4": 0.019019, "loss_rpn_bbox_fpn5": 0.007267, "loss_rpn_bbox_fpn6": 0.000195, "loss_rpn_cls_fpn2": 0.004849, "loss_rpn_cls_fpn3": 0.005155, "loss_rpn_cls_fpn4": 0.011407, "loss_rpn_cls_fpn5": 0.004082, "loss_rpn_cls_fpn6": 0.000401, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265194}
json_stats: {"accuracy_cls": 0.913574, "eta": "6:09:31", "iter": 6400, "loss": 0.603334, "loss_bbox": 0.166052, "loss_cls": 0.190323, "loss_mask": 0.165114, "loss_rpn_bbox_fpn2": 0.002484, "loss_rpn_bbox_fpn3": 0.005493, "loss_rpn_bbox_fpn4": 0.007575, "loss_rpn_bbox_fpn5": 0.003046, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.005783, "loss_rpn_cls_fpn3": 0.005197, "loss_rpn_cls_fpn4": 0.004457, "loss_rpn_cls_fpn5": 0.002644, "loss_rpn_cls_fpn6": 0.000068, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265208}
json_stats: {"accuracy_cls": 0.885742, "eta": "6:09:25", "iter": 6420, "loss": 0.727287, "loss_bbox": 0.194428, "loss_cls": 0.263580, "loss_mask": 0.175191, "loss_rpn_bbox_fpn2": 0.000411, "loss_rpn_bbox_fpn3": 0.005732, "loss_rpn_bbox_fpn4": 0.013779, "loss_rpn_bbox_fpn5": 0.004834, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003280, "loss_rpn_cls_fpn3": 0.006610, "loss_rpn_cls_fpn4": 0.009201, "loss_rpn_cls_fpn5": 0.002168, "loss_rpn_cls_fpn6": 0.000202, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265200}
json_stats: {"accuracy_cls": 0.905397, "eta": "6:09:25", "iter": 6440, "loss": 0.602182, "loss_bbox": 0.164491, "loss_cls": 0.205483, "loss_mask": 0.163058, "loss_rpn_bbox_fpn2": 0.002457, "loss_rpn_bbox_fpn3": 0.003954, "loss_rpn_bbox_fpn4": 0.010261, "loss_rpn_bbox_fpn5": 0.002941, "loss_rpn_bbox_fpn6": 0.000316, "loss_rpn_cls_fpn2": 0.008355, "loss_rpn_cls_fpn3": 0.005678, "loss_rpn_cls_fpn4": 0.005677, "loss_rpn_cls_fpn5": 0.002566, "loss_rpn_cls_fpn6": 0.000427, "lr": 0.001000, "mb_qsize": 64, "mem": 5906, "time": 0.265261}
INFO loader.py: 285: SIGINT: Shutting down RoIDataLoader threads and exiting...
INFO loader.py: 126: Stopping enqueue thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
INFO loader.py: 113: Stopping mini-batch loading thread
Original python traceback for operator 0 in network `generalized_rcnn` in exception above (most recent call last):
  File "tools/train_net.py", line 281, in <module>
  File "tools/train_net.py", line 119, in main
  File "tools/train_net.py", line 128, in train_model
  File "tools/train_net.py", line 206, in create_model
  File "/home/swk/Documents/ML/Detectron/lib/modeling/model_builder.py", line 124, in create
  File "/home/swk/Documents/ML/Detectron/lib/modeling/model_builder.py", line 89, in generalized_rcnn
  File "/home/swk/Documents/ML/Detectron/lib/modeling/model_builder.py", line 229, in build_generic_detection_model
  File "/home/swk/Documents/ML/Detectron/lib/modeling/optimizer.py", line 40, in build_data_parallel_model
  File "/home/swk/Documents/ML/Detectron/lib/modeling/optimizer.py", line 63, in _build_forward_graph
  File "/home/swk/Documents/ML/Detectron/lib/modeling/model_builder.py", line 169, in _single_gpu_build_func
  File "/home/swk/Documents/ML/Detectron/lib/modeling/FPN.py", line 47, in add_fpn_ResNet50_conv5_body
  File "/home/swk/Documents/ML/Detectron/lib/modeling/FPN.py", line 103, in add_fpn_onto_conv_body
  File "/home/swk/Documents/ML/Detectron/lib/modeling/ResNet.py", line 38, in add_ResNet50_conv5_body
  File "/home/swk/Documents/ML/Detectron/lib/modeling/ResNet.py", line 94, in add_ResNet_convX_body
  File "/home/swk/Documents/ML/caffe2/build/caffe2/python/cnn.py", line 112, in Conv
  File "/home/swk/Documents/ML/caffe2/build/caffe2/python/brew.py", line 121, in scope_wrapper
  File "/home/swk/Documents/ML/caffe2/build/caffe2/python/helpers/conv.py", line 201, in conv
  File "/home/swk/Documents/ML/caffe2/build/caffe2/python/helpers/conv.py", line 154, in _ConvBase
