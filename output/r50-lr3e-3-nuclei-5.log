Found Detectron ops lib: /var/storage/shared/pnrsy/sys/jobs/application_1520801018426_4478/.conda/envs/detectron/lib/libcaffe2_detectron_ops_gpu.so
Found Detectron ops lib: /var/storage/shared/pnrsy/sys/jobs/application_1520801018426_4478/.conda/envs/detectron/lib/libcaffe2_detectron_ops_gpu.so
INFO train_net.py: 104: Called with args:
INFO train_net.py: 105: Namespace(cfg_file='configs/nuclei/e2e_mask_rcnn_R-50-FPN_1x-lr3e-3-nulei-5.yaml', multi_gpu_testing=False, opts=['OUTPUT_DIR', '/tmp/detectron-output-r50-lr3e-3-nuclei-5'], skip_test=False)
INFO train_net.py: 111: Training with config:
INFO train_net.py: 112: {'BBOX_XFORM_CLIP': 4.135166556742356,
 'CLUSTER': {'ON_CLUSTER': False},
 'DATA_LOADER': {'NUM_THREADS': 4},
 'DEDUP_BOXES': 0.0625,
 'DOWNLOAD_CACHE': '/tmp/detectron-download-cache',
 'EPS': 1e-14,
 'EXPECTED_RESULTS': [],
 'EXPECTED_RESULTS_ATOL': 0.005,
 'EXPECTED_RESULTS_EMAIL': '',
 'EXPECTED_RESULTS_RTOL': 0.1,
 'FAST_RCNN': {'MLP_HEAD_DIM': 1024,
               'ROI_BOX_HEAD': 'fast_rcnn_heads.add_roi_2mlp_head',
               'ROI_XFORM_METHOD': 'RoIAlign',
               'ROI_XFORM_RESOLUTION': 7,
               'ROI_XFORM_SAMPLING_RATIO': 2},
 'FPN': {'COARSEST_STRIDE': 32,
         'DIM': 256,
         'EXTRA_CONV_LEVELS': False,
         'FPN_ON': True,
         'MULTILEVEL_ROIS': True,
         'MULTILEVEL_RPN': True,
         'ROI_CANONICAL_LEVEL': 4,
         'ROI_CANONICAL_SCALE': 224,
         'ROI_MAX_LEVEL': 5,
         'ROI_MIN_LEVEL': 2,
         'RPN_ANCHOR_START_SIZE': 8,
         'RPN_ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_MAX_LEVEL': 6,
         'RPN_MIN_LEVEL': 2,
         'ZERO_INIT_LATERAL': False},
 'KRCNN': {'CONV_HEAD_DIM': 256,
           'CONV_HEAD_KERNEL': 3,
           'CONV_INIT': 'GaussianFill',
           'DECONV_DIM': 256,
           'DECONV_KERNEL': 4,
           'DILATION': 1,
           'HEATMAP_SIZE': -1,
           'INFERENCE_MIN_SIZE': 0,
           'KEYPOINT_CONFIDENCE': 'bbox',
           'LOSS_WEIGHT': 1.0,
           'MIN_KEYPOINT_COUNT_FOR_VALID_MINIBATCH': 20,
           'NMS_OKS': False,
           'NORMALIZE_BY_VISIBLE_KEYPOINTS': True,
           'NUM_KEYPOINTS': -1,
           'NUM_STACKED_CONVS': 8,
           'ROI_KEYPOINTS_HEAD': '',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 0,
           'UP_SCALE': -1,
           'USE_DECONV': False,
           'USE_DECONV_OUTPUT': False},
 'MATLAB': 'matlab',
 'MEMONGER': True,
 'MEMONGER_SHARE_ACTIVATIONS': False,
 'MODEL': {'BBOX_REG_WEIGHTS': (10.0, 10.0, 5.0, 5.0),
           'CLS_AGNOSTIC_BBOX_REG': False,
           'CONV_BODY': 'FPN.add_fpn_ResNet50_conv5_body',
           'EXECUTION_TYPE': 'dag',
           'FASTER_RCNN': True,
           'KEYPOINTS_ON': False,
           'MASK_ON': True,
           'NUM_CLASSES': 2,
           'RPN_ONLY': False,
           'TYPE': 'generalized_rcnn'},
 'MRCNN': {'CLS_SPECIFIC_MASK': True,
           'CONV_INIT': 'MSRAFill',
           'DILATION': 1,
           'DIM_REDUCED': 256,
           'RESOLUTION': 14,
           'ROI_MASK_HEAD': 'mask_rcnn_heads.mask_rcnn_fcn_head_v1up4convs',
           'ROI_XFORM_METHOD': 'RoIAlign',
           'ROI_XFORM_RESOLUTION': 7,
           'ROI_XFORM_SAMPLING_RATIO': 2,
           'THRESH_BINARIZE': 0.5,
           'UPSAMPLE_RATIO': 1,
           'USE_FC_OUTPUT': False,
           'WEIGHT_LOSS_MASK': 1.0},
 'NUM_GPUS': 1,
 'OUTPUT_DIR': '/tmp/detectron-output-r50-lr3e-3-nuclei-5',
 'PIXEL_MEANS': array([[[102.9801, 115.9465, 122.7717]]]),
 'RESNETS': {'NUM_GROUPS': 1,
             'RES5_DILATION': 1,
             'STRIDE_1X1': True,
             'TRANS_FUNC': 'bottleneck_transformation',
             'WIDTH_PER_GROUP': 64},
 'RETINANET': {'ANCHOR_SCALE': 4,
               'ASPECT_RATIOS': (0.5, 1.0, 2.0),
               'BBOX_REG_BETA': 0.11,
               'BBOX_REG_WEIGHT': 1.0,
               'CLASS_SPECIFIC_BBOX': False,
               'INFERENCE_TH': 0.05,
               'LOSS_ALPHA': 0.25,
               'LOSS_GAMMA': 2.0,
               'NEGATIVE_OVERLAP': 0.4,
               'NUM_CONVS': 4,
               'POSITIVE_OVERLAP': 0.5,
               'PRE_NMS_TOP_N': 1000,
               'PRIOR_PROB': 0.01,
               'RETINANET_ON': False,
               'SCALES_PER_OCTAVE': 3,
               'SHARE_CLS_BBOX_TOWER': False,
               'SOFTMAX': False},
 'RFCN': {'PS_GRID_SIZE': 3},
 'RNG_SEED': 3,
 'ROOT_DIR': '/var/storage/shared/pnrsy/weiso/Detectron',
 'RPN': {'ASPECT_RATIOS': (0.5, 1, 2),
         'RPN_ON': True,
         'SIZES': (64, 128, 256, 512),
         'STRIDE': 16},
 'SOLVER': {'BASE_LR': 0.01,
            'GAMMA': 0.1,
            'LOG_LR_CHANGE_THRESHOLD': 1.1,
            'LRS': [],
            'LR_POLICY': 'steps_with_decay',
            'MAX_ITER': 90000,
            'MOMENTUM': 0.9,
            'SCALE_MOMENTUM': True,
            'SCALE_MOMENTUM_THRESHOLD': 1.1,
            'STEPS': [0, 60000, 80000],
            'STEP_SIZE': 30000,
            'WARM_UP_FACTOR': 0.3333333333333333,
            'WARM_UP_ITERS': 500,
            'WARM_UP_METHOD': u'linear',
            'WEIGHT_DECAY': 0.0001},
 'TEST': {'BBOX_AUG': {'AREA_TH_HI': 32400,
                       'AREA_TH_LO': 2500,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'COORD_HEUR': 'UNION',
                       'ENABLED': False,
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False,
                       'SCORE_HEUR': 'UNION'},
          'BBOX_REG': True,
          'BBOX_VOTE': {'ENABLED': False,
                        'SCORING_METHOD': 'ID',
                        'SCORING_METHOD_BETA': 1.0,
                        'VOTE_TH': 0.8},
          'COMPETITION_MODE': True,
          'DATASET': '',
          'DATASETS': ('dsb_2018_val',),
          'DETECTIONS_PER_IM': 100,
          'FORCE_JSON_DATASET_EVAL': False,
          'KPS_AUG': {'AREA_TH': 32400,
                      'ASPECT_RATIOS': (),
                      'ASPECT_RATIO_H_FLIP': False,
                      'ENABLED': False,
                      'HEUR': 'HM_AVG',
                      'H_FLIP': False,
                      'MAX_SIZE': 4000,
                      'SCALES': (),
                      'SCALE_H_FLIP': False,
                      'SCALE_SIZE_DEP': False},
          'MASK_AUG': {'AREA_TH': 32400,
                       'ASPECT_RATIOS': (),
                       'ASPECT_RATIO_H_FLIP': False,
                       'ENABLED': False,
                       'HEUR': 'SOFT_AVG',
                       'H_FLIP': False,
                       'MAX_SIZE': 4000,
                       'SCALES': (),
                       'SCALE_H_FLIP': False,
                       'SCALE_SIZE_DEP': False},
          'MAX_SIZE': 1333,
          'NMS': 0.5,
          'PRECOMPUTED_PROPOSALS': False,
          'PROPOSAL_FILE': '',
          'PROPOSAL_FILES': (),
          'PROPOSAL_LIMIT': 2000,
          'RPN_MIN_SIZE': 0,
          'RPN_NMS_THRESH': 0.7,
          'RPN_POST_NMS_TOP_N': 1000,
          'RPN_PRE_NMS_TOP_N': 1000,
          'SCALES': (800,),
          'SCORE_THRESH': 0.05,
          'SOFT_NMS': {'ENABLED': False, 'METHOD': 'linear', 'SIGMA': 0.5},
          'WEIGHTS': ''},
 'TRAIN': {'ASPECT_GROUPING': True,
           'AUTO_RESUME': True,
           'BATCH_SIZE_PER_IM': 512,
           'BBOX_THRESH': 0.5,
           'BG_THRESH_HI': 0.5,
           'BG_THRESH_LO': 0.0,
           'CROWD_FILTER_THRESH': 0.7,
           'DATASETS': ('dsb_2018_train',),
           'FG_FRACTION': 0.25,
           'FG_THRESH': 0.5,
           'FREEZE_CONV_BODY': False,
           'GT_MIN_AREA': -1,
           'IMS_PER_BATCH': 2,
           'MAX_SIZE': 1333,
           'PROPOSAL_FILES': (),
           'RPN_BATCH_SIZE_PER_IM': 256,
           'RPN_FG_FRACTION': 0.5,
           'RPN_MIN_SIZE': 0,
           'RPN_NEGATIVE_OVERLAP': 0.3,
           'RPN_NMS_THRESH': 0.7,
           'RPN_POSITIVE_OVERLAP': 0.7,
           'RPN_POST_NMS_TOP_N': 2000,
           'RPN_PRE_NMS_TOP_N': 2000,
           'RPN_STRADDLE_THRESH': 0,
           'SCALES': (800,),
           'SNAPSHOT_ITERS': 20000,
           'USE_FLIPPED': True,
           'WEIGHTS': u'/tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl'},
 'USE_NCCL': False,
 'VIS': False,
 'VIS_TH': 0.9}
INFO train_net.py: 205: Building model: generalized_rcnn
WARNING cnn.py:  40: [====DEPRECATE WARNING====]: you are creating an object from CNNModelHelper class which will be deprecated soon. Please use ModelHelper object with brew module. For more information, please refer to caffe2.ai and python/brew.py, python/brew_test.py for more information.
WARNING memonger.py:  70: NOTE: Executing memonger to optimize gradient memory
INFO memonger.py: 112: Memonger memory optimization took 0.0178408622742 secs
INFO train_net.py: 253: Loading dataset: ('dsb_2018_train',)
loading annotations into memory...
Done (t=0.42s)
creating index...
index created!
INFO roidb.py:  49: Appending horizontally-flipped training examples...
INFO roidb.py:  51: Loaded dataset: dsb_2018_train
INFO roidb.py: 135: Filtered 0 roidb entries: 1072 -> 1072
INFO roidb.py:  67: Computing bounding-box regression targets...
INFO roidb.py:  69: done
INFO train_net.py: 257: 1072 roidb entries
INFO net.py:  57: Loading weights from: /tmp/detectron-download-cache/ImageNetPretrained/MSRA/R-50.pkl
INFO net.py:  86: fpn_inner_res5_2_sum_w not found
INFO net.py:  86: fpn_inner_res5_2_sum_b not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res4_5_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res3_3_sum_lateral_b not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_w not found
INFO net.py:  86: fpn_inner_res2_2_sum_lateral_b not found
INFO net.py:  86: fpn_res5_2_sum_w not found
INFO net.py:  86: fpn_res5_2_sum_b not found
INFO net.py:  86: fpn_res4_5_sum_w not found
INFO net.py:  86: fpn_res4_5_sum_b not found
INFO net.py:  86: fpn_res3_3_sum_w not found
INFO net.py:  86: fpn_res3_3_sum_b not found
INFO net.py:  86: fpn_res2_2_sum_w not found
INFO net.py:  86: fpn_res2_2_sum_b not found
INFO net.py:  86: conv_rpn_fpn2_w not found
INFO net.py:  86: conv_rpn_fpn2_b not found
INFO net.py:  86: rpn_cls_logits_fpn2_w not found
INFO net.py:  86: rpn_cls_logits_fpn2_b not found
INFO net.py:  86: rpn_bbox_pred_fpn2_w not found
INFO net.py:  86: rpn_bbox_pred_fpn2_b not found
INFO net.py:  86: fc6_w not found
INFO net.py:  86: fc6_b not found
INFO net.py:  86: fc7_w not found
INFO net.py:  86: fc7_b not found
INFO net.py:  86: cls_score_w not found
INFO net.py:  86: cls_score_b not found
INFO net.py:  86: bbox_pred_w not found
INFO net.py:  86: bbox_pred_b not found
INFO net.py:  86: fcn1_w not found
INFO net.py:  86: fcn1_b not found
INFO net.py:  86: fcn2_w not found
INFO net.py:  86: fcn2_b not found
INFO net.py:  86: fcn3_w not found
INFO net.py:  86: fcn3_b not found
INFO net.py:  86: fcn4_w not found
INFO net.py:  86: fcn4_b not found
INFO net.py:  86: conv5_mask_w not found
INFO net.py:  86: conv5_mask_b not found
INFO net.py:  86: mask_fcn_logits_w not found
INFO net.py:  86: mask_fcn_logits_b not found
INFO train_net.py: 241: Outputs saved to: /tmp/detectron-output-r50-lr3e-3-nuclei-5/train/dsb_2018_train/generalized_rcnn
INFO loader.py: 227: Pre-filling mini-batch queue...
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [0/64]
INFO loader.py: 232:   [1/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [2/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [4/64]
INFO loader.py: 232:   [6/64]
INFO loader.py: 232:   [7/64]
INFO loader.py: 232:   [8/64]
INFO loader.py: 232:   [9/64]
INFO loader.py: 232:   [10/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [12/64]
INFO loader.py: 232:   [14/64]
INFO loader.py: 232:   [16/64]
INFO loader.py: 232:   [19/64]
INFO loader.py: 232:   [22/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [23/64]
INFO loader.py: 232:   [26/64]
INFO loader.py: 232:   [27/64]
INFO loader.py: 232:   [28/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [30/64]
INFO loader.py: 232:   [32/64]
INFO loader.py: 232:   [33/64]
INFO loader.py: 232:   [34/64]
INFO loader.py: 232:   [35/64]
INFO loader.py: 232:   [36/64]
INFO loader.py: 232:   [38/64]
INFO loader.py: 232:   [39/64]
INFO loader.py: 232:   [41/64]
INFO loader.py: 232:   [42/64]
INFO loader.py: 232:   [43/64]
INFO loader.py: 232:   [44/64]
INFO loader.py: 232:   [45/64]
INFO loader.py: 232:   [49/64]
INFO loader.py: 232:   [50/64]
INFO loader.py: 232:   [51/64]
INFO loader.py: 232:   [53/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [54/64]
INFO loader.py: 232:   [57/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [59/64]
INFO loader.py: 232:   [61/64]
INFO loader.py: 232:   [62/64]
INFO loader.py: 232:   [63/64]
INFO loader.py: 232:   [63/64]
INFO detector.py: 436: Changing learning rate 0.000000 -> 0.003333 at iter 0
INFO net.py: 210: Printing model: generalized_rcnn
INFO net.py: 240: data                        : (2, 3, 800, 800)     => conv1                       : (2, 64, 400, 400)    ------- (op: Conv)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => conv1                       : (2, 64, 400, 400)    ------- (op: AffineChannel)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => conv1                       : (2, 64, 400, 400)    ------- (op: Relu)
INFO net.py: 240: conv1                       : (2, 64, 400, 400)    => pool1                       : (2, 64, 200, 200)    ------- (op: MaxPool)
INFO net.py: 240: pool1                       : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2a             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_0_branch2b             : (2, 64, 200, 200)    => res2_0_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch2c             : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: pool1                       : (2, 64, 200, 200)    => res2_0_branch1              : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_0_branch1              : (2, 256, 200, 200)   => res2_0_branch1_bn           : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch1_bn           : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_0_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2a             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_1_branch2b             : (2, 64, 200, 200)    => res2_1_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_1_branch2c             : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_0_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_1_branch2c_bn          : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2a             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2a             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: Conv)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2b             : (2, 64, 200, 200)    ------- (op: Relu)
INFO net.py: 240: res2_2_branch2b             : (2, 64, 200, 200)    => res2_2_branch2c             : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: res2_2_branch2c             : (2, 256, 200, 200)   => res2_2_branch2c_bn          : (2, 256, 200, 200)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_branch2c_bn          : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: res2_1_branch2c_bn          : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res2_2_sum                  : (2, 256, 200, 200)   ------- (op: StopGradient)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2a             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2b             : (2, 128, 100, 100)   => res3_0_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch2c             : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => res3_0_branch1              : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_0_branch1              : (2, 512, 100, 100)   => res3_0_branch1_bn           : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_0_branch1_bn           : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_0_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2a             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2b             : (2, 128, 100, 100)   => res3_1_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_1_branch2c             : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_0_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_1_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2a             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2b             : (2, 128, 100, 100)   => res3_2_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_2_branch2c             : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_1_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_2_branch2c_bn          : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2a             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_branch2a             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2b             : (2, 128, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_branch2b             : (2, 128, 100, 100)   => res3_3_branch2c             : (2, 512, 100, 100)   ------- (op: Conv)
INFO net.py: 240: res3_3_branch2c             : (2, 512, 100, 100)   => res3_3_branch2c_bn          : (2, 512, 100, 100)   ------- (op: AffineChannel)
INFO net.py: 240: res3_3_branch2c_bn          : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------- (op: Sum)
INFO net.py: 240: res3_2_branch2c_bn          : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res3_3_sum                  : (2, 512, 100, 100)   ------- (op: Relu)
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2a             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_0_branch2b             : (2, 256, 50, 50)     => res4_0_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch2c             : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => res4_0_branch1              : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_0_branch1              : (2, 1024, 50, 50)    => res4_0_branch1_bn           : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch1_bn           : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_0_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2a             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_1_branch2b             : (2, 256, 50, 50)     => res4_1_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_1_branch2c             : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_0_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_1_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2a             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_2_branch2b             : (2, 256, 50, 50)     => res4_2_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_2_branch2c             : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_1_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_2_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2a             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_3_branch2b             : (2, 256, 50, 50)     => res4_3_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_3_branch2c             : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_2_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_3_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2a             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_4_branch2b             : (2, 256, 50, 50)     => res4_4_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_4_branch2c             : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_3_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_4_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2a             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2a             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2b             : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: res4_5_branch2b             : (2, 256, 50, 50)     => res4_5_branch2c             : (2, 1024, 50, 50)    ------- (op: Conv)
INFO net.py: 240: res4_5_branch2c             : (2, 1024, 50, 50)    => res4_5_branch2c_bn          : (2, 1024, 50, 50)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------- (op: Sum)
INFO net.py: 240: res4_4_branch2c_bn          : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------|
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res4_5_sum                  : (2, 1024, 50, 50)    ------- (op: Relu)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2a             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_0_branch2b             : (2, 512, 25, 25)     => res5_0_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch2c             : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => res5_0_branch1              : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_0_branch1              : (2, 2048, 25, 25)    => res5_0_branch1_bn           : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch1_bn           : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_0_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2a             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_1_branch2b             : (2, 512, 25, 25)     => res5_1_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_1_branch2c             : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_0_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_1_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2a             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2a             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2b             : (2, 512, 25, 25)     ------- (op: Relu)
INFO net.py: 240: res5_2_branch2b             : (2, 512, 25, 25)     => res5_2_branch2c             : (2, 2048, 25, 25)    ------- (op: Conv)
INFO net.py: 240: res5_2_branch2c             : (2, 2048, 25, 25)    => res5_2_branch2c_bn          : (2, 2048, 25, 25)    ------- (op: AffineChannel)
INFO net.py: 240: res5_2_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------- (op: Sum)
INFO net.py: 240: res5_1_branch2c_bn          : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------|
INFO net.py: 240: res5_2_sum                  : (2, 2048, 25, 25)    => res5_2_sum                  : (2, 2048, 25, 25)    ------- (op: Relu)
INFO net.py: 240: res5_2_sum                  : (2, 2048, 25, 25)    => fpn_inner_res5_2_sum        : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: res4_5_sum                  : (2, 1024, 50, 50)    => fpn_inner_res4_5_sum_lateral: (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 25, 25)     => fpn_inner_res4_5_sum_topdown: (2, 256, 50, 50)     ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res4_5_sum_lateral: (2, 256, 50, 50)     => fpn_inner_res4_5_sum        : (2, 256, 50, 50)     ------- (op: Sum)
INFO net.py: 240: fpn_inner_res4_5_sum_topdown: (2, 256, 50, 50)     => fpn_inner_res4_5_sum        : (2, 256, 50, 50)     ------|
INFO net.py: 240: res3_3_sum                  : (2, 512, 100, 100)   => fpn_inner_res3_3_sum_lateral: (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 50, 50)     => fpn_inner_res3_3_sum_topdown: (2, 256, 100, 100)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res3_3_sum_lateral: (2, 256, 100, 100)   => fpn_inner_res3_3_sum        : (2, 256, 100, 100)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res3_3_sum_topdown: (2, 256, 100, 100)   => fpn_inner_res3_3_sum        : (2, 256, 100, 100)   ------|
INFO net.py: 240: res2_2_sum                  : (2, 256, 200, 200)   => fpn_inner_res2_2_sum_lateral: (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 100, 100)   => fpn_inner_res2_2_sum_topdown: (2, 256, 200, 200)   ------- (op: UpsampleNearest)
INFO net.py: 240: fpn_inner_res2_2_sum_lateral: (2, 256, 200, 200)   => fpn_inner_res2_2_sum        : (2, 256, 200, 200)   ------- (op: Sum)
INFO net.py: 240: fpn_inner_res2_2_sum_topdown: (2, 256, 200, 200)   => fpn_inner_res2_2_sum        : (2, 256, 200, 200)   ------|
INFO net.py: 240: fpn_inner_res5_2_sum        : (2, 256, 25, 25)     => fpn_res5_2_sum              : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res4_5_sum        : (2, 256, 50, 50)     => fpn_res4_5_sum              : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: fpn_inner_res3_3_sum        : (2, 256, 100, 100)   => fpn_res3_3_sum              : (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: fpn_inner_res2_2_sum        : (2, 256, 200, 200)   => fpn_res2_2_sum              : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => fpn_res5_2_sum_subsampled_2x: (2, 256, 13, 13)     ------- (op: MaxPool)
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 200, 200)   => conv_rpn_fpn2               : (2, 256, 200, 200)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => conv_rpn_fpn2               : (2, 256, 200, 200)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => rpn_cls_logits_fpn2         : (2, 3, 200, 200)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn2               : (2, 256, 200, 200)   => rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 200, 200)     => rpn_cls_probs_fpn2          : (2, 3, 200, 200)     ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn2          : (2, 3, 200, 200)     => rpn_rois_fpn2               : (4000, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn2,gpu_0/rpn_bbox_pred_fpn2,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_rois_fpn2               : (4000, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn2               : (4000, 5)            ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 100, 100)   => conv_rpn_fpn3               : (2, 256, 100, 100)   ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => conv_rpn_fpn3               : (2, 256, 100, 100)   ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => rpn_cls_logits_fpn3         : (2, 3, 100, 100)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn3               : (2, 256, 100, 100)   => rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 100, 100)     => rpn_cls_probs_fpn3          : (2, 3, 100, 100)     ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn3          : (2, 3, 100, 100)     => rpn_rois_fpn3               : (4000, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn3,gpu_0/rpn_bbox_pred_fpn3,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_rois_fpn3               : (4000, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn3               : (4000, 5)            ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 50, 50)     => conv_rpn_fpn4               : (2, 256, 50, 50)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => conv_rpn_fpn4               : (2, 256, 50, 50)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => rpn_cls_logits_fpn4         : (2, 3, 50, 50)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn4               : (2, 256, 50, 50)     => rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 50, 50)       => rpn_cls_probs_fpn4          : (2, 3, 50, 50)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn4          : (2, 3, 50, 50)       => rpn_rois_fpn4               : (3999, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn4,gpu_0/rpn_bbox_pred_fpn4,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_rois_fpn4               : (3999, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn4               : (3999, 5)            ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => conv_rpn_fpn5               : (2, 256, 25, 25)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => conv_rpn_fpn5               : (2, 256, 25, 25)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => rpn_cls_logits_fpn5         : (2, 3, 25, 25)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn5               : (2, 256, 25, 25)     => rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 25, 25)       => rpn_cls_probs_fpn5          : (2, 3, 25, 25)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn5          : (2, 3, 25, 25)       => rpn_rois_fpn5               : (3727, 5)            ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn5,gpu_0/rpn_bbox_pred_fpn5,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_rois_fpn5               : (3727, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn5               : (3727, 5)            ------|
INFO net.py: 240: fpn_res5_2_sum_subsampled_2x: (2, 256, 13, 13)     => conv_rpn_fpn6               : (2, 256, 13, 13)     ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 13, 13)     => conv_rpn_fpn6               : (2, 256, 13, 13)     ------- (op: Relu)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 13, 13)     => rpn_cls_logits_fpn6         : (2, 3, 13, 13)       ------- (op: Conv)
INFO net.py: 240: conv_rpn_fpn6               : (2, 256, 13, 13)     => rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      ------- (op: Conv)
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 13, 13)       => rpn_cls_probs_fpn6          : (2, 3, 13, 13)       ------- (op: Sigmoid)
INFO net.py: 240: rpn_cls_probs_fpn6          : (2, 3, 13, 13)       => rpn_rois_fpn6               : (995, 5)             ------- (op: Python:GenerateProposalsOp:gpu_0/rpn_cls_probs_fpn6,gpu_0/rpn_bbox_pred_fpn6,im_info)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => rpn_rois_fpn6               : (995, 5)             ------|
INFO net.py: 240: im_info                     : (2, 3)               => rpn_rois_fpn6               : (995, 5)             ------|
INFO net.py: 240: rpn_rois_fpn2               : (4000, 5)            => rois                        : (1024, 5)            ------- (op: Python:CollectAndDistributeFpnRpnProposalsOp:gpu_0/rpn_rois_fpn2,gpu_0/rpn_rois_fpn3,gpu_0/rpn_rois_fpn4,gpu_0/rpn_rois_fpn5,gpu_0/rpn_rois_fpn6,gpu_0/rpn_roi_probs_fpn2,gpu_0/rpn_roi_probs_fpn3,gpu_0/rpn_roi_probs_fpn4,gpu_0/rpn_roi_probs_fpn5,gpu_0/rpn_roi_probs_fpn6,gpu_0/roidb,gpu_0/im_info)
INFO net.py: 240: rpn_rois_fpn3               : (4000, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn4               : (3999, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn5               : (3727, 5)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_rois_fpn6               : (995, 5)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn2          : (4000, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn3          : (4000, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn4          : (3999, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn5          : (3727, 1)            => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_roi_probs_fpn6          : (995, 1)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: roidb                       : (25072,)             => rois                        : (1024, 5)            ------|
INFO net.py: 240: im_info                     : (2, 3)               => rois                        : (1024, 5)            ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn2  : (2, 3, 336, 336)     => rpn_labels_int32_fpn2       : (2, 3, 200, 200)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 200, 200)     => rpn_labels_int32_fpn2       : (2, 3, 200, 200)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn2  : (2, 12, 336, 336)    => rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn2: (2, 12, 336, 336)    => rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    ------|
INFO net.py: 240: rpn_cls_logits_fpn2         : (2, 3, 200, 200)     => loss_rpn_cls_fpn2           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn2       : (2, 3, 200, 200)     => loss_rpn_cls_fpn2           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn2          : (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn2       : (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn2: (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn2: (2, 12, 200, 200)    => loss_rpn_bbox_fpn2          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn3  : (2, 3, 168, 168)     => rpn_labels_int32_fpn3       : (2, 3, 100, 100)     ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 100, 100)     => rpn_labels_int32_fpn3       : (2, 3, 100, 100)     ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn3  : (2, 12, 168, 168)    => rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn3: (2, 12, 168, 168)    => rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    ------|
INFO net.py: 240: rpn_cls_logits_fpn3         : (2, 3, 100, 100)     => loss_rpn_cls_fpn3           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn3       : (2, 3, 100, 100)     => loss_rpn_cls_fpn3           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn3          : (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn3       : (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn3: (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn3: (2, 12, 100, 100)    => loss_rpn_bbox_fpn3          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn4  : (2, 3, 84, 84)       => rpn_labels_int32_fpn4       : (2, 3, 50, 50)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 50, 50)       => rpn_labels_int32_fpn4       : (2, 3, 50, 50)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn4  : (2, 12, 84, 84)      => rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn4: (2, 12, 84, 84)      => rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      ------|
INFO net.py: 240: rpn_cls_logits_fpn4         : (2, 3, 50, 50)       => loss_rpn_cls_fpn4           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn4       : (2, 3, 50, 50)       => loss_rpn_cls_fpn4           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn4          : (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn4       : (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn4: (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn4: (2, 12, 50, 50)      => loss_rpn_bbox_fpn4          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn5  : (2, 3, 42, 42)       => rpn_labels_int32_fpn5       : (2, 3, 25, 25)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 25, 25)       => rpn_labels_int32_fpn5       : (2, 3, 25, 25)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn5  : (2, 12, 42, 42)      => rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn5: (2, 12, 42, 42)      => rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      ------|
INFO net.py: 240: rpn_cls_logits_fpn5         : (2, 3, 25, 25)       => loss_rpn_cls_fpn5           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn5       : (2, 3, 25, 25)       => loss_rpn_cls_fpn5           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn5          : (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn5       : (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn5: (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn5: (2, 12, 25, 25)      => loss_rpn_bbox_fpn5          : ()                   ------|
INFO net.py: 240: rpn_labels_int32_wide_fpn6  : (2, 3, 21, 21)       => rpn_labels_int32_fpn6       : (2, 3, 13, 13)       ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 13, 13)       => rpn_labels_int32_fpn6       : (2, 3, 13, 13)       ------|
INFO net.py: 240: rpn_bbox_targets_wide_fpn6  : (2, 12, 21, 21)      => rpn_bbox_targets_fpn6       : (2, 12, 13, 13)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => rpn_bbox_targets_fpn6       : (2, 12, 13, 13)      ------|
INFO net.py: 240: rpn_bbox_inside_weights_wide_fpn6: (2, 12, 21, 21)      => rpn_bbox_inside_weights_fpn6: (2, 12, 13, 13)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => rpn_bbox_inside_weights_fpn6: (2, 12, 13, 13)      ------|
INFO net.py: 240: rpn_bbox_outside_weights_wide_fpn6: (2, 12, 21, 21)      => rpn_bbox_outside_weights_fpn6: (2, 12, 13, 13)      ------- (op: SpatialNarrowAs)
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => rpn_bbox_outside_weights_fpn6: (2, 12, 13, 13)      ------|
INFO net.py: 240: rpn_cls_logits_fpn6         : (2, 3, 13, 13)       => loss_rpn_cls_fpn6           : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: rpn_labels_int32_fpn6       : (2, 3, 13, 13)       => loss_rpn_cls_fpn6           : ()                   ------|
INFO net.py: 240: rpn_bbox_pred_fpn6          : (2, 12, 13, 13)      => loss_rpn_bbox_fpn6          : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: rpn_bbox_targets_fpn6       : (2, 12, 13, 13)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: rpn_bbox_inside_weights_fpn6: (2, 12, 13, 13)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: rpn_bbox_outside_weights_fpn6: (2, 12, 13, 13)      => loss_rpn_bbox_fpn6          : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 200, 200)   => roi_feat_fpn2               : (1024, 256, 7, 7)    ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn2                   : (1024, 5)            => roi_feat_fpn2               : (1024, 256, 7, 7)    ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 100, 100)   => roi_feat_fpn3               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn3                   : (0, 5)               => roi_feat_fpn3               : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 50, 50)     => roi_feat_fpn4               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn4                   : (0, 5)               => roi_feat_fpn4               : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => roi_feat_fpn5               : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: rois_fpn5                   : (0, 5)               => roi_feat_fpn5               : (0, 256, 7, 7)       ------|
INFO net.py: 240: roi_feat_fpn2               : (1024, 256, 7, 7)    => roi_feat_shuffled           : (1024, 256, 7, 7)    ------- (op: Concat)
INFO net.py: 240: roi_feat_fpn3               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn4               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_fpn5               : (0, 256, 7, 7)       => roi_feat_shuffled           : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat_shuffled           : (1024, 256, 7, 7)    => roi_feat                    : (1024, 256, 7, 7)    ------- (op: BatchPermutation)
INFO net.py: 240: rois_idx_restore_int32      : (1024,)              => roi_feat                    : (1024, 256, 7, 7)    ------|
INFO net.py: 240: roi_feat                    : (1024, 256, 7, 7)    => fc6                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc6                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc6                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => fc7                         : (1024, 1024)         ------- (op: Relu)
INFO net.py: 240: fc7                         : (1024, 1024)         => cls_score                   : (1024, 2)            ------- (op: FC)
INFO net.py: 240: fc7                         : (1024, 1024)         => bbox_pred                   : (1024, 8)            ------- (op: FC)
INFO net.py: 240: cls_score                   : (1024, 2)            => cls_prob                    : (1024, 2)            ------- (op: SoftmaxWithLoss)
INFO net.py: 240: labels_int32                : (1024,)              => cls_prob                    : (1024, 2)            ------|
INFO net.py: 240: bbox_pred                   : (1024, 8)            => loss_bbox                   : ()                   ------- (op: SmoothL1Loss)
INFO net.py: 240: bbox_targets                : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_inside_weights         : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: bbox_outside_weights        : (1024, 8)            => loss_bbox                   : ()                   ------|
INFO net.py: 240: cls_prob                    : (1024, 2)            => accuracy_cls                : ()                   ------- (op: Accuracy)
INFO net.py: 240: labels_int32                : (1024,)              => accuracy_cls                : ()                   ------|
INFO net.py: 240: fpn_res2_2_sum              : (2, 256, 200, 200)   => _[mask]_roi_feat_fpn2       : (38, 256, 7, 7)      ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn2              : (38, 5)              => _[mask]_roi_feat_fpn2       : (38, 256, 7, 7)      ------|
INFO net.py: 240: fpn_res3_3_sum              : (2, 256, 100, 100)   => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn3              : (0, 5)               => _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res4_5_sum              : (2, 256, 50, 50)     => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn4              : (0, 5)               => _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       ------|
INFO net.py: 240: fpn_res5_2_sum              : (2, 256, 25, 25)     => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------- (op: RoIAlign)
INFO net.py: 240: mask_rois_fpn5              : (0, 5)               => _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       ------|
INFO net.py: 240: _[mask]_roi_feat_fpn2       : (38, 256, 7, 7)      => _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      ------- (op: Concat)
INFO net.py: 240: _[mask]_roi_feat_fpn3       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn4       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_fpn5       : (0, 256, 7, 7)       => _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat_shuffled   : (38, 256, 7, 7)      => _[mask]_roi_feat            : (38, 256, 7, 7)      ------- (op: BatchPermutation)
INFO net.py: 240: mask_rois_idx_restore_int32 : (38,)                => _[mask]_roi_feat            : (38, 256, 7, 7)      ------|
INFO net.py: 240: _[mask]_roi_feat            : (38, 256, 7, 7)      => _[mask]_fcn1                : (38, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn1                : (38, 256, 7, 7)      => _[mask]_fcn1                : (38, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn1                : (38, 256, 7, 7)      => _[mask]_fcn2                : (38, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn2                : (38, 256, 7, 7)      => _[mask]_fcn2                : (38, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn2                : (38, 256, 7, 7)      => _[mask]_fcn3                : (38, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn3                : (38, 256, 7, 7)      => _[mask]_fcn3                : (38, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn3                : (38, 256, 7, 7)      => _[mask]_fcn4                : (38, 256, 7, 7)      ------- (op: Conv)
INFO net.py: 240: _[mask]_fcn4                : (38, 256, 7, 7)      => _[mask]_fcn4                : (38, 256, 7, 7)      ------- (op: Relu)
INFO net.py: 240: _[mask]_fcn4                : (38, 256, 7, 7)      => conv5_mask                  : (38, 256, 14, 14)    ------- (op: ConvTranspose)
INFO net.py: 240: conv5_mask                  : (38, 256, 14, 14)    => conv5_mask                  : (38, 256, 14, 14)    ------- (op: Relu)
INFO net.py: 240: conv5_mask                  : (38, 256, 14, 14)    => mask_fcn_logits             : (38, 2, 14, 14)      ------- (op: Conv)
INFO net.py: 240: mask_fcn_logits             : (38, 2, 14, 14)      => loss_mask                   : ()                   ------- (op: SigmoidCrossEntropyLoss)
INFO net.py: 240: masks_int32                 : (38, 392)            => loss_mask                   : ()                   ------|
INFO net.py: 244: End of model: generalized_rcnn
json_stats: {"accuracy_cls": 0.153320, "eta": "7 days, 18:05:59", "iter": 0, "loss": 7.837918, "loss_bbox": 0.002989, "loss_cls": 0.847553, "loss_mask": 6.271569, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.008859, "loss_rpn_bbox_fpn4": 0.016498, "loss_rpn_bbox_fpn5": 0.011099, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.475256, "loss_rpn_cls_fpn3": 0.121139, "loss_rpn_cls_fpn4": 0.057119, "loss_rpn_cls_fpn5": 0.024378, "loss_rpn_cls_fpn6": 0.001458, "lr": 0.003333, "mb_qsize": 64, "mem": 4985, "time": 7.443997}
json_stats: {"accuracy_cls": 0.892996, "eta": "21:50:16", "iter": 20, "loss": 2.337762, "loss_bbox": 0.067022, "loss_cls": 0.424213, "loss_mask": 0.924731, "loss_rpn_bbox_fpn2": 0.001822, "loss_rpn_bbox_fpn3": 0.016002, "loss_rpn_bbox_fpn4": 0.044523, "loss_rpn_bbox_fpn5": 0.017826, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.059845, "loss_rpn_cls_fpn3": 0.085178, "loss_rpn_cls_fpn4": 0.089382, "loss_rpn_cls_fpn5": 0.031170, "loss_rpn_cls_fpn6": 0.003240, "lr": 0.003600, "mb_qsize": 64, "mem": 6416, "time": 0.873716}
json_stats: {"accuracy_cls": 0.933433, "eta": "11:37:15", "iter": 40, "loss": 1.021737, "loss_bbox": 0.055921, "loss_cls": 0.177931, "loss_mask": 0.489067, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005980, "loss_rpn_bbox_fpn4": 0.029562, "loss_rpn_bbox_fpn5": 0.014043, "loss_rpn_bbox_fpn6": 0.001323, "loss_rpn_cls_fpn2": 0.011666, "loss_rpn_cls_fpn3": 0.035123, "loss_rpn_cls_fpn4": 0.070618, "loss_rpn_cls_fpn5": 0.023683, "loss_rpn_cls_fpn6": 0.003346, "lr": 0.003867, "mb_qsize": 64, "mem": 6429, "time": 0.465050}
json_stats: {"accuracy_cls": 0.926688, "eta": "11:58:22", "iter": 60, "loss": 1.000710, "loss_bbox": 0.037449, "loss_cls": 0.191039, "loss_mask": 0.445301, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007681, "loss_rpn_bbox_fpn4": 0.026760, "loss_rpn_bbox_fpn5": 0.013513, "loss_rpn_bbox_fpn6": 0.006276, "loss_rpn_cls_fpn2": 0.006688, "loss_rpn_cls_fpn3": 0.033427, "loss_rpn_cls_fpn4": 0.053641, "loss_rpn_cls_fpn5": 0.024988, "loss_rpn_cls_fpn6": 0.012178, "lr": 0.004133, "mb_qsize": 64, "mem": 6432, "time": 0.479236}
json_stats: {"accuracy_cls": 0.914062, "eta": "11:59:13", "iter": 80, "loss": 1.011051, "loss_bbox": 0.074067, "loss_cls": 0.249657, "loss_mask": 0.403082, "loss_rpn_bbox_fpn2": 0.000896, "loss_rpn_bbox_fpn3": 0.005309, "loss_rpn_bbox_fpn4": 0.019318, "loss_rpn_bbox_fpn5": 0.020865, "loss_rpn_bbox_fpn6": 0.002663, "loss_rpn_cls_fpn2": 0.010887, "loss_rpn_cls_fpn3": 0.027379, "loss_rpn_cls_fpn4": 0.056147, "loss_rpn_cls_fpn5": 0.036197, "loss_rpn_cls_fpn6": 0.003990, "lr": 0.004400, "mb_qsize": 64, "mem": 6433, "time": 0.479915}
json_stats: {"accuracy_cls": 0.910645, "eta": "12:00:57", "iter": 100, "loss": 1.101397, "loss_bbox": 0.093390, "loss_cls": 0.225236, "loss_mask": 0.428570, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006376, "loss_rpn_bbox_fpn4": 0.021156, "loss_rpn_bbox_fpn5": 0.020577, "loss_rpn_bbox_fpn6": 0.002616, "loss_rpn_cls_fpn2": 0.016511, "loss_rpn_cls_fpn3": 0.038196, "loss_rpn_cls_fpn4": 0.053600, "loss_rpn_cls_fpn5": 0.041329, "loss_rpn_cls_fpn6": 0.004114, "lr": 0.004667, "mb_qsize": 64, "mem": 6433, "time": 0.481176}
json_stats: {"accuracy_cls": 0.921357, "eta": "12:00:44", "iter": 120, "loss": 0.867185, "loss_bbox": 0.077608, "loss_cls": 0.245537, "loss_mask": 0.322656, "loss_rpn_bbox_fpn2": 0.001223, "loss_rpn_bbox_fpn3": 0.011536, "loss_rpn_bbox_fpn4": 0.019893, "loss_rpn_bbox_fpn5": 0.017778, "loss_rpn_bbox_fpn6": 0.001057, "loss_rpn_cls_fpn2": 0.008152, "loss_rpn_cls_fpn3": 0.041393, "loss_rpn_cls_fpn4": 0.055103, "loss_rpn_cls_fpn5": 0.032005, "loss_rpn_cls_fpn6": 0.004351, "lr": 0.004933, "mb_qsize": 64, "mem": 6433, "time": 0.481140}
json_stats: {"accuracy_cls": 0.934082, "eta": "12:02:00", "iter": 140, "loss": 0.868829, "loss_bbox": 0.094949, "loss_cls": 0.189565, "loss_mask": 0.300309, "loss_rpn_bbox_fpn2": 0.000252, "loss_rpn_bbox_fpn3": 0.013008, "loss_rpn_bbox_fpn4": 0.027317, "loss_rpn_bbox_fpn5": 0.012691, "loss_rpn_bbox_fpn6": 0.005760, "loss_rpn_cls_fpn2": 0.005619, "loss_rpn_cls_fpn3": 0.041752, "loss_rpn_cls_fpn4": 0.053937, "loss_rpn_cls_fpn5": 0.024336, "loss_rpn_cls_fpn6": 0.007085, "lr": 0.005200, "mb_qsize": 64, "mem": 6434, "time": 0.482086}
json_stats: {"accuracy_cls": 0.932129, "eta": "12:09:22", "iter": 160, "loss": 0.965473, "loss_bbox": 0.094251, "loss_cls": 0.218728, "loss_mask": 0.352598, "loss_rpn_bbox_fpn2": 0.000237, "loss_rpn_bbox_fpn3": 0.009353, "loss_rpn_bbox_fpn4": 0.016777, "loss_rpn_bbox_fpn5": 0.030810, "loss_rpn_bbox_fpn6": 0.003605, "loss_rpn_cls_fpn2": 0.013936, "loss_rpn_cls_fpn3": 0.032090, "loss_rpn_cls_fpn4": 0.044112, "loss_rpn_cls_fpn5": 0.039775, "loss_rpn_cls_fpn6": 0.005960, "lr": 0.005467, "mb_qsize": 64, "mem": 7577, "time": 0.487118}
json_stats: {"accuracy_cls": 0.940430, "eta": "12:06:24", "iter": 180, "loss": 0.783016, "loss_bbox": 0.066997, "loss_cls": 0.152468, "loss_mask": 0.290140, "loss_rpn_bbox_fpn2": 0.000317, "loss_rpn_bbox_fpn3": 0.005585, "loss_rpn_bbox_fpn4": 0.014331, "loss_rpn_bbox_fpn5": 0.011831, "loss_rpn_bbox_fpn6": 0.008755, "loss_rpn_cls_fpn2": 0.008147, "loss_rpn_cls_fpn3": 0.017124, "loss_rpn_cls_fpn4": 0.039097, "loss_rpn_cls_fpn5": 0.019145, "loss_rpn_cls_fpn6": 0.009065, "lr": 0.005733, "mb_qsize": 64, "mem": 7577, "time": 0.485248}
json_stats: {"accuracy_cls": 0.910645, "eta": "12:02:53", "iter": 200, "loss": 0.879270, "loss_bbox": 0.142618, "loss_cls": 0.225248, "loss_mask": 0.289565, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007024, "loss_rpn_bbox_fpn4": 0.014248, "loss_rpn_bbox_fpn5": 0.025858, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.003322, "loss_rpn_cls_fpn3": 0.025958, "loss_rpn_cls_fpn4": 0.032420, "loss_rpn_cls_fpn5": 0.022453, "loss_rpn_cls_fpn6": 0.003559, "lr": 0.006000, "mb_qsize": 64, "mem": 7577, "time": 0.482998}
json_stats: {"accuracy_cls": 0.919922, "eta": "12:02:40", "iter": 220, "loss": 0.734665, "loss_bbox": 0.161963, "loss_cls": 0.210159, "loss_mask": 0.236362, "loss_rpn_bbox_fpn2": 0.000864, "loss_rpn_bbox_fpn3": 0.005605, "loss_rpn_bbox_fpn4": 0.012982, "loss_rpn_bbox_fpn5": 0.010872, "loss_rpn_bbox_fpn6": 0.003781, "loss_rpn_cls_fpn2": 0.005388, "loss_rpn_cls_fpn3": 0.019235, "loss_rpn_cls_fpn4": 0.019279, "loss_rpn_cls_fpn5": 0.021953, "loss_rpn_cls_fpn6": 0.005525, "lr": 0.006267, "mb_qsize": 64, "mem": 7582, "time": 0.482960}
json_stats: {"accuracy_cls": 0.886439, "eta": "12:05:25", "iter": 240, "loss": 0.917872, "loss_bbox": 0.195612, "loss_cls": 0.275762, "loss_mask": 0.290835, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006363, "loss_rpn_bbox_fpn4": 0.019530, "loss_rpn_bbox_fpn5": 0.021344, "loss_rpn_bbox_fpn6": 0.001374, "loss_rpn_cls_fpn2": 0.004821, "loss_rpn_cls_fpn3": 0.022134, "loss_rpn_cls_fpn4": 0.028539, "loss_rpn_cls_fpn5": 0.019751, "loss_rpn_cls_fpn6": 0.003962, "lr": 0.006533, "mb_qsize": 64, "mem": 7582, "time": 0.484907}
json_stats: {"accuracy_cls": 0.871094, "eta": "12:07:22", "iter": 260, "loss": 1.023872, "loss_bbox": 0.223531, "loss_cls": 0.288604, "loss_mask": 0.307809, "loss_rpn_bbox_fpn2": 0.002033, "loss_rpn_bbox_fpn3": 0.006449, "loss_rpn_bbox_fpn4": 0.025681, "loss_rpn_bbox_fpn5": 0.011407, "loss_rpn_bbox_fpn6": 0.007520, "loss_rpn_cls_fpn2": 0.007739, "loss_rpn_cls_fpn3": 0.021514, "loss_rpn_cls_fpn4": 0.025958, "loss_rpn_cls_fpn5": 0.016461, "loss_rpn_cls_fpn6": 0.005109, "lr": 0.006800, "mb_qsize": 64, "mem": 7587, "time": 0.486318}
json_stats: {"accuracy_cls": 0.888376, "eta": "12:07:08", "iter": 280, "loss": 0.944009, "loss_bbox": 0.210798, "loss_cls": 0.277475, "loss_mask": 0.259640, "loss_rpn_bbox_fpn2": 0.000401, "loss_rpn_bbox_fpn3": 0.011567, "loss_rpn_bbox_fpn4": 0.013754, "loss_rpn_bbox_fpn5": 0.013477, "loss_rpn_bbox_fpn6": 0.000795, "loss_rpn_cls_fpn2": 0.012473, "loss_rpn_cls_fpn3": 0.024989, "loss_rpn_cls_fpn4": 0.019915, "loss_rpn_cls_fpn5": 0.014470, "loss_rpn_cls_fpn6": 0.003926, "lr": 0.007067, "mb_qsize": 64, "mem": 7588, "time": 0.486278}
json_stats: {"accuracy_cls": 0.873047, "eta": "12:10:28", "iter": 300, "loss": 0.984175, "loss_bbox": 0.211831, "loss_cls": 0.304441, "loss_mask": 0.250256, "loss_rpn_bbox_fpn2": 0.001124, "loss_rpn_bbox_fpn3": 0.008695, "loss_rpn_bbox_fpn4": 0.016126, "loss_rpn_bbox_fpn5": 0.019454, "loss_rpn_bbox_fpn6": 0.006832, "loss_rpn_cls_fpn2": 0.005818, "loss_rpn_cls_fpn3": 0.022477, "loss_rpn_cls_fpn4": 0.023905, "loss_rpn_cls_fpn5": 0.014357, "loss_rpn_cls_fpn6": 0.003294, "lr": 0.007333, "mb_qsize": 64, "mem": 7588, "time": 0.488608}
json_stats: {"accuracy_cls": 0.865234, "eta": "12:11:25", "iter": 320, "loss": 0.968968, "loss_bbox": 0.219797, "loss_cls": 0.309008, "loss_mask": 0.275582, "loss_rpn_bbox_fpn2": 0.001713, "loss_rpn_bbox_fpn3": 0.006195, "loss_rpn_bbox_fpn4": 0.013119, "loss_rpn_bbox_fpn5": 0.025707, "loss_rpn_bbox_fpn6": 0.003142, "loss_rpn_cls_fpn2": 0.007436, "loss_rpn_cls_fpn3": 0.015610, "loss_rpn_cls_fpn4": 0.018639, "loss_rpn_cls_fpn5": 0.018640, "loss_rpn_cls_fpn6": 0.002119, "lr": 0.007600, "mb_qsize": 64, "mem": 7589, "time": 0.489354}
json_stats: {"accuracy_cls": 0.865549, "eta": "12:13:37", "iter": 340, "loss": 0.966744, "loss_bbox": 0.284144, "loss_cls": 0.323723, "loss_mask": 0.254563, "loss_rpn_bbox_fpn2": 0.000559, "loss_rpn_bbox_fpn3": 0.009331, "loss_rpn_bbox_fpn4": 0.019724, "loss_rpn_bbox_fpn5": 0.034020, "loss_rpn_bbox_fpn6": 0.001001, "loss_rpn_cls_fpn2": 0.007338, "loss_rpn_cls_fpn3": 0.017063, "loss_rpn_cls_fpn4": 0.017257, "loss_rpn_cls_fpn5": 0.012784, "loss_rpn_cls_fpn6": 0.001760, "lr": 0.007867, "mb_qsize": 64, "mem": 7589, "time": 0.490936}
json_stats: {"accuracy_cls": 0.831543, "eta": "12:14:58", "iter": 360, "loss": 1.165040, "loss_bbox": 0.285052, "loss_cls": 0.375576, "loss_mask": 0.244102, "loss_rpn_bbox_fpn2": 0.001940, "loss_rpn_bbox_fpn3": 0.009019, "loss_rpn_bbox_fpn4": 0.041526, "loss_rpn_bbox_fpn5": 0.042361, "loss_rpn_bbox_fpn6": 0.000542, "loss_rpn_cls_fpn2": 0.008919, "loss_rpn_cls_fpn3": 0.021620, "loss_rpn_cls_fpn4": 0.018599, "loss_rpn_cls_fpn5": 0.014216, "loss_rpn_cls_fpn6": 0.001257, "lr": 0.008133, "mb_qsize": 64, "mem": 7589, "time": 0.491946}
json_stats: {"accuracy_cls": 0.873276, "eta": "12:14:26", "iter": 380, "loss": 0.955883, "loss_bbox": 0.251927, "loss_cls": 0.311231, "loss_mask": 0.253740, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005932, "loss_rpn_bbox_fpn4": 0.019545, "loss_rpn_bbox_fpn5": 0.013371, "loss_rpn_bbox_fpn6": 0.002462, "loss_rpn_cls_fpn2": 0.003338, "loss_rpn_cls_fpn3": 0.013142, "loss_rpn_cls_fpn4": 0.016070, "loss_rpn_cls_fpn5": 0.008500, "loss_rpn_cls_fpn6": 0.002794, "lr": 0.008400, "mb_qsize": 64, "mem": 7589, "time": 0.491708}
json_stats: {"accuracy_cls": 0.882590, "eta": "12:15:31", "iter": 400, "loss": 0.939830, "loss_bbox": 0.257539, "loss_cls": 0.280310, "loss_mask": 0.212499, "loss_rpn_bbox_fpn2": 0.000593, "loss_rpn_bbox_fpn3": 0.010234, "loss_rpn_bbox_fpn4": 0.023436, "loss_rpn_bbox_fpn5": 0.012796, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.004875, "loss_rpn_cls_fpn3": 0.016586, "loss_rpn_cls_fpn4": 0.020449, "loss_rpn_cls_fpn5": 0.013660, "loss_rpn_cls_fpn6": 0.002654, "lr": 0.008667, "mb_qsize": 64, "mem": 7594, "time": 0.492536}
json_stats: {"accuracy_cls": 0.874516, "eta": "12:16:03", "iter": 420, "loss": 0.999909, "loss_bbox": 0.265270, "loss_cls": 0.314604, "loss_mask": 0.282842, "loss_rpn_bbox_fpn2": 0.001254, "loss_rpn_bbox_fpn3": 0.009929, "loss_rpn_bbox_fpn4": 0.037824, "loss_rpn_bbox_fpn5": 0.012868, "loss_rpn_bbox_fpn6": 0.003574, "loss_rpn_cls_fpn2": 0.009729, "loss_rpn_cls_fpn3": 0.023402, "loss_rpn_cls_fpn4": 0.019221, "loss_rpn_cls_fpn5": 0.010026, "loss_rpn_cls_fpn6": 0.003316, "lr": 0.008933, "mb_qsize": 64, "mem": 7594, "time": 0.493001}
json_stats: {"accuracy_cls": 0.854903, "eta": "12:16:54", "iter": 440, "loss": 0.954620, "loss_bbox": 0.257303, "loss_cls": 0.326823, "loss_mask": 0.242529, "loss_rpn_bbox_fpn2": 0.001769, "loss_rpn_bbox_fpn3": 0.007288, "loss_rpn_bbox_fpn4": 0.024675, "loss_rpn_bbox_fpn5": 0.025302, "loss_rpn_bbox_fpn6": 0.001690, "loss_rpn_cls_fpn2": 0.003781, "loss_rpn_cls_fpn3": 0.014435, "loss_rpn_cls_fpn4": 0.016654, "loss_rpn_cls_fpn5": 0.007640, "loss_rpn_cls_fpn6": 0.001453, "lr": 0.009200, "mb_qsize": 64, "mem": 7595, "time": 0.493681}
json_stats: {"accuracy_cls": 0.885908, "eta": "12:17:51", "iter": 460, "loss": 0.946649, "loss_bbox": 0.248433, "loss_cls": 0.296678, "loss_mask": 0.269505, "loss_rpn_bbox_fpn2": 0.004019, "loss_rpn_bbox_fpn3": 0.005509, "loss_rpn_bbox_fpn4": 0.009898, "loss_rpn_bbox_fpn5": 0.027369, "loss_rpn_bbox_fpn6": 0.005652, "loss_rpn_cls_fpn2": 0.013106, "loss_rpn_cls_fpn3": 0.009881, "loss_rpn_cls_fpn4": 0.012614, "loss_rpn_cls_fpn5": 0.011225, "loss_rpn_cls_fpn6": 0.002896, "lr": 0.009467, "mb_qsize": 64, "mem": 7595, "time": 0.494437}
json_stats: {"accuracy_cls": 0.880339, "eta": "12:17:27", "iter": 480, "loss": 0.879959, "loss_bbox": 0.232468, "loss_cls": 0.297144, "loss_mask": 0.181351, "loss_rpn_bbox_fpn2": 0.000617, "loss_rpn_bbox_fpn3": 0.006348, "loss_rpn_bbox_fpn4": 0.027300, "loss_rpn_bbox_fpn5": 0.009404, "loss_rpn_bbox_fpn6": 0.001466, "loss_rpn_cls_fpn2": 0.003715, "loss_rpn_cls_fpn3": 0.011422, "loss_rpn_cls_fpn4": 0.013526, "loss_rpn_cls_fpn5": 0.009942, "loss_rpn_cls_fpn6": 0.001354, "lr": 0.009733, "mb_qsize": 64, "mem": 7595, "time": 0.494280}
json_stats: {"accuracy_cls": 0.845437, "eta": "12:17:35", "iter": 500, "loss": 1.058338, "loss_bbox": 0.267260, "loss_cls": 0.363992, "loss_mask": 0.229431, "loss_rpn_bbox_fpn2": 0.000309, "loss_rpn_bbox_fpn3": 0.007129, "loss_rpn_bbox_fpn4": 0.010591, "loss_rpn_bbox_fpn5": 0.013193, "loss_rpn_bbox_fpn6": 0.000617, "loss_rpn_cls_fpn2": 0.004486, "loss_rpn_cls_fpn3": 0.013707, "loss_rpn_cls_fpn4": 0.013091, "loss_rpn_cls_fpn5": 0.008231, "loss_rpn_cls_fpn6": 0.000467, "lr": 0.010000, "mb_qsize": 64, "mem": 7595, "time": 0.494470}
json_stats: {"accuracy_cls": 0.854980, "eta": "12:18:16", "iter": 520, "loss": 0.947150, "loss_bbox": 0.268263, "loss_cls": 0.338416, "loss_mask": 0.204097, "loss_rpn_bbox_fpn2": 0.001231, "loss_rpn_bbox_fpn3": 0.007422, "loss_rpn_bbox_fpn4": 0.022209, "loss_rpn_bbox_fpn5": 0.013935, "loss_rpn_bbox_fpn6": 0.000232, "loss_rpn_cls_fpn2": 0.003583, "loss_rpn_cls_fpn3": 0.010811, "loss_rpn_cls_fpn4": 0.012641, "loss_rpn_cls_fpn5": 0.007636, "loss_rpn_cls_fpn6": 0.000548, "lr": 0.010000, "mb_qsize": 64, "mem": 7596, "time": 0.495038}
json_stats: {"accuracy_cls": 0.875977, "eta": "12:18:54", "iter": 540, "loss": 0.884922, "loss_bbox": 0.241075, "loss_cls": 0.291761, "loss_mask": 0.213466, "loss_rpn_bbox_fpn2": 0.001132, "loss_rpn_bbox_fpn3": 0.009392, "loss_rpn_bbox_fpn4": 0.012707, "loss_rpn_bbox_fpn5": 0.013838, "loss_rpn_bbox_fpn6": 0.007551, "loss_rpn_cls_fpn2": 0.005048, "loss_rpn_cls_fpn3": 0.009424, "loss_rpn_cls_fpn4": 0.010548, "loss_rpn_cls_fpn5": 0.009740, "loss_rpn_cls_fpn6": 0.001141, "lr": 0.010000, "mb_qsize": 64, "mem": 7597, "time": 0.495578}
json_stats: {"accuracy_cls": 0.853407, "eta": "12:18:45", "iter": 560, "loss": 0.977414, "loss_bbox": 0.295044, "loss_cls": 0.314018, "loss_mask": 0.212692, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006240, "loss_rpn_bbox_fpn4": 0.013043, "loss_rpn_bbox_fpn5": 0.018021, "loss_rpn_bbox_fpn6": 0.000244, "loss_rpn_cls_fpn2": 0.002324, "loss_rpn_cls_fpn3": 0.008218, "loss_rpn_cls_fpn4": 0.013227, "loss_rpn_cls_fpn5": 0.006117, "loss_rpn_cls_fpn6": 0.001134, "lr": 0.010000, "mb_qsize": 64, "mem": 7597, "time": 0.495589}
json_stats: {"accuracy_cls": 0.852215, "eta": "12:18:53", "iter": 580, "loss": 0.912697, "loss_bbox": 0.260763, "loss_cls": 0.326422, "loss_mask": 0.224967, "loss_rpn_bbox_fpn2": 0.000302, "loss_rpn_bbox_fpn3": 0.006758, "loss_rpn_bbox_fpn4": 0.015180, "loss_rpn_bbox_fpn5": 0.019827, "loss_rpn_bbox_fpn6": 0.002845, "loss_rpn_cls_fpn2": 0.002829, "loss_rpn_cls_fpn3": 0.011701, "loss_rpn_cls_fpn4": 0.014760, "loss_rpn_cls_fpn5": 0.008364, "loss_rpn_cls_fpn6": 0.001089, "lr": 0.010000, "mb_qsize": 64, "mem": 7597, "time": 0.495790}
json_stats: {"accuracy_cls": 0.863050, "eta": "12:19:38", "iter": 600, "loss": 0.842333, "loss_bbox": 0.244380, "loss_cls": 0.311699, "loss_mask": 0.194243, "loss_rpn_bbox_fpn2": 0.001137, "loss_rpn_bbox_fpn3": 0.004683, "loss_rpn_bbox_fpn4": 0.015423, "loss_rpn_bbox_fpn5": 0.006392, "loss_rpn_bbox_fpn6": 0.001254, "loss_rpn_cls_fpn2": 0.004270, "loss_rpn_cls_fpn3": 0.010374, "loss_rpn_cls_fpn4": 0.013872, "loss_rpn_cls_fpn5": 0.006120, "loss_rpn_cls_fpn6": 0.000887, "lr": 0.010000, "mb_qsize": 64, "mem": 7597, "time": 0.496405}
json_stats: {"accuracy_cls": 0.863412, "eta": "12:19:52", "iter": 620, "loss": 0.856143, "loss_bbox": 0.241105, "loss_cls": 0.309322, "loss_mask": 0.202119, "loss_rpn_bbox_fpn2": 0.000750, "loss_rpn_bbox_fpn3": 0.006550, "loss_rpn_bbox_fpn4": 0.018249, "loss_rpn_bbox_fpn5": 0.013230, "loss_rpn_bbox_fpn6": 0.002150, "loss_rpn_cls_fpn2": 0.001377, "loss_rpn_cls_fpn3": 0.010620, "loss_rpn_cls_fpn4": 0.012679, "loss_rpn_cls_fpn5": 0.008568, "loss_rpn_cls_fpn6": 0.000991, "lr": 0.010000, "mb_qsize": 64, "mem": 7597, "time": 0.496670}
json_stats: {"accuracy_cls": 0.869753, "eta": "12:19:41", "iter": 640, "loss": 0.928603, "loss_bbox": 0.240946, "loss_cls": 0.328692, "loss_mask": 0.232123, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006427, "loss_rpn_bbox_fpn4": 0.013121, "loss_rpn_bbox_fpn5": 0.015392, "loss_rpn_bbox_fpn6": 0.003850, "loss_rpn_cls_fpn2": 0.003009, "loss_rpn_cls_fpn3": 0.012243, "loss_rpn_cls_fpn4": 0.009079, "loss_rpn_cls_fpn5": 0.009604, "loss_rpn_cls_fpn6": 0.000970, "lr": 0.010000, "mb_qsize": 64, "mem": 7597, "time": 0.496662}
json_stats: {"accuracy_cls": 0.872070, "eta": "12:20:27", "iter": 660, "loss": 0.895728, "loss_bbox": 0.222475, "loss_cls": 0.309655, "loss_mask": 0.230916, "loss_rpn_bbox_fpn2": 0.000661, "loss_rpn_bbox_fpn3": 0.009364, "loss_rpn_bbox_fpn4": 0.016734, "loss_rpn_bbox_fpn5": 0.020283, "loss_rpn_bbox_fpn6": 0.004237, "loss_rpn_cls_fpn2": 0.002165, "loss_rpn_cls_fpn3": 0.018434, "loss_rpn_cls_fpn4": 0.011569, "loss_rpn_cls_fpn5": 0.010416, "loss_rpn_cls_fpn6": 0.001504, "lr": 0.010000, "mb_qsize": 64, "mem": 7598, "time": 0.497282}
json_stats: {"accuracy_cls": 0.877518, "eta": "12:20:44", "iter": 680, "loss": 0.906218, "loss_bbox": 0.251809, "loss_cls": 0.303728, "loss_mask": 0.219631, "loss_rpn_bbox_fpn2": 0.000501, "loss_rpn_bbox_fpn3": 0.009143, "loss_rpn_bbox_fpn4": 0.016265, "loss_rpn_bbox_fpn5": 0.018765, "loss_rpn_bbox_fpn6": 0.000827, "loss_rpn_cls_fpn2": 0.003120, "loss_rpn_cls_fpn3": 0.016600, "loss_rpn_cls_fpn4": 0.009697, "loss_rpn_cls_fpn5": 0.007764, "loss_rpn_cls_fpn6": 0.000393, "lr": 0.010000, "mb_qsize": 64, "mem": 7599, "time": 0.497586}
json_stats: {"accuracy_cls": 0.878352, "eta": "12:20:43", "iter": 700, "loss": 0.771000, "loss_bbox": 0.223699, "loss_cls": 0.269726, "loss_mask": 0.176083, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004565, "loss_rpn_bbox_fpn4": 0.014504, "loss_rpn_bbox_fpn5": 0.012403, "loss_rpn_bbox_fpn6": 0.002548, "loss_rpn_cls_fpn2": 0.001241, "loss_rpn_cls_fpn3": 0.008139, "loss_rpn_cls_fpn4": 0.010575, "loss_rpn_cls_fpn5": 0.005551, "loss_rpn_cls_fpn6": 0.001086, "lr": 0.010000, "mb_qsize": 64, "mem": 7599, "time": 0.497693}
json_stats: {"accuracy_cls": 0.875488, "eta": "12:20:37", "iter": 720, "loss": 0.832006, "loss_bbox": 0.242473, "loss_cls": 0.297208, "loss_mask": 0.220864, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003712, "loss_rpn_bbox_fpn4": 0.011730, "loss_rpn_bbox_fpn5": 0.014144, "loss_rpn_bbox_fpn6": 0.001895, "loss_rpn_cls_fpn2": 0.002289, "loss_rpn_cls_fpn3": 0.005888, "loss_rpn_cls_fpn4": 0.012052, "loss_rpn_cls_fpn5": 0.005660, "loss_rpn_cls_fpn6": 0.000776, "lr": 0.010000, "mb_qsize": 64, "mem": 7599, "time": 0.497736}
json_stats: {"accuracy_cls": 0.859863, "eta": "12:20:55", "iter": 740, "loss": 0.918379, "loss_bbox": 0.272561, "loss_cls": 0.329836, "loss_mask": 0.227291, "loss_rpn_bbox_fpn2": 0.000157, "loss_rpn_bbox_fpn3": 0.012055, "loss_rpn_bbox_fpn4": 0.019227, "loss_rpn_bbox_fpn5": 0.016558, "loss_rpn_bbox_fpn6": 0.006359, "loss_rpn_cls_fpn2": 0.001801, "loss_rpn_cls_fpn3": 0.010966, "loss_rpn_cls_fpn4": 0.016879, "loss_rpn_cls_fpn5": 0.008266, "loss_rpn_cls_fpn6": 0.001305, "lr": 0.010000, "mb_qsize": 64, "mem": 7599, "time": 0.498048}
json_stats: {"accuracy_cls": 0.870506, "eta": "12:21:21", "iter": 760, "loss": 0.835357, "loss_bbox": 0.241298, "loss_cls": 0.314361, "loss_mask": 0.207857, "loss_rpn_bbox_fpn2": 0.000317, "loss_rpn_bbox_fpn3": 0.005031, "loss_rpn_bbox_fpn4": 0.017576, "loss_rpn_bbox_fpn5": 0.012413, "loss_rpn_bbox_fpn6": 0.004166, "loss_rpn_cls_fpn2": 0.001431, "loss_rpn_cls_fpn3": 0.005512, "loss_rpn_cls_fpn4": 0.015129, "loss_rpn_cls_fpn5": 0.007815, "loss_rpn_cls_fpn6": 0.002258, "lr": 0.010000, "mb_qsize": 64, "mem": 7599, "time": 0.498448}
json_stats: {"accuracy_cls": 0.874512, "eta": "12:21:26", "iter": 780, "loss": 0.801120, "loss_bbox": 0.232965, "loss_cls": 0.286261, "loss_mask": 0.192042, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005664, "loss_rpn_bbox_fpn4": 0.008620, "loss_rpn_bbox_fpn5": 0.010760, "loss_rpn_bbox_fpn6": 0.003004, "loss_rpn_cls_fpn2": 0.001775, "loss_rpn_cls_fpn3": 0.009416, "loss_rpn_cls_fpn4": 0.009235, "loss_rpn_cls_fpn5": 0.004880, "loss_rpn_cls_fpn6": 0.000613, "lr": 0.010000, "mb_qsize": 64, "mem": 7599, "time": 0.498618}
json_stats: {"accuracy_cls": 0.863308, "eta": "12:21:27", "iter": 800, "loss": 0.842916, "loss_bbox": 0.218471, "loss_cls": 0.309826, "loss_mask": 0.197237, "loss_rpn_bbox_fpn2": 0.000304, "loss_rpn_bbox_fpn3": 0.003264, "loss_rpn_bbox_fpn4": 0.018368, "loss_rpn_bbox_fpn5": 0.010478, "loss_rpn_bbox_fpn6": 0.001939, "loss_rpn_cls_fpn2": 0.003886, "loss_rpn_cls_fpn3": 0.004420, "loss_rpn_cls_fpn4": 0.013539, "loss_rpn_cls_fpn5": 0.008347, "loss_rpn_cls_fpn6": 0.000560, "lr": 0.010000, "mb_qsize": 64, "mem": 7600, "time": 0.498740}
json_stats: {"accuracy_cls": 0.891125, "eta": "12:21:36", "iter": 820, "loss": 0.797707, "loss_bbox": 0.241161, "loss_cls": 0.253950, "loss_mask": 0.203706, "loss_rpn_bbox_fpn2": 0.001133, "loss_rpn_bbox_fpn3": 0.003871, "loss_rpn_bbox_fpn4": 0.016362, "loss_rpn_bbox_fpn5": 0.014420, "loss_rpn_bbox_fpn6": 0.000652, "loss_rpn_cls_fpn2": 0.005450, "loss_rpn_cls_fpn3": 0.009219, "loss_rpn_cls_fpn4": 0.011137, "loss_rpn_cls_fpn5": 0.006905, "loss_rpn_cls_fpn6": 0.001054, "lr": 0.010000, "mb_qsize": 64, "mem": 7600, "time": 0.498952}
json_stats: {"accuracy_cls": 0.858080, "eta": "12:21:43", "iter": 840, "loss": 0.922437, "loss_bbox": 0.265258, "loss_cls": 0.324528, "loss_mask": 0.226805, "loss_rpn_bbox_fpn2": 0.001261, "loss_rpn_bbox_fpn3": 0.007293, "loss_rpn_bbox_fpn4": 0.021079, "loss_rpn_bbox_fpn5": 0.006183, "loss_rpn_bbox_fpn6": 0.001788, "loss_rpn_cls_fpn2": 0.003967, "loss_rpn_cls_fpn3": 0.012928, "loss_rpn_cls_fpn4": 0.015095, "loss_rpn_cls_fpn5": 0.006837, "loss_rpn_cls_fpn6": 0.000647, "lr": 0.010000, "mb_qsize": 64, "mem": 7605, "time": 0.499137}
json_stats: {"accuracy_cls": 0.862241, "eta": "12:21:57", "iter": 860, "loss": 0.830357, "loss_bbox": 0.238433, "loss_cls": 0.307690, "loss_mask": 0.189366, "loss_rpn_bbox_fpn2": 0.002037, "loss_rpn_bbox_fpn3": 0.008554, "loss_rpn_bbox_fpn4": 0.020051, "loss_rpn_bbox_fpn5": 0.022323, "loss_rpn_bbox_fpn6": 0.002896, "loss_rpn_cls_fpn2": 0.005911, "loss_rpn_cls_fpn3": 0.009694, "loss_rpn_cls_fpn4": 0.009760, "loss_rpn_cls_fpn5": 0.009654, "loss_rpn_cls_fpn6": 0.002900, "lr": 0.010000, "mb_qsize": 64, "mem": 7605, "time": 0.499409}
json_stats: {"accuracy_cls": 0.894948, "eta": "12:21:10", "iter": 880, "loss": 0.714872, "loss_bbox": 0.212367, "loss_cls": 0.251522, "loss_mask": 0.177140, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005373, "loss_rpn_bbox_fpn4": 0.014636, "loss_rpn_bbox_fpn5": 0.012103, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001539, "loss_rpn_cls_fpn3": 0.005023, "loss_rpn_cls_fpn4": 0.007698, "loss_rpn_cls_fpn5": 0.002989, "loss_rpn_cls_fpn6": 0.000582, "lr": 0.010000, "mb_qsize": 64, "mem": 7605, "time": 0.498997}
json_stats: {"accuracy_cls": 0.878531, "eta": "12:21:13", "iter": 900, "loss": 0.808814, "loss_bbox": 0.232606, "loss_cls": 0.298358, "loss_mask": 0.216341, "loss_rpn_bbox_fpn2": 0.000446, "loss_rpn_bbox_fpn3": 0.008022, "loss_rpn_bbox_fpn4": 0.012689, "loss_rpn_bbox_fpn5": 0.017946, "loss_rpn_bbox_fpn6": 0.001639, "loss_rpn_cls_fpn2": 0.003830, "loss_rpn_cls_fpn3": 0.014874, "loss_rpn_cls_fpn4": 0.010244, "loss_rpn_cls_fpn5": 0.004287, "loss_rpn_cls_fpn6": 0.000499, "lr": 0.010000, "mb_qsize": 64, "mem": 7605, "time": 0.499137}
json_stats: {"accuracy_cls": 0.883614, "eta": "12:21:11", "iter": 920, "loss": 0.785015, "loss_bbox": 0.229025, "loss_cls": 0.276292, "loss_mask": 0.194633, "loss_rpn_bbox_fpn2": 0.003265, "loss_rpn_bbox_fpn3": 0.007551, "loss_rpn_bbox_fpn4": 0.009172, "loss_rpn_bbox_fpn5": 0.007500, "loss_rpn_bbox_fpn6": 0.002999, "loss_rpn_cls_fpn2": 0.003224, "loss_rpn_cls_fpn3": 0.006996, "loss_rpn_cls_fpn4": 0.006412, "loss_rpn_cls_fpn5": 0.004536, "loss_rpn_cls_fpn6": 0.000490, "lr": 0.010000, "mb_qsize": 64, "mem": 7609, "time": 0.499229}
json_stats: {"accuracy_cls": 0.881833, "eta": "12:21:09", "iter": 940, "loss": 0.820034, "loss_bbox": 0.228077, "loss_cls": 0.289569, "loss_mask": 0.206019, "loss_rpn_bbox_fpn2": 0.000468, "loss_rpn_bbox_fpn3": 0.004760, "loss_rpn_bbox_fpn4": 0.011036, "loss_rpn_bbox_fpn5": 0.019636, "loss_rpn_bbox_fpn6": 0.000099, "loss_rpn_cls_fpn2": 0.007421, "loss_rpn_cls_fpn3": 0.006540, "loss_rpn_cls_fpn4": 0.006332, "loss_rpn_cls_fpn5": 0.005481, "loss_rpn_cls_fpn6": 0.000228, "lr": 0.010000, "mb_qsize": 64, "mem": 7609, "time": 0.499318}
json_stats: {"accuracy_cls": 0.877441, "eta": "12:21:46", "iter": 960, "loss": 0.831949, "loss_bbox": 0.214068, "loss_cls": 0.272455, "loss_mask": 0.228115, "loss_rpn_bbox_fpn2": 0.001297, "loss_rpn_bbox_fpn3": 0.003206, "loss_rpn_bbox_fpn4": 0.011146, "loss_rpn_bbox_fpn5": 0.015738, "loss_rpn_bbox_fpn6": 0.004924, "loss_rpn_cls_fpn2": 0.004430, "loss_rpn_cls_fpn3": 0.006907, "loss_rpn_cls_fpn4": 0.008753, "loss_rpn_cls_fpn5": 0.003927, "loss_rpn_cls_fpn6": 0.001345, "lr": 0.010000, "mb_qsize": 64, "mem": 7609, "time": 0.499846}
json_stats: {"accuracy_cls": 0.887207, "eta": "12:21:17", "iter": 980, "loss": 0.761622, "loss_bbox": 0.217521, "loss_cls": 0.276859, "loss_mask": 0.176361, "loss_rpn_bbox_fpn2": 0.000360, "loss_rpn_bbox_fpn3": 0.007415, "loss_rpn_bbox_fpn4": 0.012807, "loss_rpn_bbox_fpn5": 0.006296, "loss_rpn_bbox_fpn6": 0.001669, "loss_rpn_cls_fpn2": 0.001815, "loss_rpn_cls_fpn3": 0.009013, "loss_rpn_cls_fpn4": 0.007637, "loss_rpn_cls_fpn5": 0.006904, "loss_rpn_cls_fpn6": 0.000601, "lr": 0.010000, "mb_qsize": 64, "mem": 7610, "time": 0.499637}
json_stats: {"accuracy_cls": 0.863281, "eta": "12:21:30", "iter": 1000, "loss": 0.802722, "loss_bbox": 0.231939, "loss_cls": 0.307183, "loss_mask": 0.187564, "loss_rpn_bbox_fpn2": 0.001329, "loss_rpn_bbox_fpn3": 0.004352, "loss_rpn_bbox_fpn4": 0.011796, "loss_rpn_bbox_fpn5": 0.020155, "loss_rpn_bbox_fpn6": 0.001623, "loss_rpn_cls_fpn2": 0.003610, "loss_rpn_cls_fpn3": 0.006496, "loss_rpn_cls_fpn4": 0.009433, "loss_rpn_cls_fpn5": 0.005789, "loss_rpn_cls_fpn6": 0.000727, "lr": 0.010000, "mb_qsize": 64, "mem": 7615, "time": 0.499891}
json_stats: {"accuracy_cls": 0.881734, "eta": "12:21:12", "iter": 1020, "loss": 0.809230, "loss_bbox": 0.227506, "loss_cls": 0.278167, "loss_mask": 0.226210, "loss_rpn_bbox_fpn2": 0.002648, "loss_rpn_bbox_fpn3": 0.008157, "loss_rpn_bbox_fpn4": 0.013752, "loss_rpn_bbox_fpn5": 0.009627, "loss_rpn_bbox_fpn6": 0.002029, "loss_rpn_cls_fpn2": 0.004621, "loss_rpn_cls_fpn3": 0.007003, "loss_rpn_cls_fpn4": 0.012650, "loss_rpn_cls_fpn5": 0.006419, "loss_rpn_cls_fpn6": 0.000883, "lr": 0.010000, "mb_qsize": 64, "mem": 7615, "time": 0.499808}
json_stats: {"accuracy_cls": 0.877441, "eta": "12:21:22", "iter": 1040, "loss": 0.813577, "loss_bbox": 0.230988, "loss_cls": 0.300339, "loss_mask": 0.210633, "loss_rpn_bbox_fpn2": 0.000603, "loss_rpn_bbox_fpn3": 0.005588, "loss_rpn_bbox_fpn4": 0.016166, "loss_rpn_bbox_fpn5": 0.012685, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.002823, "loss_rpn_cls_fpn3": 0.012115, "loss_rpn_cls_fpn4": 0.008019, "loss_rpn_cls_fpn5": 0.011852, "loss_rpn_cls_fpn6": 0.000027, "lr": 0.010000, "mb_qsize": 64, "mem": 7615, "time": 0.500032}
json_stats: {"accuracy_cls": 0.895178, "eta": "12:21:36", "iter": 1060, "loss": 0.735528, "loss_bbox": 0.189766, "loss_cls": 0.240808, "loss_mask": 0.192198, "loss_rpn_bbox_fpn2": 0.000059, "loss_rpn_bbox_fpn3": 0.003611, "loss_rpn_bbox_fpn4": 0.013048, "loss_rpn_bbox_fpn5": 0.016005, "loss_rpn_bbox_fpn6": 0.001487, "loss_rpn_cls_fpn2": 0.002065, "loss_rpn_cls_fpn3": 0.004893, "loss_rpn_cls_fpn4": 0.006186, "loss_rpn_cls_fpn5": 0.006438, "loss_rpn_cls_fpn6": 0.001609, "lr": 0.010000, "mb_qsize": 64, "mem": 7615, "time": 0.500300}
json_stats: {"accuracy_cls": 0.879883, "eta": "12:20:57", "iter": 1080, "loss": 0.763220, "loss_bbox": 0.230414, "loss_cls": 0.285260, "loss_mask": 0.201883, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.008259, "loss_rpn_bbox_fpn4": 0.014119, "loss_rpn_bbox_fpn5": 0.006548, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000849, "loss_rpn_cls_fpn3": 0.008638, "loss_rpn_cls_fpn4": 0.009796, "loss_rpn_cls_fpn5": 0.002762, "loss_rpn_cls_fpn6": 0.000224, "lr": 0.010000, "mb_qsize": 64, "mem": 7615, "time": 0.499977}
json_stats: {"accuracy_cls": 0.870706, "eta": "12:21:25", "iter": 1100, "loss": 0.817972, "loss_bbox": 0.229375, "loss_cls": 0.289492, "loss_mask": 0.205532, "loss_rpn_bbox_fpn2": 0.001522, "loss_rpn_bbox_fpn3": 0.003865, "loss_rpn_bbox_fpn4": 0.009402, "loss_rpn_bbox_fpn5": 0.008156, "loss_rpn_bbox_fpn6": 0.000594, "loss_rpn_cls_fpn2": 0.004190, "loss_rpn_cls_fpn3": 0.004056, "loss_rpn_cls_fpn4": 0.008032, "loss_rpn_cls_fpn5": 0.006169, "loss_rpn_cls_fpn6": 0.000932, "lr": 0.010000, "mb_qsize": 64, "mem": 7617, "time": 0.500399}
json_stats: {"accuracy_cls": 0.883397, "eta": "12:21:03", "iter": 1120, "loss": 0.833871, "loss_bbox": 0.239023, "loss_cls": 0.283862, "loss_mask": 0.202777, "loss_rpn_bbox_fpn2": 0.000062, "loss_rpn_bbox_fpn3": 0.006101, "loss_rpn_bbox_fpn4": 0.014029, "loss_rpn_bbox_fpn5": 0.014815, "loss_rpn_bbox_fpn6": 0.001106, "loss_rpn_cls_fpn2": 0.002363, "loss_rpn_cls_fpn3": 0.011991, "loss_rpn_cls_fpn4": 0.007701, "loss_rpn_cls_fpn5": 0.004802, "loss_rpn_cls_fpn6": 0.000376, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500260}
json_stats: {"accuracy_cls": 0.883063, "eta": "12:20:51", "iter": 1140, "loss": 0.688364, "loss_bbox": 0.198734, "loss_cls": 0.269348, "loss_mask": 0.197314, "loss_rpn_bbox_fpn2": 0.000172, "loss_rpn_bbox_fpn3": 0.005220, "loss_rpn_bbox_fpn4": 0.011711, "loss_rpn_bbox_fpn5": 0.010662, "loss_rpn_bbox_fpn6": 0.004468, "loss_rpn_cls_fpn2": 0.001371, "loss_rpn_cls_fpn3": 0.006858, "loss_rpn_cls_fpn4": 0.009747, "loss_rpn_cls_fpn5": 0.004309, "loss_rpn_cls_fpn6": 0.000750, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500246}
json_stats: {"accuracy_cls": 0.875174, "eta": "12:21:17", "iter": 1160, "loss": 0.872801, "loss_bbox": 0.224112, "loss_cls": 0.305962, "loss_mask": 0.190418, "loss_rpn_bbox_fpn2": 0.000716, "loss_rpn_bbox_fpn3": 0.007450, "loss_rpn_bbox_fpn4": 0.018939, "loss_rpn_bbox_fpn5": 0.015889, "loss_rpn_bbox_fpn6": 0.000822, "loss_rpn_cls_fpn2": 0.001572, "loss_rpn_cls_fpn3": 0.009535, "loss_rpn_cls_fpn4": 0.008926, "loss_rpn_cls_fpn5": 0.005798, "loss_rpn_cls_fpn6": 0.000444, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500642}
json_stats: {"accuracy_cls": 0.893066, "eta": "12:21:00", "iter": 1180, "loss": 0.712852, "loss_bbox": 0.205763, "loss_cls": 0.246966, "loss_mask": 0.179412, "loss_rpn_bbox_fpn2": 0.000482, "loss_rpn_bbox_fpn3": 0.003880, "loss_rpn_bbox_fpn4": 0.019044, "loss_rpn_bbox_fpn5": 0.012795, "loss_rpn_bbox_fpn6": 0.001310, "loss_rpn_cls_fpn2": 0.002068, "loss_rpn_cls_fpn3": 0.007111, "loss_rpn_cls_fpn4": 0.010175, "loss_rpn_cls_fpn5": 0.006039, "loss_rpn_cls_fpn6": 0.000609, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500565}
json_stats: {"accuracy_cls": 0.887691, "eta": "12:20:30", "iter": 1200, "loss": 0.706132, "loss_bbox": 0.189958, "loss_cls": 0.258305, "loss_mask": 0.185908, "loss_rpn_bbox_fpn2": 0.000478, "loss_rpn_bbox_fpn3": 0.004614, "loss_rpn_bbox_fpn4": 0.011887, "loss_rpn_bbox_fpn5": 0.004303, "loss_rpn_bbox_fpn6": 0.001009, "loss_rpn_cls_fpn2": 0.005357, "loss_rpn_cls_fpn3": 0.007659, "loss_rpn_cls_fpn4": 0.006244, "loss_rpn_cls_fpn5": 0.004017, "loss_rpn_cls_fpn6": 0.000971, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500345}
json_stats: {"accuracy_cls": 0.880874, "eta": "12:20:28", "iter": 1220, "loss": 0.760437, "loss_bbox": 0.213518, "loss_cls": 0.260303, "loss_mask": 0.191063, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004199, "loss_rpn_bbox_fpn4": 0.014475, "loss_rpn_bbox_fpn5": 0.015943, "loss_rpn_bbox_fpn6": 0.003912, "loss_rpn_cls_fpn2": 0.000559, "loss_rpn_cls_fpn3": 0.006790, "loss_rpn_cls_fpn4": 0.011410, "loss_rpn_cls_fpn5": 0.004731, "loss_rpn_cls_fpn6": 0.000669, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500433}
json_stats: {"accuracy_cls": 0.859863, "eta": "12:20:08", "iter": 1240, "loss": 0.810109, "loss_bbox": 0.224674, "loss_cls": 0.324176, "loss_mask": 0.180528, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002575, "loss_rpn_bbox_fpn4": 0.009626, "loss_rpn_bbox_fpn5": 0.005500, "loss_rpn_bbox_fpn6": 0.002814, "loss_rpn_cls_fpn2": 0.000390, "loss_rpn_cls_fpn3": 0.008248, "loss_rpn_cls_fpn4": 0.009057, "loss_rpn_cls_fpn5": 0.005924, "loss_rpn_cls_fpn6": 0.001122, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500319}
json_stats: {"accuracy_cls": 0.886063, "eta": "12:20:20", "iter": 1260, "loss": 0.724303, "loss_bbox": 0.194011, "loss_cls": 0.250364, "loss_mask": 0.189391, "loss_rpn_bbox_fpn2": 0.000815, "loss_rpn_bbox_fpn3": 0.004489, "loss_rpn_bbox_fpn4": 0.007353, "loss_rpn_bbox_fpn5": 0.014524, "loss_rpn_bbox_fpn6": 0.003494, "loss_rpn_cls_fpn2": 0.001932, "loss_rpn_cls_fpn3": 0.005162, "loss_rpn_cls_fpn4": 0.007378, "loss_rpn_cls_fpn5": 0.003875, "loss_rpn_cls_fpn6": 0.000584, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500574}
json_stats: {"accuracy_cls": 0.876953, "eta": "12:20:21", "iter": 1280, "loss": 0.770890, "loss_bbox": 0.208953, "loss_cls": 0.288442, "loss_mask": 0.188690, "loss_rpn_bbox_fpn2": 0.000609, "loss_rpn_bbox_fpn3": 0.003926, "loss_rpn_bbox_fpn4": 0.008701, "loss_rpn_bbox_fpn5": 0.019345, "loss_rpn_bbox_fpn6": 0.005513, "loss_rpn_cls_fpn2": 0.001784, "loss_rpn_cls_fpn3": 0.005644, "loss_rpn_cls_fpn4": 0.005502, "loss_rpn_cls_fpn5": 0.003125, "loss_rpn_cls_fpn6": 0.000263, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500698}
json_stats: {"accuracy_cls": 0.886719, "eta": "12:20:34", "iter": 1300, "loss": 0.764688, "loss_bbox": 0.209577, "loss_cls": 0.263991, "loss_mask": 0.175919, "loss_rpn_bbox_fpn2": 0.000255, "loss_rpn_bbox_fpn3": 0.004376, "loss_rpn_bbox_fpn4": 0.012352, "loss_rpn_bbox_fpn5": 0.011861, "loss_rpn_bbox_fpn6": 0.000451, "loss_rpn_cls_fpn2": 0.001633, "loss_rpn_cls_fpn3": 0.008570, "loss_rpn_cls_fpn4": 0.008526, "loss_rpn_cls_fpn5": 0.002298, "loss_rpn_cls_fpn6": 0.000671, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500949}
json_stats: {"accuracy_cls": 0.883301, "eta": "12:20:26", "iter": 1320, "loss": 0.749988, "loss_bbox": 0.202122, "loss_cls": 0.284959, "loss_mask": 0.176339, "loss_rpn_bbox_fpn2": 0.001324, "loss_rpn_bbox_fpn3": 0.009277, "loss_rpn_bbox_fpn4": 0.014705, "loss_rpn_bbox_fpn5": 0.010368, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001115, "loss_rpn_cls_fpn3": 0.006007, "loss_rpn_cls_fpn4": 0.004842, "loss_rpn_cls_fpn5": 0.005095, "loss_rpn_cls_fpn6": 0.000084, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500979}
json_stats: {"accuracy_cls": 0.886719, "eta": "12:20:07", "iter": 1340, "loss": 0.764315, "loss_bbox": 0.209312, "loss_cls": 0.254465, "loss_mask": 0.199585, "loss_rpn_bbox_fpn2": 0.000336, "loss_rpn_bbox_fpn3": 0.004297, "loss_rpn_bbox_fpn4": 0.012753, "loss_rpn_bbox_fpn5": 0.010177, "loss_rpn_bbox_fpn6": 0.001294, "loss_rpn_cls_fpn2": 0.001752, "loss_rpn_cls_fpn3": 0.008057, "loss_rpn_cls_fpn4": 0.004771, "loss_rpn_cls_fpn5": 0.003519, "loss_rpn_cls_fpn6": 0.000690, "lr": 0.010000, "mb_qsize": 64, "mem": 7618, "time": 0.500870}
json_stats: {"accuracy_cls": 0.878418, "eta": "12:19:54", "iter": 1360, "loss": 0.684939, "loss_bbox": 0.180547, "loss_cls": 0.259265, "loss_mask": 0.166575, "loss_rpn_bbox_fpn2": 0.001241, "loss_rpn_bbox_fpn3": 0.006509, "loss_rpn_bbox_fpn4": 0.019232, "loss_rpn_bbox_fpn5": 0.006665, "loss_rpn_bbox_fpn6": 0.000702, "loss_rpn_cls_fpn2": 0.002505, "loss_rpn_cls_fpn3": 0.008116, "loss_rpn_cls_fpn4": 0.007093, "loss_rpn_cls_fpn5": 0.004682, "loss_rpn_cls_fpn6": 0.000950, "lr": 0.010000, "mb_qsize": 64, "mem": 7622, "time": 0.500842}
json_stats: {"accuracy_cls": 0.885201, "eta": "12:20:17", "iter": 1380, "loss": 0.681134, "loss_bbox": 0.190640, "loss_cls": 0.270050, "loss_mask": 0.195950, "loss_rpn_bbox_fpn2": 0.000873, "loss_rpn_bbox_fpn3": 0.005067, "loss_rpn_bbox_fpn4": 0.017952, "loss_rpn_bbox_fpn5": 0.006470, "loss_rpn_bbox_fpn6": 0.001272, "loss_rpn_cls_fpn2": 0.009458, "loss_rpn_cls_fpn3": 0.008126, "loss_rpn_cls_fpn4": 0.010036, "loss_rpn_cls_fpn5": 0.003437, "loss_rpn_cls_fpn6": 0.001067, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501211}
json_stats: {"accuracy_cls": 0.890886, "eta": "12:19:49", "iter": 1400, "loss": 0.729148, "loss_bbox": 0.206356, "loss_cls": 0.250616, "loss_mask": 0.193179, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.006372, "loss_rpn_bbox_fpn4": 0.009485, "loss_rpn_bbox_fpn5": 0.011214, "loss_rpn_bbox_fpn6": 0.001260, "loss_rpn_cls_fpn2": 0.002458, "loss_rpn_cls_fpn3": 0.009025, "loss_rpn_cls_fpn4": 0.005479, "loss_rpn_cls_fpn5": 0.006342, "loss_rpn_cls_fpn6": 0.000501, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501005}
json_stats: {"accuracy_cls": 0.903678, "eta": "12:19:46", "iter": 1420, "loss": 0.586158, "loss_bbox": 0.173285, "loss_cls": 0.218298, "loss_mask": 0.174689, "loss_rpn_bbox_fpn2": 0.000223, "loss_rpn_bbox_fpn3": 0.003013, "loss_rpn_bbox_fpn4": 0.007659, "loss_rpn_bbox_fpn5": 0.009733, "loss_rpn_bbox_fpn6": 0.002337, "loss_rpn_cls_fpn2": 0.001521, "loss_rpn_cls_fpn3": 0.003660, "loss_rpn_cls_fpn4": 0.003929, "loss_rpn_cls_fpn5": 0.004972, "loss_rpn_cls_fpn6": 0.000289, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501087}
json_stats: {"accuracy_cls": 0.882324, "eta": "12:19:17", "iter": 1440, "loss": 0.765917, "loss_bbox": 0.214809, "loss_cls": 0.282101, "loss_mask": 0.220491, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004500, "loss_rpn_bbox_fpn4": 0.013491, "loss_rpn_bbox_fpn5": 0.013751, "loss_rpn_bbox_fpn6": 0.000406, "loss_rpn_cls_fpn2": 0.003119, "loss_rpn_cls_fpn3": 0.006533, "loss_rpn_cls_fpn4": 0.007482, "loss_rpn_cls_fpn5": 0.004614, "loss_rpn_cls_fpn6": 0.000666, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.500874}
json_stats: {"accuracy_cls": 0.880859, "eta": "12:19:09", "iter": 1460, "loss": 0.725733, "loss_bbox": 0.193156, "loss_cls": 0.276342, "loss_mask": 0.157333, "loss_rpn_bbox_fpn2": 0.000391, "loss_rpn_bbox_fpn3": 0.004039, "loss_rpn_bbox_fpn4": 0.011208, "loss_rpn_bbox_fpn5": 0.005462, "loss_rpn_bbox_fpn6": 0.004361, "loss_rpn_cls_fpn2": 0.001632, "loss_rpn_cls_fpn3": 0.005587, "loss_rpn_cls_fpn4": 0.005972, "loss_rpn_cls_fpn5": 0.003700, "loss_rpn_cls_fpn6": 0.001371, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.500893}
json_stats: {"accuracy_cls": 0.886602, "eta": "12:19:14", "iter": 1480, "loss": 0.677968, "loss_bbox": 0.190428, "loss_cls": 0.248688, "loss_mask": 0.170555, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003664, "loss_rpn_bbox_fpn4": 0.008113, "loss_rpn_bbox_fpn5": 0.012272, "loss_rpn_bbox_fpn6": 0.000448, "loss_rpn_cls_fpn2": 0.002105, "loss_rpn_cls_fpn3": 0.005653, "loss_rpn_cls_fpn4": 0.005139, "loss_rpn_cls_fpn5": 0.003271, "loss_rpn_cls_fpn6": 0.000076, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501070}
json_stats: {"accuracy_cls": 0.895581, "eta": "12:19:07", "iter": 1500, "loss": 0.735046, "loss_bbox": 0.192235, "loss_cls": 0.262487, "loss_mask": 0.199408, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.007837, "loss_rpn_bbox_fpn4": 0.009899, "loss_rpn_bbox_fpn5": 0.009135, "loss_rpn_bbox_fpn6": 0.002318, "loss_rpn_cls_fpn2": 0.001225, "loss_rpn_cls_fpn3": 0.012801, "loss_rpn_cls_fpn4": 0.005145, "loss_rpn_cls_fpn5": 0.002719, "loss_rpn_cls_fpn6": 0.001794, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501100}
json_stats: {"accuracy_cls": 0.873664, "eta": "12:19:17", "iter": 1520, "loss": 0.719718, "loss_bbox": 0.211835, "loss_cls": 0.284932, "loss_mask": 0.162012, "loss_rpn_bbox_fpn2": 0.001117, "loss_rpn_bbox_fpn3": 0.003991, "loss_rpn_bbox_fpn4": 0.015436, "loss_rpn_bbox_fpn5": 0.008798, "loss_rpn_bbox_fpn6": 0.000203, "loss_rpn_cls_fpn2": 0.000762, "loss_rpn_cls_fpn3": 0.006129, "loss_rpn_cls_fpn4": 0.007248, "loss_rpn_cls_fpn5": 0.005830, "loss_rpn_cls_fpn6": 0.000306, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501332}
json_stats: {"accuracy_cls": 0.872070, "eta": "12:19:29", "iter": 1540, "loss": 0.712955, "loss_bbox": 0.215099, "loss_cls": 0.289494, "loss_mask": 0.173364, "loss_rpn_bbox_fpn2": 0.000956, "loss_rpn_bbox_fpn3": 0.003753, "loss_rpn_bbox_fpn4": 0.014658, "loss_rpn_bbox_fpn5": 0.007728, "loss_rpn_bbox_fpn6": 0.000296, "loss_rpn_cls_fpn2": 0.001272, "loss_rpn_cls_fpn3": 0.003439, "loss_rpn_cls_fpn4": 0.009032, "loss_rpn_cls_fpn5": 0.002574, "loss_rpn_cls_fpn6": 0.000524, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501579}
json_stats: {"accuracy_cls": 0.855311, "eta": "12:19:40", "iter": 1560, "loss": 0.765158, "loss_bbox": 0.196779, "loss_cls": 0.320479, "loss_mask": 0.177509, "loss_rpn_bbox_fpn2": 0.002440, "loss_rpn_bbox_fpn3": 0.006603, "loss_rpn_bbox_fpn4": 0.019809, "loss_rpn_bbox_fpn5": 0.004431, "loss_rpn_bbox_fpn6": 0.003191, "loss_rpn_cls_fpn2": 0.003727, "loss_rpn_cls_fpn3": 0.008621, "loss_rpn_cls_fpn4": 0.007955, "loss_rpn_cls_fpn5": 0.005740, "loss_rpn_cls_fpn6": 0.001405, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501810}
json_stats: {"accuracy_cls": 0.878456, "eta": "12:19:06", "iter": 1580, "loss": 0.752718, "loss_bbox": 0.204574, "loss_cls": 0.277042, "loss_mask": 0.190235, "loss_rpn_bbox_fpn2": 0.000824, "loss_rpn_bbox_fpn3": 0.006276, "loss_rpn_bbox_fpn4": 0.011818, "loss_rpn_bbox_fpn5": 0.010179, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001538, "loss_rpn_cls_fpn3": 0.007220, "loss_rpn_cls_fpn4": 0.006430, "loss_rpn_cls_fpn5": 0.002359, "loss_rpn_cls_fpn6": 0.000027, "lr": 0.010000, "mb_qsize": 64, "mem": 7623, "time": 0.501545}
json_stats: {"accuracy_cls": 0.890625, "eta": "12:19:09", "iter": 1600, "loss": 0.738888, "loss_bbox": 0.201818, "loss_cls": 0.275166, "loss_mask": 0.174403, "loss_rpn_bbox_fpn2": 0.002658, "loss_rpn_bbox_fpn3": 0.006444, "loss_rpn_bbox_fpn4": 0.010170, "loss_rpn_bbox_fpn5": 0.007602, "loss_rpn_bbox_fpn6": 0.004413, "loss_rpn_cls_fpn2": 0.003300, "loss_rpn_cls_fpn3": 0.008141, "loss_rpn_cls_fpn4": 0.007023, "loss_rpn_cls_fpn5": 0.007493, "loss_rpn_cls_fpn6": 0.000584, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501696}
json_stats: {"accuracy_cls": 0.882794, "eta": "12:18:49", "iter": 1620, "loss": 0.683401, "loss_bbox": 0.209943, "loss_cls": 0.271303, "loss_mask": 0.168574, "loss_rpn_bbox_fpn2": 0.000580, "loss_rpn_bbox_fpn3": 0.007777, "loss_rpn_bbox_fpn4": 0.016101, "loss_rpn_bbox_fpn5": 0.006488, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001061, "loss_rpn_cls_fpn3": 0.008442, "loss_rpn_cls_fpn4": 0.006339, "loss_rpn_cls_fpn5": 0.001891, "loss_rpn_cls_fpn6": 0.000031, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501573}
json_stats: {"accuracy_cls": 0.879870, "eta": "12:18:59", "iter": 1640, "loss": 0.677510, "loss_bbox": 0.197148, "loss_cls": 0.265646, "loss_mask": 0.170099, "loss_rpn_bbox_fpn2": 0.001161, "loss_rpn_bbox_fpn3": 0.005639, "loss_rpn_bbox_fpn4": 0.014342, "loss_rpn_bbox_fpn5": 0.006396, "loss_rpn_bbox_fpn6": 0.001813, "loss_rpn_cls_fpn2": 0.002052, "loss_rpn_cls_fpn3": 0.006620, "loss_rpn_cls_fpn4": 0.007136, "loss_rpn_cls_fpn5": 0.006181, "loss_rpn_cls_fpn6": 0.000970, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501801}
json_stats: {"accuracy_cls": 0.875011, "eta": "12:18:42", "iter": 1660, "loss": 0.702213, "loss_bbox": 0.185158, "loss_cls": 0.276466, "loss_mask": 0.188299, "loss_rpn_bbox_fpn2": 0.000500, "loss_rpn_bbox_fpn3": 0.003205, "loss_rpn_bbox_fpn4": 0.008624, "loss_rpn_bbox_fpn5": 0.007310, "loss_rpn_bbox_fpn6": 0.000442, "loss_rpn_cls_fpn2": 0.001314, "loss_rpn_cls_fpn3": 0.003009, "loss_rpn_cls_fpn4": 0.005348, "loss_rpn_cls_fpn5": 0.002318, "loss_rpn_cls_fpn6": 0.000220, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501728}
json_stats: {"accuracy_cls": 0.878418, "eta": "12:18:35", "iter": 1680, "loss": 0.736101, "loss_bbox": 0.203309, "loss_cls": 0.274040, "loss_mask": 0.178895, "loss_rpn_bbox_fpn2": 0.000267, "loss_rpn_bbox_fpn3": 0.004652, "loss_rpn_bbox_fpn4": 0.011799, "loss_rpn_bbox_fpn5": 0.005405, "loss_rpn_bbox_fpn6": 0.002798, "loss_rpn_cls_fpn2": 0.003751, "loss_rpn_cls_fpn3": 0.008060, "loss_rpn_cls_fpn4": 0.004848, "loss_rpn_cls_fpn5": 0.003514, "loss_rpn_cls_fpn6": 0.002170, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501760}
json_stats: {"accuracy_cls": 0.902624, "eta": "12:18:27", "iter": 1700, "loss": 0.627345, "loss_bbox": 0.177888, "loss_cls": 0.229754, "loss_mask": 0.175809, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002764, "loss_rpn_bbox_fpn4": 0.007721, "loss_rpn_bbox_fpn5": 0.007712, "loss_rpn_bbox_fpn6": 0.000948, "loss_rpn_cls_fpn2": 0.000817, "loss_rpn_cls_fpn3": 0.004847, "loss_rpn_cls_fpn4": 0.003493, "loss_rpn_cls_fpn5": 0.002779, "loss_rpn_cls_fpn6": 0.000364, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501787}
json_stats: {"accuracy_cls": 0.869033, "eta": "12:18:23", "iter": 1720, "loss": 0.707792, "loss_bbox": 0.193602, "loss_cls": 0.285543, "loss_mask": 0.180048, "loss_rpn_bbox_fpn2": 0.000636, "loss_rpn_bbox_fpn3": 0.006306, "loss_rpn_bbox_fpn4": 0.013780, "loss_rpn_bbox_fpn5": 0.012468, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001683, "loss_rpn_cls_fpn3": 0.004590, "loss_rpn_cls_fpn4": 0.005564, "loss_rpn_cls_fpn5": 0.001751, "loss_rpn_cls_fpn6": 0.000250, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501847}
json_stats: {"accuracy_cls": 0.873047, "eta": "12:18:07", "iter": 1740, "loss": 0.724153, "loss_bbox": 0.196121, "loss_cls": 0.280745, "loss_mask": 0.175731, "loss_rpn_bbox_fpn2": 0.000079, "loss_rpn_bbox_fpn3": 0.007571, "loss_rpn_bbox_fpn4": 0.016901, "loss_rpn_bbox_fpn5": 0.011611, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001027, "loss_rpn_cls_fpn3": 0.006835, "loss_rpn_cls_fpn4": 0.004892, "loss_rpn_cls_fpn5": 0.004418, "loss_rpn_cls_fpn6": 0.000103, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501784}
json_stats: {"accuracy_cls": 0.880371, "eta": "12:17:51", "iter": 1760, "loss": 0.735620, "loss_bbox": 0.200334, "loss_cls": 0.280935, "loss_mask": 0.177961, "loss_rpn_bbox_fpn2": 0.000646, "loss_rpn_bbox_fpn3": 0.005845, "loss_rpn_bbox_fpn4": 0.014892, "loss_rpn_bbox_fpn5": 0.014240, "loss_rpn_bbox_fpn6": 0.001496, "loss_rpn_cls_fpn2": 0.002210, "loss_rpn_cls_fpn3": 0.007960, "loss_rpn_cls_fpn4": 0.005958, "loss_rpn_cls_fpn5": 0.003260, "loss_rpn_cls_fpn6": 0.001396, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501718}
json_stats: {"accuracy_cls": 0.882324, "eta": "12:17:53", "iter": 1780, "loss": 0.699507, "loss_bbox": 0.197475, "loss_cls": 0.268850, "loss_mask": 0.178411, "loss_rpn_bbox_fpn2": 0.000285, "loss_rpn_bbox_fpn3": 0.004377, "loss_rpn_bbox_fpn4": 0.010765, "loss_rpn_bbox_fpn5": 0.011796, "loss_rpn_bbox_fpn6": 0.001562, "loss_rpn_cls_fpn2": 0.002317, "loss_rpn_cls_fpn3": 0.003953, "loss_rpn_cls_fpn4": 0.006013, "loss_rpn_cls_fpn5": 0.003935, "loss_rpn_cls_fpn6": 0.001690, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501850}
json_stats: {"accuracy_cls": 0.885742, "eta": "12:17:42", "iter": 1800, "loss": 0.728605, "loss_bbox": 0.190804, "loss_cls": 0.255643, "loss_mask": 0.173628, "loss_rpn_bbox_fpn2": 0.000168, "loss_rpn_bbox_fpn3": 0.005039, "loss_rpn_bbox_fpn4": 0.010193, "loss_rpn_bbox_fpn5": 0.014757, "loss_rpn_bbox_fpn6": 0.002791, "loss_rpn_cls_fpn2": 0.001316, "loss_rpn_cls_fpn3": 0.004907, "loss_rpn_cls_fpn4": 0.007391, "loss_rpn_cls_fpn5": 0.003158, "loss_rpn_cls_fpn6": 0.001538, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501838}
json_stats: {"accuracy_cls": 0.885742, "eta": "12:17:28", "iter": 1820, "loss": 0.660356, "loss_bbox": 0.182186, "loss_cls": 0.255204, "loss_mask": 0.152031, "loss_rpn_bbox_fpn2": 0.001044, "loss_rpn_bbox_fpn3": 0.003568, "loss_rpn_bbox_fpn4": 0.010918, "loss_rpn_bbox_fpn5": 0.009200, "loss_rpn_bbox_fpn6": 0.002597, "loss_rpn_cls_fpn2": 0.000826, "loss_rpn_cls_fpn3": 0.005018, "loss_rpn_cls_fpn4": 0.003941, "loss_rpn_cls_fpn5": 0.005281, "loss_rpn_cls_fpn6": 0.000736, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501800}
json_stats: {"accuracy_cls": 0.878939, "eta": "12:17:20", "iter": 1840, "loss": 0.745989, "loss_bbox": 0.210692, "loss_cls": 0.267809, "loss_mask": 0.188794, "loss_rpn_bbox_fpn2": 0.000713, "loss_rpn_bbox_fpn3": 0.004194, "loss_rpn_bbox_fpn4": 0.009843, "loss_rpn_bbox_fpn5": 0.012731, "loss_rpn_bbox_fpn6": 0.000392, "loss_rpn_cls_fpn2": 0.001466, "loss_rpn_cls_fpn3": 0.005106, "loss_rpn_cls_fpn4": 0.004455, "loss_rpn_cls_fpn5": 0.003634, "loss_rpn_cls_fpn6": 0.000352, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501821}
json_stats: {"accuracy_cls": 0.879915, "eta": "12:17:11", "iter": 1860, "loss": 0.761274, "loss_bbox": 0.229720, "loss_cls": 0.271095, "loss_mask": 0.181203, "loss_rpn_bbox_fpn2": 0.001674, "loss_rpn_bbox_fpn3": 0.005543, "loss_rpn_bbox_fpn4": 0.012001, "loss_rpn_bbox_fpn5": 0.012512, "loss_rpn_bbox_fpn6": 0.000939, "loss_rpn_cls_fpn2": 0.005081, "loss_rpn_cls_fpn3": 0.007515, "loss_rpn_cls_fpn4": 0.007202, "loss_rpn_cls_fpn5": 0.002529, "loss_rpn_cls_fpn6": 0.000298, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501836}
json_stats: {"accuracy_cls": 0.888165, "eta": "12:17:02", "iter": 1880, "loss": 0.759123, "loss_bbox": 0.192102, "loss_cls": 0.268608, "loss_mask": 0.186057, "loss_rpn_bbox_fpn2": 0.001411, "loss_rpn_bbox_fpn3": 0.008005, "loss_rpn_bbox_fpn4": 0.011003, "loss_rpn_bbox_fpn5": 0.014207, "loss_rpn_bbox_fpn6": 0.000708, "loss_rpn_cls_fpn2": 0.000954, "loss_rpn_cls_fpn3": 0.010362, "loss_rpn_cls_fpn4": 0.009959, "loss_rpn_cls_fpn5": 0.005207, "loss_rpn_cls_fpn6": 0.000640, "lr": 0.010000, "mb_qsize": 64, "mem": 7627, "time": 0.501846}
json_stats: {"accuracy_cls": 0.878655, "eta": "12:17:01", "iter": 1900, "loss": 0.737490, "loss_bbox": 0.211763, "loss_cls": 0.291017, "loss_mask": 0.178398, "loss_rpn_bbox_fpn2": 0.001185, "loss_rpn_bbox_fpn3": 0.006732, "loss_rpn_bbox_fpn4": 0.014054, "loss_rpn_bbox_fpn5": 0.005483, "loss_rpn_bbox_fpn6": 0.000306, "loss_rpn_cls_fpn2": 0.002420, "loss_rpn_cls_fpn3": 0.006622, "loss_rpn_cls_fpn4": 0.006872, "loss_rpn_cls_fpn5": 0.001329, "loss_rpn_cls_fpn6": 0.000087, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.501952}
json_stats: {"accuracy_cls": 0.894318, "eta": "12:16:49", "iter": 1920, "loss": 0.623227, "loss_bbox": 0.182404, "loss_cls": 0.240528, "loss_mask": 0.164710, "loss_rpn_bbox_fpn2": 0.000645, "loss_rpn_bbox_fpn3": 0.002944, "loss_rpn_bbox_fpn4": 0.005235, "loss_rpn_bbox_fpn5": 0.005766, "loss_rpn_bbox_fpn6": 0.004211, "loss_rpn_cls_fpn2": 0.001881, "loss_rpn_cls_fpn3": 0.003400, "loss_rpn_cls_fpn4": 0.002651, "loss_rpn_cls_fpn5": 0.005829, "loss_rpn_cls_fpn6": 0.000782, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.501924}
json_stats: {"accuracy_cls": 0.886719, "eta": "12:16:58", "iter": 1940, "loss": 0.817365, "loss_bbox": 0.210082, "loss_cls": 0.267789, "loss_mask": 0.218299, "loss_rpn_bbox_fpn2": 0.001512, "loss_rpn_bbox_fpn3": 0.005941, "loss_rpn_bbox_fpn4": 0.009265, "loss_rpn_bbox_fpn5": 0.010480, "loss_rpn_bbox_fpn6": 0.003686, "loss_rpn_cls_fpn2": 0.005740, "loss_rpn_cls_fpn3": 0.008517, "loss_rpn_cls_fpn4": 0.010349, "loss_rpn_cls_fpn5": 0.002516, "loss_rpn_cls_fpn6": 0.000446, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502140}
json_stats: {"accuracy_cls": 0.881729, "eta": "12:17:02", "iter": 1960, "loss": 0.770908, "loss_bbox": 0.206561, "loss_cls": 0.273469, "loss_mask": 0.215234, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004823, "loss_rpn_bbox_fpn4": 0.013121, "loss_rpn_bbox_fpn5": 0.011074, "loss_rpn_bbox_fpn6": 0.005015, "loss_rpn_cls_fpn2": 0.001725, "loss_rpn_cls_fpn3": 0.010037, "loss_rpn_cls_fpn4": 0.007970, "loss_rpn_cls_fpn5": 0.003635, "loss_rpn_cls_fpn6": 0.001334, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502301}
json_stats: {"accuracy_cls": 0.878086, "eta": "12:16:51", "iter": 1980, "loss": 0.714755, "loss_bbox": 0.185180, "loss_cls": 0.284188, "loss_mask": 0.170017, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005734, "loss_rpn_bbox_fpn4": 0.014155, "loss_rpn_bbox_fpn5": 0.009562, "loss_rpn_bbox_fpn6": 0.000096, "loss_rpn_cls_fpn2": 0.001261, "loss_rpn_cls_fpn3": 0.006236, "loss_rpn_cls_fpn4": 0.005198, "loss_rpn_cls_fpn5": 0.002992, "loss_rpn_cls_fpn6": 0.000100, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502288}
json_stats: {"accuracy_cls": 0.885254, "eta": "12:16:49", "iter": 2000, "loss": 0.796717, "loss_bbox": 0.198233, "loss_cls": 0.262369, "loss_mask": 0.169746, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005084, "loss_rpn_bbox_fpn4": 0.010926, "loss_rpn_bbox_fpn5": 0.004447, "loss_rpn_bbox_fpn6": 0.001866, "loss_rpn_cls_fpn2": 0.001383, "loss_rpn_cls_fpn3": 0.006715, "loss_rpn_cls_fpn4": 0.003858, "loss_rpn_cls_fpn5": 0.003167, "loss_rpn_cls_fpn6": 0.000499, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502375}
json_stats: {"accuracy_cls": 0.879495, "eta": "12:16:22", "iter": 2020, "loss": 0.670006, "loss_bbox": 0.173293, "loss_cls": 0.260484, "loss_mask": 0.173505, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004978, "loss_rpn_bbox_fpn4": 0.013303, "loss_rpn_bbox_fpn5": 0.005292, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000976, "loss_rpn_cls_fpn3": 0.005783, "loss_rpn_cls_fpn4": 0.003733, "loss_rpn_cls_fpn5": 0.002430, "loss_rpn_cls_fpn6": 0.000928, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502183}
json_stats: {"accuracy_cls": 0.880371, "eta": "12:16:05", "iter": 2040, "loss": 0.713090, "loss_bbox": 0.207630, "loss_cls": 0.271124, "loss_mask": 0.177689, "loss_rpn_bbox_fpn2": 0.000610, "loss_rpn_bbox_fpn3": 0.005554, "loss_rpn_bbox_fpn4": 0.011940, "loss_rpn_bbox_fpn5": 0.006988, "loss_rpn_bbox_fpn6": 0.001484, "loss_rpn_cls_fpn2": 0.001207, "loss_rpn_cls_fpn3": 0.008601, "loss_rpn_cls_fpn4": 0.003810, "loss_rpn_cls_fpn5": 0.001785, "loss_rpn_cls_fpn6": 0.000556, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502104}
json_stats: {"accuracy_cls": 0.868296, "eta": "12:15:55", "iter": 2060, "loss": 0.776988, "loss_bbox": 0.219672, "loss_cls": 0.293294, "loss_mask": 0.173076, "loss_rpn_bbox_fpn2": 0.000322, "loss_rpn_bbox_fpn3": 0.003390, "loss_rpn_bbox_fpn4": 0.011380, "loss_rpn_bbox_fpn5": 0.012611, "loss_rpn_bbox_fpn6": 0.003481, "loss_rpn_cls_fpn2": 0.000579, "loss_rpn_cls_fpn3": 0.003842, "loss_rpn_cls_fpn4": 0.004819, "loss_rpn_cls_fpn5": 0.002903, "loss_rpn_cls_fpn6": 0.000708, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502113}
json_stats: {"accuracy_cls": 0.861944, "eta": "12:16:02", "iter": 2080, "loss": 0.746032, "loss_bbox": 0.211520, "loss_cls": 0.288665, "loss_mask": 0.166160, "loss_rpn_bbox_fpn2": 0.000771, "loss_rpn_bbox_fpn3": 0.004714, "loss_rpn_bbox_fpn4": 0.016656, "loss_rpn_bbox_fpn5": 0.012821, "loss_rpn_bbox_fpn6": 0.000068, "loss_rpn_cls_fpn2": 0.001394, "loss_rpn_cls_fpn3": 0.006642, "loss_rpn_cls_fpn4": 0.009520, "loss_rpn_cls_fpn5": 0.004171, "loss_rpn_cls_fpn6": 0.000074, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502306}
json_stats: {"accuracy_cls": 0.879514, "eta": "12:16:00", "iter": 2100, "loss": 0.713505, "loss_bbox": 0.206765, "loss_cls": 0.271610, "loss_mask": 0.178051, "loss_rpn_bbox_fpn2": 0.000406, "loss_rpn_bbox_fpn3": 0.004193, "loss_rpn_bbox_fpn4": 0.009875, "loss_rpn_bbox_fpn5": 0.012262, "loss_rpn_bbox_fpn6": 0.000772, "loss_rpn_cls_fpn2": 0.000532, "loss_rpn_cls_fpn3": 0.004430, "loss_rpn_cls_fpn4": 0.004932, "loss_rpn_cls_fpn5": 0.003503, "loss_rpn_cls_fpn6": 0.000096, "lr": 0.010000, "mb_qsize": 64, "mem": 7629, "time": 0.502399}
json_stats: {"accuracy_cls": 0.885254, "eta": "12:15:46", "iter": 2120, "loss": 0.717281, "loss_bbox": 0.209634, "loss_cls": 0.270415, "loss_mask": 0.199981, "loss_rpn_bbox_fpn2": 0.000880, "loss_rpn_bbox_fpn3": 0.004348, "loss_rpn_bbox_fpn4": 0.008964, "loss_rpn_bbox_fpn5": 0.007883, "loss_rpn_bbox_fpn6": 0.001783, "loss_rpn_cls_fpn2": 0.001255, "loss_rpn_cls_fpn3": 0.007559, "loss_rpn_cls_fpn4": 0.004434, "loss_rpn_cls_fpn5": 0.003042, "loss_rpn_cls_fpn6": 0.000400, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502355}
json_stats: {"accuracy_cls": 0.882516, "eta": "12:15:44", "iter": 2140, "loss": 0.704026, "loss_bbox": 0.202185, "loss_cls": 0.272279, "loss_mask": 0.181994, "loss_rpn_bbox_fpn2": 0.000482, "loss_rpn_bbox_fpn3": 0.002810, "loss_rpn_bbox_fpn4": 0.008712, "loss_rpn_bbox_fpn5": 0.010943, "loss_rpn_bbox_fpn6": 0.000873, "loss_rpn_cls_fpn2": 0.001449, "loss_rpn_cls_fpn3": 0.005058, "loss_rpn_cls_fpn4": 0.003572, "loss_rpn_cls_fpn5": 0.001784, "loss_rpn_cls_fpn6": 0.000217, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502439}
json_stats: {"accuracy_cls": 0.883445, "eta": "12:15:27", "iter": 2160, "loss": 0.695870, "loss_bbox": 0.186712, "loss_cls": 0.262438, "loss_mask": 0.178891, "loss_rpn_bbox_fpn2": 0.000102, "loss_rpn_bbox_fpn3": 0.002965, "loss_rpn_bbox_fpn4": 0.017061, "loss_rpn_bbox_fpn5": 0.005716, "loss_rpn_bbox_fpn6": 0.002114, "loss_rpn_cls_fpn2": 0.002063, "loss_rpn_cls_fpn3": 0.004184, "loss_rpn_cls_fpn4": 0.007529, "loss_rpn_cls_fpn5": 0.003957, "loss_rpn_cls_fpn6": 0.000673, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502363}
json_stats: {"accuracy_cls": 0.882812, "eta": "12:15:23", "iter": 2180, "loss": 0.662721, "loss_bbox": 0.198397, "loss_cls": 0.261078, "loss_mask": 0.158217, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002256, "loss_rpn_bbox_fpn4": 0.008874, "loss_rpn_bbox_fpn5": 0.005815, "loss_rpn_bbox_fpn6": 0.000893, "loss_rpn_cls_fpn2": 0.000881, "loss_rpn_cls_fpn3": 0.003478, "loss_rpn_cls_fpn4": 0.004966, "loss_rpn_cls_fpn5": 0.002501, "loss_rpn_cls_fpn6": 0.000524, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502432}
json_stats: {"accuracy_cls": 0.865860, "eta": "12:15:16", "iter": 2200, "loss": 0.786544, "loss_bbox": 0.216939, "loss_cls": 0.299069, "loss_mask": 0.183969, "loss_rpn_bbox_fpn2": 0.000679, "loss_rpn_bbox_fpn3": 0.005068, "loss_rpn_bbox_fpn4": 0.013026, "loss_rpn_bbox_fpn5": 0.014402, "loss_rpn_bbox_fpn6": 0.002964, "loss_rpn_cls_fpn2": 0.002577, "loss_rpn_cls_fpn3": 0.008109, "loss_rpn_cls_fpn4": 0.008004, "loss_rpn_cls_fpn5": 0.004140, "loss_rpn_cls_fpn6": 0.000841, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502465}
json_stats: {"accuracy_cls": 0.899800, "eta": "12:15:09", "iter": 2220, "loss": 0.603275, "loss_bbox": 0.170614, "loss_cls": 0.230107, "loss_mask": 0.161418, "loss_rpn_bbox_fpn2": 0.000176, "loss_rpn_bbox_fpn3": 0.004526, "loss_rpn_bbox_fpn4": 0.013801, "loss_rpn_bbox_fpn5": 0.008323, "loss_rpn_bbox_fpn6": 0.002567, "loss_rpn_cls_fpn2": 0.001245, "loss_rpn_cls_fpn3": 0.003951, "loss_rpn_cls_fpn4": 0.003733, "loss_rpn_cls_fpn5": 0.003276, "loss_rpn_cls_fpn6": 0.000997, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502495}
json_stats: {"accuracy_cls": 0.892197, "eta": "12:14:56", "iter": 2240, "loss": 0.702335, "loss_bbox": 0.206073, "loss_cls": 0.249863, "loss_mask": 0.163217, "loss_rpn_bbox_fpn2": 0.000321, "loss_rpn_bbox_fpn3": 0.006113, "loss_rpn_bbox_fpn4": 0.008863, "loss_rpn_bbox_fpn5": 0.007792, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001829, "loss_rpn_cls_fpn3": 0.006392, "loss_rpn_cls_fpn4": 0.001831, "loss_rpn_cls_fpn5": 0.003726, "loss_rpn_cls_fpn6": 0.000224, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502468}
json_stats: {"accuracy_cls": 0.885545, "eta": "12:14:43", "iter": 2260, "loss": 0.691142, "loss_bbox": 0.208684, "loss_cls": 0.256878, "loss_mask": 0.190394, "loss_rpn_bbox_fpn2": 0.000094, "loss_rpn_bbox_fpn3": 0.004348, "loss_rpn_bbox_fpn4": 0.012267, "loss_rpn_bbox_fpn5": 0.006174, "loss_rpn_bbox_fpn6": 0.002468, "loss_rpn_cls_fpn2": 0.003666, "loss_rpn_cls_fpn3": 0.005752, "loss_rpn_cls_fpn4": 0.002953, "loss_rpn_cls_fpn5": 0.004235, "loss_rpn_cls_fpn6": 0.001505, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502429}
json_stats: {"accuracy_cls": 0.890039, "eta": "12:14:48", "iter": 2280, "loss": 0.685320, "loss_bbox": 0.185813, "loss_cls": 0.258059, "loss_mask": 0.168853, "loss_rpn_bbox_fpn2": 0.001203, "loss_rpn_bbox_fpn3": 0.004017, "loss_rpn_bbox_fpn4": 0.011212, "loss_rpn_bbox_fpn5": 0.011342, "loss_rpn_bbox_fpn6": 0.000513, "loss_rpn_cls_fpn2": 0.001790, "loss_rpn_cls_fpn3": 0.004430, "loss_rpn_cls_fpn4": 0.003617, "loss_rpn_cls_fpn5": 0.002863, "loss_rpn_cls_fpn6": 0.000728, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502607}
json_stats: {"accuracy_cls": 0.866278, "eta": "12:14:45", "iter": 2300, "loss": 0.684023, "loss_bbox": 0.182356, "loss_cls": 0.289589, "loss_mask": 0.163467, "loss_rpn_bbox_fpn2": 0.000711, "loss_rpn_bbox_fpn3": 0.006615, "loss_rpn_bbox_fpn4": 0.013128, "loss_rpn_bbox_fpn5": 0.002824, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000925, "loss_rpn_cls_fpn3": 0.007035, "loss_rpn_cls_fpn4": 0.005591, "loss_rpn_cls_fpn5": 0.001002, "loss_rpn_cls_fpn6": 0.000012, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502684}
json_stats: {"accuracy_cls": 0.886230, "eta": "12:14:50", "iter": 2320, "loss": 0.695851, "loss_bbox": 0.194096, "loss_cls": 0.243361, "loss_mask": 0.180976, "loss_rpn_bbox_fpn2": 0.000590, "loss_rpn_bbox_fpn3": 0.005491, "loss_rpn_bbox_fpn4": 0.010648, "loss_rpn_bbox_fpn5": 0.009364, "loss_rpn_bbox_fpn6": 0.000756, "loss_rpn_cls_fpn2": 0.002687, "loss_rpn_cls_fpn3": 0.005260, "loss_rpn_cls_fpn4": 0.003658, "loss_rpn_cls_fpn5": 0.004887, "loss_rpn_cls_fpn6": 0.000191, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502861}
json_stats: {"accuracy_cls": 0.873695, "eta": "12:14:55", "iter": 2340, "loss": 0.729546, "loss_bbox": 0.188378, "loss_cls": 0.282942, "loss_mask": 0.168066, "loss_rpn_bbox_fpn2": 0.001208, "loss_rpn_bbox_fpn3": 0.004035, "loss_rpn_bbox_fpn4": 0.011623, "loss_rpn_bbox_fpn5": 0.012576, "loss_rpn_bbox_fpn6": 0.001692, "loss_rpn_cls_fpn2": 0.005391, "loss_rpn_cls_fpn3": 0.004264, "loss_rpn_cls_fpn4": 0.005527, "loss_rpn_cls_fpn5": 0.004205, "loss_rpn_cls_fpn6": 0.000940, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.503026}
json_stats: {"accuracy_cls": 0.880859, "eta": "12:14:44", "iter": 2360, "loss": 0.707145, "loss_bbox": 0.189204, "loss_cls": 0.272721, "loss_mask": 0.165745, "loss_rpn_bbox_fpn2": 0.000121, "loss_rpn_bbox_fpn3": 0.004530, "loss_rpn_bbox_fpn4": 0.009007, "loss_rpn_bbox_fpn5": 0.010725, "loss_rpn_bbox_fpn6": 0.002022, "loss_rpn_cls_fpn2": 0.000745, "loss_rpn_cls_fpn3": 0.004444, "loss_rpn_cls_fpn4": 0.003720, "loss_rpn_cls_fpn5": 0.003214, "loss_rpn_cls_fpn6": 0.000749, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.503022}
json_stats: {"accuracy_cls": 0.905858, "eta": "12:14:30", "iter": 2380, "loss": 0.613259, "loss_bbox": 0.178851, "loss_cls": 0.237662, "loss_mask": 0.149942, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004253, "loss_rpn_bbox_fpn4": 0.006598, "loss_rpn_bbox_fpn5": 0.005249, "loss_rpn_bbox_fpn6": 0.001102, "loss_rpn_cls_fpn2": 0.000452, "loss_rpn_cls_fpn3": 0.006019, "loss_rpn_cls_fpn4": 0.003045, "loss_rpn_cls_fpn5": 0.001678, "loss_rpn_cls_fpn6": 0.000345, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502972}
json_stats: {"accuracy_cls": 0.906250, "eta": "12:14:09", "iter": 2400, "loss": 0.635912, "loss_bbox": 0.166010, "loss_cls": 0.221001, "loss_mask": 0.167701, "loss_rpn_bbox_fpn2": 0.000126, "loss_rpn_bbox_fpn3": 0.003666, "loss_rpn_bbox_fpn4": 0.008663, "loss_rpn_bbox_fpn5": 0.006542, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000665, "loss_rpn_cls_fpn3": 0.003951, "loss_rpn_cls_fpn4": 0.004942, "loss_rpn_cls_fpn5": 0.001550, "loss_rpn_cls_fpn6": 0.000095, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502852}
json_stats: {"accuracy_cls": 0.893653, "eta": "12:13:53", "iter": 2420, "loss": 0.695507, "loss_bbox": 0.182686, "loss_cls": 0.262026, "loss_mask": 0.180923, "loss_rpn_bbox_fpn2": 0.000161, "loss_rpn_bbox_fpn3": 0.003997, "loss_rpn_bbox_fpn4": 0.007613, "loss_rpn_bbox_fpn5": 0.011123, "loss_rpn_bbox_fpn6": 0.000889, "loss_rpn_cls_fpn2": 0.000398, "loss_rpn_cls_fpn3": 0.002110, "loss_rpn_cls_fpn4": 0.004408, "loss_rpn_cls_fpn5": 0.001800, "loss_rpn_cls_fpn6": 0.000601, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502786}
json_stats: {"accuracy_cls": 0.878117, "eta": "12:13:48", "iter": 2440, "loss": 0.723042, "loss_bbox": 0.199588, "loss_cls": 0.269981, "loss_mask": 0.187108, "loss_rpn_bbox_fpn2": 0.000800, "loss_rpn_bbox_fpn3": 0.005754, "loss_rpn_bbox_fpn4": 0.008683, "loss_rpn_bbox_fpn5": 0.014652, "loss_rpn_bbox_fpn6": 0.004120, "loss_rpn_cls_fpn2": 0.004510, "loss_rpn_cls_fpn3": 0.009875, "loss_rpn_cls_fpn4": 0.005345, "loss_rpn_cls_fpn5": 0.003131, "loss_rpn_cls_fpn6": 0.001101, "lr": 0.010000, "mb_qsize": 64, "mem": 7634, "time": 0.502838}
json_stats: {"accuracy_cls": 0.865234, "eta": "12:13:52", "iter": 2460, "loss": 0.703648, "loss_bbox": 0.203205, "loss_cls": 0.300336, "loss_mask": 0.168039, "loss_rpn_bbox_fpn2": 0.001359, "loss_rpn_bbox_fpn3": 0.005054, "loss_rpn_bbox_fpn4": 0.012230, "loss_rpn_bbox_fpn5": 0.011030, "loss_rpn_bbox_fpn6": 0.000669, "loss_rpn_cls_fpn2": 0.002762, "loss_rpn_cls_fpn3": 0.004770, "loss_rpn_cls_fpn4": 0.005294, "loss_rpn_cls_fpn5": 0.001679, "loss_rpn_cls_fpn6": 0.000732, "lr": 0.010000, "mb_qsize": 64, "mem": 7637, "time": 0.502993}
json_stats: {"accuracy_cls": 0.887443, "eta": "12:13:47", "iter": 2480, "loss": 0.729015, "loss_bbox": 0.193434, "loss_cls": 0.275043, "loss_mask": 0.165296, "loss_rpn_bbox_fpn2": 0.000428, "loss_rpn_bbox_fpn3": 0.004227, "loss_rpn_bbox_fpn4": 0.015876, "loss_rpn_bbox_fpn5": 0.006676, "loss_rpn_bbox_fpn6": 0.001969, "loss_rpn_cls_fpn2": 0.000842, "loss_rpn_cls_fpn3": 0.005124, "loss_rpn_cls_fpn4": 0.003544, "loss_rpn_cls_fpn5": 0.003293, "loss_rpn_cls_fpn6": 0.000389, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503057}
json_stats: {"accuracy_cls": 0.900248, "eta": "12:13:41", "iter": 2500, "loss": 0.685489, "loss_bbox": 0.193335, "loss_cls": 0.249833, "loss_mask": 0.178348, "loss_rpn_bbox_fpn2": 0.000551, "loss_rpn_bbox_fpn3": 0.003897, "loss_rpn_bbox_fpn4": 0.005745, "loss_rpn_bbox_fpn5": 0.007427, "loss_rpn_bbox_fpn6": 0.001824, "loss_rpn_cls_fpn2": 0.001728, "loss_rpn_cls_fpn3": 0.007848, "loss_rpn_cls_fpn4": 0.004028, "loss_rpn_cls_fpn5": 0.002271, "loss_rpn_cls_fpn6": 0.000476, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503103}
json_stats: {"accuracy_cls": 0.876465, "eta": "12:13:23", "iter": 2520, "loss": 0.708541, "loss_bbox": 0.190724, "loss_cls": 0.282687, "loss_mask": 0.180430, "loss_rpn_bbox_fpn2": 0.000167, "loss_rpn_bbox_fpn3": 0.003419, "loss_rpn_bbox_fpn4": 0.009816, "loss_rpn_bbox_fpn5": 0.008451, "loss_rpn_bbox_fpn6": 0.000960, "loss_rpn_cls_fpn2": 0.000541, "loss_rpn_cls_fpn3": 0.006013, "loss_rpn_cls_fpn4": 0.006980, "loss_rpn_cls_fpn5": 0.002283, "loss_rpn_cls_fpn6": 0.000676, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503008}
json_stats: {"accuracy_cls": 0.880859, "eta": "12:13:22", "iter": 2540, "loss": 0.733516, "loss_bbox": 0.207101, "loss_cls": 0.271601, "loss_mask": 0.174847, "loss_rpn_bbox_fpn2": 0.000385, "loss_rpn_bbox_fpn3": 0.004826, "loss_rpn_bbox_fpn4": 0.013101, "loss_rpn_bbox_fpn5": 0.011689, "loss_rpn_bbox_fpn6": 0.000763, "loss_rpn_cls_fpn2": 0.000672, "loss_rpn_cls_fpn3": 0.008813, "loss_rpn_cls_fpn4": 0.005389, "loss_rpn_cls_fpn5": 0.001974, "loss_rpn_cls_fpn6": 0.000211, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503116}
json_stats: {"accuracy_cls": 0.879735, "eta": "12:13:12", "iter": 2560, "loss": 0.715207, "loss_bbox": 0.186812, "loss_cls": 0.297576, "loss_mask": 0.167397, "loss_rpn_bbox_fpn2": 0.002136, "loss_rpn_bbox_fpn3": 0.006451, "loss_rpn_bbox_fpn4": 0.012614, "loss_rpn_bbox_fpn5": 0.011241, "loss_rpn_bbox_fpn6": 0.003161, "loss_rpn_cls_fpn2": 0.003461, "loss_rpn_cls_fpn3": 0.008418, "loss_rpn_cls_fpn4": 0.008244, "loss_rpn_cls_fpn5": 0.006759, "loss_rpn_cls_fpn6": 0.000768, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503113}
json_stats: {"accuracy_cls": 0.878107, "eta": "12:13:01", "iter": 2580, "loss": 0.696836, "loss_bbox": 0.207541, "loss_cls": 0.280962, "loss_mask": 0.167327, "loss_rpn_bbox_fpn2": 0.000773, "loss_rpn_bbox_fpn3": 0.003720, "loss_rpn_bbox_fpn4": 0.015344, "loss_rpn_bbox_fpn5": 0.005511, "loss_rpn_bbox_fpn6": 0.001061, "loss_rpn_cls_fpn2": 0.001374, "loss_rpn_cls_fpn3": 0.006215, "loss_rpn_cls_fpn4": 0.006673, "loss_rpn_cls_fpn5": 0.002129, "loss_rpn_cls_fpn6": 0.000206, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503104}
json_stats: {"accuracy_cls": 0.887622, "eta": "12:12:46", "iter": 2600, "loss": 0.636645, "loss_bbox": 0.187414, "loss_cls": 0.245470, "loss_mask": 0.152580, "loss_rpn_bbox_fpn2": 0.000742, "loss_rpn_bbox_fpn3": 0.002673, "loss_rpn_bbox_fpn4": 0.006864, "loss_rpn_bbox_fpn5": 0.004265, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001407, "loss_rpn_cls_fpn3": 0.006525, "loss_rpn_cls_fpn4": 0.004388, "loss_rpn_cls_fpn5": 0.001025, "loss_rpn_cls_fpn6": 0.000063, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503048}
json_stats: {"accuracy_cls": 0.872926, "eta": "12:12:30", "iter": 2620, "loss": 0.721556, "loss_bbox": 0.197675, "loss_cls": 0.290921, "loss_mask": 0.188279, "loss_rpn_bbox_fpn2": 0.000401, "loss_rpn_bbox_fpn3": 0.004540, "loss_rpn_bbox_fpn4": 0.007618, "loss_rpn_bbox_fpn5": 0.007025, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001633, "loss_rpn_cls_fpn3": 0.006809, "loss_rpn_cls_fpn4": 0.005021, "loss_rpn_cls_fpn5": 0.000644, "loss_rpn_cls_fpn6": 0.000021, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.502985}
json_stats: {"accuracy_cls": 0.887395, "eta": "12:12:22", "iter": 2640, "loss": 0.626690, "loss_bbox": 0.169933, "loss_cls": 0.268701, "loss_mask": 0.149124, "loss_rpn_bbox_fpn2": 0.001381, "loss_rpn_bbox_fpn3": 0.005353, "loss_rpn_bbox_fpn4": 0.007184, "loss_rpn_bbox_fpn5": 0.008216, "loss_rpn_bbox_fpn6": 0.001996, "loss_rpn_cls_fpn2": 0.001022, "loss_rpn_cls_fpn3": 0.005036, "loss_rpn_cls_fpn4": 0.004199, "loss_rpn_cls_fpn5": 0.002254, "loss_rpn_cls_fpn6": 0.000511, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503000}
json_stats: {"accuracy_cls": 0.881787, "eta": "12:12:21", "iter": 2660, "loss": 0.692997, "loss_bbox": 0.209060, "loss_cls": 0.266741, "loss_mask": 0.161908, "loss_rpn_bbox_fpn2": 0.000221, "loss_rpn_bbox_fpn3": 0.003829, "loss_rpn_bbox_fpn4": 0.010482, "loss_rpn_bbox_fpn5": 0.009533, "loss_rpn_bbox_fpn6": 0.002233, "loss_rpn_cls_fpn2": 0.002210, "loss_rpn_cls_fpn3": 0.008014, "loss_rpn_cls_fpn4": 0.005137, "loss_rpn_cls_fpn5": 0.001860, "loss_rpn_cls_fpn6": 0.000863, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503107}
json_stats: {"accuracy_cls": 0.897949, "eta": "12:12:09", "iter": 2680, "loss": 0.638307, "loss_bbox": 0.191792, "loss_cls": 0.235582, "loss_mask": 0.156852, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003340, "loss_rpn_bbox_fpn4": 0.007196, "loss_rpn_bbox_fpn5": 0.009586, "loss_rpn_bbox_fpn6": 0.000591, "loss_rpn_cls_fpn2": 0.002095, "loss_rpn_cls_fpn3": 0.003024, "loss_rpn_cls_fpn4": 0.003124, "loss_rpn_cls_fpn5": 0.002984, "loss_rpn_cls_fpn6": 0.000814, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503089}
json_stats: {"accuracy_cls": 0.892815, "eta": "12:12:05", "iter": 2700, "loss": 0.660078, "loss_bbox": 0.192367, "loss_cls": 0.260067, "loss_mask": 0.179516, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005084, "loss_rpn_bbox_fpn4": 0.007228, "loss_rpn_bbox_fpn5": 0.008109, "loss_rpn_bbox_fpn6": 0.002475, "loss_rpn_cls_fpn2": 0.001320, "loss_rpn_cls_fpn3": 0.006214, "loss_rpn_cls_fpn4": 0.003508, "loss_rpn_cls_fpn5": 0.002628, "loss_rpn_cls_fpn6": 0.001143, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503159}
json_stats: {"accuracy_cls": 0.889428, "eta": "12:12:01", "iter": 2720, "loss": 0.682763, "loss_bbox": 0.192082, "loss_cls": 0.257272, "loss_mask": 0.187219, "loss_rpn_bbox_fpn2": 0.000290, "loss_rpn_bbox_fpn3": 0.003859, "loss_rpn_bbox_fpn4": 0.012434, "loss_rpn_bbox_fpn5": 0.012102, "loss_rpn_bbox_fpn6": 0.000234, "loss_rpn_cls_fpn2": 0.001479, "loss_rpn_cls_fpn3": 0.003818, "loss_rpn_cls_fpn4": 0.003757, "loss_rpn_cls_fpn5": 0.002338, "loss_rpn_cls_fpn6": 0.000290, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503225}
json_stats: {"accuracy_cls": 0.878851, "eta": "12:12:00", "iter": 2740, "loss": 0.682182, "loss_bbox": 0.183111, "loss_cls": 0.279053, "loss_mask": 0.159273, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005846, "loss_rpn_bbox_fpn4": 0.012258, "loss_rpn_bbox_fpn5": 0.012670, "loss_rpn_bbox_fpn6": 0.002265, "loss_rpn_cls_fpn2": 0.000593, "loss_rpn_cls_fpn3": 0.002910, "loss_rpn_cls_fpn4": 0.004847, "loss_rpn_cls_fpn5": 0.003475, "loss_rpn_cls_fpn6": 0.001423, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503329}
json_stats: {"accuracy_cls": 0.877930, "eta": "12:12:02", "iter": 2760, "loss": 0.691666, "loss_bbox": 0.189244, "loss_cls": 0.286405, "loss_mask": 0.187674, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003208, "loss_rpn_bbox_fpn4": 0.009294, "loss_rpn_bbox_fpn5": 0.007142, "loss_rpn_bbox_fpn6": 0.000741, "loss_rpn_cls_fpn2": 0.000815, "loss_rpn_cls_fpn3": 0.004368, "loss_rpn_cls_fpn4": 0.005371, "loss_rpn_cls_fpn5": 0.001807, "loss_rpn_cls_fpn6": 0.000443, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503473}
json_stats: {"accuracy_cls": 0.886295, "eta": "12:11:44", "iter": 2780, "loss": 0.653156, "loss_bbox": 0.187835, "loss_cls": 0.259615, "loss_mask": 0.150688, "loss_rpn_bbox_fpn2": 0.000911, "loss_rpn_bbox_fpn3": 0.003205, "loss_rpn_bbox_fpn4": 0.010140, "loss_rpn_bbox_fpn5": 0.010200, "loss_rpn_bbox_fpn6": 0.001664, "loss_rpn_cls_fpn2": 0.001796, "loss_rpn_cls_fpn3": 0.003966, "loss_rpn_cls_fpn4": 0.005505, "loss_rpn_cls_fpn5": 0.002396, "loss_rpn_cls_fpn6": 0.000637, "lr": 0.010000, "mb_qsize": 64, "mem": 7638, "time": 0.503380}
json_stats: {"accuracy_cls": 0.903014, "eta": "12:11:26", "iter": 2800, "loss": 0.663068, "loss_bbox": 0.191978, "loss_cls": 0.226047, "loss_mask": 0.184059, "loss_rpn_bbox_fpn2": 0.000410, "loss_rpn_bbox_fpn3": 0.001465, "loss_rpn_bbox_fpn4": 0.004193, "loss_rpn_bbox_fpn5": 0.004142, "loss_rpn_bbox_fpn6": 0.000485, "loss_rpn_cls_fpn2": 0.001172, "loss_rpn_cls_fpn3": 0.003448, "loss_rpn_cls_fpn4": 0.002598, "loss_rpn_cls_fpn5": 0.003946, "loss_rpn_cls_fpn6": 0.000605, "lr": 0.010000, "mb_qsize": 64, "mem": 7639, "time": 0.503288}
json_stats: {"accuracy_cls": 0.893555, "eta": "12:11:12", "iter": 2820, "loss": 0.674201, "loss_bbox": 0.198064, "loss_cls": 0.255838, "loss_mask": 0.175595, "loss_rpn_bbox_fpn2": 0.000459, "loss_rpn_bbox_fpn3": 0.004565, "loss_rpn_bbox_fpn4": 0.006434, "loss_rpn_bbox_fpn5": 0.007362, "loss_rpn_bbox_fpn6": 0.002202, "loss_rpn_cls_fpn2": 0.001028, "loss_rpn_cls_fpn3": 0.006776, "loss_rpn_cls_fpn4": 0.003233, "loss_rpn_cls_fpn5": 0.002687, "loss_rpn_cls_fpn6": 0.000382, "lr": 0.010000, "mb_qsize": 64, "mem": 7639, "time": 0.503235}
json_stats: {"accuracy_cls": 0.882755, "eta": "12:11:04", "iter": 2840, "loss": 0.728018, "loss_bbox": 0.209126, "loss_cls": 0.283505, "loss_mask": 0.159848, "loss_rpn_bbox_fpn2": 0.000054, "loss_rpn_bbox_fpn3": 0.003528, "loss_rpn_bbox_fpn4": 0.011184, "loss_rpn_bbox_fpn5": 0.009598, "loss_rpn_bbox_fpn6": 0.002541, "loss_rpn_cls_fpn2": 0.001087, "loss_rpn_cls_fpn3": 0.003129, "loss_rpn_cls_fpn4": 0.004724, "loss_rpn_cls_fpn5": 0.002522, "loss_rpn_cls_fpn6": 0.000481, "lr": 0.010000, "mb_qsize": 64, "mem": 7639, "time": 0.503262}
json_stats: {"accuracy_cls": 0.863281, "eta": "12:11:01", "iter": 2860, "loss": 0.773360, "loss_bbox": 0.210485, "loss_cls": 0.304857, "loss_mask": 0.182765, "loss_rpn_bbox_fpn2": 0.000272, "loss_rpn_bbox_fpn3": 0.007948, "loss_rpn_bbox_fpn4": 0.010988, "loss_rpn_bbox_fpn5": 0.010453, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001585, "loss_rpn_cls_fpn3": 0.005213, "loss_rpn_cls_fpn4": 0.007900, "loss_rpn_cls_fpn5": 0.001366, "loss_rpn_cls_fpn6": 0.000266, "lr": 0.010000, "mb_qsize": 64, "mem": 7639, "time": 0.503351}
json_stats: {"accuracy_cls": 0.890137, "eta": "12:10:53", "iter": 2880, "loss": 0.729296, "loss_bbox": 0.190163, "loss_cls": 0.262472, "loss_mask": 0.186060, "loss_rpn_bbox_fpn2": 0.001178, "loss_rpn_bbox_fpn3": 0.006271, "loss_rpn_bbox_fpn4": 0.008963, "loss_rpn_bbox_fpn5": 0.010425, "loss_rpn_bbox_fpn6": 0.002354, "loss_rpn_cls_fpn2": 0.002946, "loss_rpn_cls_fpn3": 0.004471, "loss_rpn_cls_fpn4": 0.004731, "loss_rpn_cls_fpn5": 0.002231, "loss_rpn_cls_fpn6": 0.000561, "lr": 0.010000, "mb_qsize": 64, "mem": 7639, "time": 0.503374}
json_stats: {"accuracy_cls": 0.893555, "eta": "12:10:49", "iter": 2900, "loss": 0.637948, "loss_bbox": 0.191631, "loss_cls": 0.252166, "loss_mask": 0.148929, "loss_rpn_bbox_fpn2": 0.000192, "loss_rpn_bbox_fpn3": 0.005422, "loss_rpn_bbox_fpn4": 0.004851, "loss_rpn_bbox_fpn5": 0.011089, "loss_rpn_bbox_fpn6": 0.004667, "loss_rpn_cls_fpn2": 0.000838, "loss_rpn_cls_fpn3": 0.005201, "loss_rpn_cls_fpn4": 0.002228, "loss_rpn_cls_fpn5": 0.003737, "loss_rpn_cls_fpn6": 0.000660, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503440}
json_stats: {"accuracy_cls": 0.895508, "eta": "12:10:42", "iter": 2920, "loss": 0.675199, "loss_bbox": 0.190431, "loss_cls": 0.248509, "loss_mask": 0.162755, "loss_rpn_bbox_fpn2": 0.000700, "loss_rpn_bbox_fpn3": 0.003129, "loss_rpn_bbox_fpn4": 0.011192, "loss_rpn_bbox_fpn5": 0.008108, "loss_rpn_bbox_fpn6": 0.000969, "loss_rpn_cls_fpn2": 0.000470, "loss_rpn_cls_fpn3": 0.004790, "loss_rpn_cls_fpn4": 0.002759, "loss_rpn_cls_fpn5": 0.002431, "loss_rpn_cls_fpn6": 0.000246, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503477}
json_stats: {"accuracy_cls": 0.884277, "eta": "12:10:33", "iter": 2940, "loss": 0.703092, "loss_bbox": 0.192780, "loss_cls": 0.287481, "loss_mask": 0.163320, "loss_rpn_bbox_fpn2": 0.000250, "loss_rpn_bbox_fpn3": 0.006847, "loss_rpn_bbox_fpn4": 0.011001, "loss_rpn_bbox_fpn5": 0.008984, "loss_rpn_bbox_fpn6": 0.002104, "loss_rpn_cls_fpn2": 0.001024, "loss_rpn_cls_fpn3": 0.005344, "loss_rpn_cls_fpn4": 0.005723, "loss_rpn_cls_fpn5": 0.003584, "loss_rpn_cls_fpn6": 0.000441, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503486}
json_stats: {"accuracy_cls": 0.874719, "eta": "12:10:27", "iter": 2960, "loss": 0.776953, "loss_bbox": 0.207763, "loss_cls": 0.301062, "loss_mask": 0.183959, "loss_rpn_bbox_fpn2": 0.000317, "loss_rpn_bbox_fpn3": 0.004751, "loss_rpn_bbox_fpn4": 0.008743, "loss_rpn_bbox_fpn5": 0.014490, "loss_rpn_bbox_fpn6": 0.002535, "loss_rpn_cls_fpn2": 0.002103, "loss_rpn_cls_fpn3": 0.005717, "loss_rpn_cls_fpn4": 0.006603, "loss_rpn_cls_fpn5": 0.003599, "loss_rpn_cls_fpn6": 0.000491, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503533}
json_stats: {"accuracy_cls": 0.895996, "eta": "12:10:15", "iter": 2980, "loss": 0.583769, "loss_bbox": 0.183374, "loss_cls": 0.233850, "loss_mask": 0.153191, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002259, "loss_rpn_bbox_fpn4": 0.004978, "loss_rpn_bbox_fpn5": 0.006294, "loss_rpn_bbox_fpn6": 0.002277, "loss_rpn_cls_fpn2": 0.000507, "loss_rpn_cls_fpn3": 0.002712, "loss_rpn_cls_fpn4": 0.002372, "loss_rpn_cls_fpn5": 0.001667, "loss_rpn_cls_fpn6": 0.000277, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503510}
json_stats: {"accuracy_cls": 0.899414, "eta": "12:09:57", "iter": 3000, "loss": 0.659786, "loss_bbox": 0.196446, "loss_cls": 0.241311, "loss_mask": 0.183000, "loss_rpn_bbox_fpn2": 0.000293, "loss_rpn_bbox_fpn3": 0.003992, "loss_rpn_bbox_fpn4": 0.012599, "loss_rpn_bbox_fpn5": 0.004998, "loss_rpn_bbox_fpn6": 0.000059, "loss_rpn_cls_fpn2": 0.001946, "loss_rpn_cls_fpn3": 0.003891, "loss_rpn_cls_fpn4": 0.003547, "loss_rpn_cls_fpn5": 0.001038, "loss_rpn_cls_fpn6": 0.000028, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503424}
json_stats: {"accuracy_cls": 0.872070, "eta": "12:09:48", "iter": 3020, "loss": 0.662108, "loss_bbox": 0.184846, "loss_cls": 0.286757, "loss_mask": 0.148823, "loss_rpn_bbox_fpn2": 0.001096, "loss_rpn_bbox_fpn3": 0.005253, "loss_rpn_bbox_fpn4": 0.017151, "loss_rpn_bbox_fpn5": 0.015776, "loss_rpn_bbox_fpn6": 0.000305, "loss_rpn_cls_fpn2": 0.000705, "loss_rpn_cls_fpn3": 0.004896, "loss_rpn_cls_fpn4": 0.004001, "loss_rpn_cls_fpn5": 0.002299, "loss_rpn_cls_fpn6": 0.000071, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503436}
json_stats: {"accuracy_cls": 0.870117, "eta": "12:09:45", "iter": 3040, "loss": 0.724727, "loss_bbox": 0.208750, "loss_cls": 0.274168, "loss_mask": 0.178515, "loss_rpn_bbox_fpn2": 0.000380, "loss_rpn_bbox_fpn3": 0.004605, "loss_rpn_bbox_fpn4": 0.007940, "loss_rpn_bbox_fpn5": 0.007265, "loss_rpn_bbox_fpn6": 0.000330, "loss_rpn_cls_fpn2": 0.003585, "loss_rpn_cls_fpn3": 0.004983, "loss_rpn_cls_fpn4": 0.002427, "loss_rpn_cls_fpn5": 0.002732, "loss_rpn_cls_fpn6": 0.000214, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503511}
json_stats: {"accuracy_cls": 0.893066, "eta": "12:09:41", "iter": 3060, "loss": 0.664557, "loss_bbox": 0.175245, "loss_cls": 0.256866, "loss_mask": 0.147741, "loss_rpn_bbox_fpn2": 0.001293, "loss_rpn_bbox_fpn3": 0.002820, "loss_rpn_bbox_fpn4": 0.005791, "loss_rpn_bbox_fpn5": 0.007634, "loss_rpn_bbox_fpn6": 0.000837, "loss_rpn_cls_fpn2": 0.001479, "loss_rpn_cls_fpn3": 0.005534, "loss_rpn_cls_fpn4": 0.003688, "loss_rpn_cls_fpn5": 0.002770, "loss_rpn_cls_fpn6": 0.000305, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503587}
json_stats: {"accuracy_cls": 0.892090, "eta": "12:09:19", "iter": 3080, "loss": 0.637390, "loss_bbox": 0.186798, "loss_cls": 0.234870, "loss_mask": 0.146035, "loss_rpn_bbox_fpn2": 0.000431, "loss_rpn_bbox_fpn3": 0.003902, "loss_rpn_bbox_fpn4": 0.012707, "loss_rpn_bbox_fpn5": 0.001939, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001220, "loss_rpn_cls_fpn3": 0.003556, "loss_rpn_cls_fpn4": 0.003613, "loss_rpn_cls_fpn5": 0.001716, "loss_rpn_cls_fpn6": 0.000056, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503451}
json_stats: {"accuracy_cls": 0.906177, "eta": "12:08:59", "iter": 3100, "loss": 0.560739, "loss_bbox": 0.164270, "loss_cls": 0.221497, "loss_mask": 0.139594, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002061, "loss_rpn_bbox_fpn4": 0.006185, "loss_rpn_bbox_fpn5": 0.003504, "loss_rpn_bbox_fpn6": 0.001391, "loss_rpn_cls_fpn2": 0.000452, "loss_rpn_cls_fpn3": 0.003613, "loss_rpn_cls_fpn4": 0.002689, "loss_rpn_cls_fpn5": 0.000714, "loss_rpn_cls_fpn6": 0.000203, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503332}
json_stats: {"accuracy_cls": 0.870605, "eta": "12:08:58", "iter": 3120, "loss": 0.680908, "loss_bbox": 0.188086, "loss_cls": 0.275765, "loss_mask": 0.175380, "loss_rpn_bbox_fpn2": 0.000863, "loss_rpn_bbox_fpn3": 0.005411, "loss_rpn_bbox_fpn4": 0.012086, "loss_rpn_bbox_fpn5": 0.009214, "loss_rpn_bbox_fpn6": 0.000646, "loss_rpn_cls_fpn2": 0.000787, "loss_rpn_cls_fpn3": 0.003923, "loss_rpn_cls_fpn4": 0.004343, "loss_rpn_cls_fpn5": 0.004422, "loss_rpn_cls_fpn6": 0.000821, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503433}
json_stats: {"accuracy_cls": 0.898607, "eta": "12:08:48", "iter": 3140, "loss": 0.610493, "loss_bbox": 0.166039, "loss_cls": 0.220316, "loss_mask": 0.137866, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002177, "loss_rpn_bbox_fpn4": 0.010120, "loss_rpn_bbox_fpn5": 0.005314, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000338, "loss_rpn_cls_fpn3": 0.004572, "loss_rpn_cls_fpn4": 0.002198, "loss_rpn_cls_fpn5": 0.001626, "loss_rpn_cls_fpn6": 0.000002, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503436}
json_stats: {"accuracy_cls": 0.882677, "eta": "12:08:46", "iter": 3160, "loss": 0.718050, "loss_bbox": 0.200588, "loss_cls": 0.268731, "loss_mask": 0.189543, "loss_rpn_bbox_fpn2": 0.000981, "loss_rpn_bbox_fpn3": 0.002696, "loss_rpn_bbox_fpn4": 0.013243, "loss_rpn_bbox_fpn5": 0.011253, "loss_rpn_bbox_fpn6": 0.001996, "loss_rpn_cls_fpn2": 0.000551, "loss_rpn_cls_fpn3": 0.003252, "loss_rpn_cls_fpn4": 0.004707, "loss_rpn_cls_fpn5": 0.004268, "loss_rpn_cls_fpn6": 0.000242, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503529}
json_stats: {"accuracy_cls": 0.886719, "eta": "12:08:40", "iter": 3180, "loss": 0.689127, "loss_bbox": 0.188955, "loss_cls": 0.262345, "loss_mask": 0.177531, "loss_rpn_bbox_fpn2": 0.000616, "loss_rpn_bbox_fpn3": 0.004455, "loss_rpn_bbox_fpn4": 0.009089, "loss_rpn_bbox_fpn5": 0.011643, "loss_rpn_bbox_fpn6": 0.000936, "loss_rpn_cls_fpn2": 0.003936, "loss_rpn_cls_fpn3": 0.003706, "loss_rpn_cls_fpn4": 0.004533, "loss_rpn_cls_fpn5": 0.003919, "loss_rpn_cls_fpn6": 0.000487, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503581}
json_stats: {"accuracy_cls": 0.870782, "eta": "12:08:35", "iter": 3200, "loss": 0.735220, "loss_bbox": 0.198538, "loss_cls": 0.291847, "loss_mask": 0.171610, "loss_rpn_bbox_fpn2": 0.000584, "loss_rpn_bbox_fpn3": 0.003144, "loss_rpn_bbox_fpn4": 0.012927, "loss_rpn_bbox_fpn5": 0.014909, "loss_rpn_bbox_fpn6": 0.000847, "loss_rpn_cls_fpn2": 0.001592, "loss_rpn_cls_fpn3": 0.002775, "loss_rpn_cls_fpn4": 0.007123, "loss_rpn_cls_fpn5": 0.002565, "loss_rpn_cls_fpn6": 0.000042, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503636}
json_stats: {"accuracy_cls": 0.888184, "eta": "12:08:22", "iter": 3220, "loss": 0.659856, "loss_bbox": 0.177461, "loss_cls": 0.259471, "loss_mask": 0.160650, "loss_rpn_bbox_fpn2": 0.000199, "loss_rpn_bbox_fpn3": 0.003341, "loss_rpn_bbox_fpn4": 0.011729, "loss_rpn_bbox_fpn5": 0.002099, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001107, "loss_rpn_cls_fpn3": 0.005705, "loss_rpn_cls_fpn4": 0.002978, "loss_rpn_cls_fpn5": 0.001117, "loss_rpn_cls_fpn6": 0.000016, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503602}
json_stats: {"accuracy_cls": 0.896484, "eta": "12:08:16", "iter": 3240, "loss": 0.639332, "loss_bbox": 0.183432, "loss_cls": 0.229463, "loss_mask": 0.151857, "loss_rpn_bbox_fpn2": 0.000304, "loss_rpn_bbox_fpn3": 0.003027, "loss_rpn_bbox_fpn4": 0.011178, "loss_rpn_bbox_fpn5": 0.008440, "loss_rpn_bbox_fpn6": 0.000094, "loss_rpn_cls_fpn2": 0.000676, "loss_rpn_cls_fpn3": 0.002183, "loss_rpn_cls_fpn4": 0.004570, "loss_rpn_cls_fpn5": 0.002738, "loss_rpn_cls_fpn6": 0.001221, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503648}
json_stats: {"accuracy_cls": 0.884368, "eta": "12:08:15", "iter": 3260, "loss": 0.691039, "loss_bbox": 0.186644, "loss_cls": 0.282182, "loss_mask": 0.170518, "loss_rpn_bbox_fpn2": 0.000754, "loss_rpn_bbox_fpn3": 0.005187, "loss_rpn_bbox_fpn4": 0.008076, "loss_rpn_bbox_fpn5": 0.011989, "loss_rpn_bbox_fpn6": 0.000651, "loss_rpn_cls_fpn2": 0.001918, "loss_rpn_cls_fpn3": 0.001736, "loss_rpn_cls_fpn4": 0.007061, "loss_rpn_cls_fpn5": 0.002905, "loss_rpn_cls_fpn6": 0.000174, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503754}
json_stats: {"accuracy_cls": 0.888891, "eta": "12:08:02", "iter": 3280, "loss": 0.683556, "loss_bbox": 0.183509, "loss_cls": 0.250769, "loss_mask": 0.180035, "loss_rpn_bbox_fpn2": 0.000427, "loss_rpn_bbox_fpn3": 0.003355, "loss_rpn_bbox_fpn4": 0.006587, "loss_rpn_bbox_fpn5": 0.007809, "loss_rpn_bbox_fpn6": 0.001556, "loss_rpn_cls_fpn2": 0.000622, "loss_rpn_cls_fpn3": 0.007051, "loss_rpn_cls_fpn4": 0.003140, "loss_rpn_cls_fpn5": 0.003999, "loss_rpn_cls_fpn6": 0.000816, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503717}
json_stats: {"accuracy_cls": 0.884277, "eta": "12:08:04", "iter": 3300, "loss": 0.626619, "loss_bbox": 0.174853, "loss_cls": 0.264994, "loss_mask": 0.156405, "loss_rpn_bbox_fpn2": 0.001494, "loss_rpn_bbox_fpn3": 0.004637, "loss_rpn_bbox_fpn4": 0.010567, "loss_rpn_bbox_fpn5": 0.010889, "loss_rpn_bbox_fpn6": 0.001632, "loss_rpn_cls_fpn2": 0.002290, "loss_rpn_cls_fpn3": 0.006561, "loss_rpn_cls_fpn4": 0.004177, "loss_rpn_cls_fpn5": 0.003604, "loss_rpn_cls_fpn6": 0.000658, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503857}
json_stats: {"accuracy_cls": 0.893020, "eta": "12:07:50", "iter": 3320, "loss": 0.594005, "loss_bbox": 0.177205, "loss_cls": 0.240687, "loss_mask": 0.135248, "loss_rpn_bbox_fpn2": 0.000229, "loss_rpn_bbox_fpn3": 0.003779, "loss_rpn_bbox_fpn4": 0.006470, "loss_rpn_bbox_fpn5": 0.004732, "loss_rpn_bbox_fpn6": 0.000510, "loss_rpn_cls_fpn2": 0.000760, "loss_rpn_cls_fpn3": 0.002895, "loss_rpn_cls_fpn4": 0.004585, "loss_rpn_cls_fpn5": 0.001120, "loss_rpn_cls_fpn6": 0.000809, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503815}
json_stats: {"accuracy_cls": 0.894063, "eta": "12:07:40", "iter": 3340, "loss": 0.603904, "loss_bbox": 0.165248, "loss_cls": 0.246481, "loss_mask": 0.157948, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003438, "loss_rpn_bbox_fpn4": 0.006204, "loss_rpn_bbox_fpn5": 0.005487, "loss_rpn_bbox_fpn6": 0.000466, "loss_rpn_cls_fpn2": 0.000318, "loss_rpn_cls_fpn3": 0.003928, "loss_rpn_cls_fpn4": 0.003209, "loss_rpn_cls_fpn5": 0.002068, "loss_rpn_cls_fpn6": 0.000148, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503812}
json_stats: {"accuracy_cls": 0.889987, "eta": "12:07:32", "iter": 3360, "loss": 0.675443, "loss_bbox": 0.197389, "loss_cls": 0.264500, "loss_mask": 0.170758, "loss_rpn_bbox_fpn2": 0.000536, "loss_rpn_bbox_fpn3": 0.002939, "loss_rpn_bbox_fpn4": 0.008829, "loss_rpn_bbox_fpn5": 0.008884, "loss_rpn_bbox_fpn6": 0.001834, "loss_rpn_cls_fpn2": 0.000900, "loss_rpn_cls_fpn3": 0.002439, "loss_rpn_cls_fpn4": 0.005055, "loss_rpn_cls_fpn5": 0.001784, "loss_rpn_cls_fpn6": 0.000291, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503832}
json_stats: {"accuracy_cls": 0.900384, "eta": "12:07:23", "iter": 3380, "loss": 0.592221, "loss_bbox": 0.171242, "loss_cls": 0.209069, "loss_mask": 0.152310, "loss_rpn_bbox_fpn2": 0.000718, "loss_rpn_bbox_fpn3": 0.003250, "loss_rpn_bbox_fpn4": 0.009225, "loss_rpn_bbox_fpn5": 0.004751, "loss_rpn_bbox_fpn6": 0.001023, "loss_rpn_cls_fpn2": 0.000751, "loss_rpn_cls_fpn3": 0.002105, "loss_rpn_cls_fpn4": 0.002646, "loss_rpn_cls_fpn5": 0.004618, "loss_rpn_cls_fpn6": 0.000862, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503849}
json_stats: {"accuracy_cls": 0.897461, "eta": "12:07:09", "iter": 3400, "loss": 0.660030, "loss_bbox": 0.162383, "loss_cls": 0.252872, "loss_mask": 0.152605, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005007, "loss_rpn_bbox_fpn4": 0.011542, "loss_rpn_bbox_fpn5": 0.007456, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001411, "loss_rpn_cls_fpn3": 0.005038, "loss_rpn_cls_fpn4": 0.004001, "loss_rpn_cls_fpn5": 0.003245, "loss_rpn_cls_fpn6": 0.000077, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503803}
json_stats: {"accuracy_cls": 0.881348, "eta": "12:06:57", "iter": 3420, "loss": 0.724238, "loss_bbox": 0.206193, "loss_cls": 0.253338, "loss_mask": 0.160495, "loss_rpn_bbox_fpn2": 0.000371, "loss_rpn_bbox_fpn3": 0.004890, "loss_rpn_bbox_fpn4": 0.006849, "loss_rpn_bbox_fpn5": 0.008218, "loss_rpn_bbox_fpn6": 0.002141, "loss_rpn_cls_fpn2": 0.000861, "loss_rpn_cls_fpn3": 0.006743, "loss_rpn_cls_fpn4": 0.004975, "loss_rpn_cls_fpn5": 0.004466, "loss_rpn_cls_fpn6": 0.000722, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503779}
json_stats: {"accuracy_cls": 0.890085, "eta": "12:06:39", "iter": 3440, "loss": 0.601400, "loss_bbox": 0.170593, "loss_cls": 0.234070, "loss_mask": 0.144399, "loss_rpn_bbox_fpn2": 0.000252, "loss_rpn_bbox_fpn3": 0.002779, "loss_rpn_bbox_fpn4": 0.007491, "loss_rpn_bbox_fpn5": 0.006346, "loss_rpn_bbox_fpn6": 0.001682, "loss_rpn_cls_fpn2": 0.001296, "loss_rpn_cls_fpn3": 0.002724, "loss_rpn_cls_fpn4": 0.004177, "loss_rpn_cls_fpn5": 0.001626, "loss_rpn_cls_fpn6": 0.000534, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503691}
json_stats: {"accuracy_cls": 0.891876, "eta": "12:06:28", "iter": 3460, "loss": 0.650069, "loss_bbox": 0.180235, "loss_cls": 0.257681, "loss_mask": 0.155832, "loss_rpn_bbox_fpn2": 0.000709, "loss_rpn_bbox_fpn3": 0.002977, "loss_rpn_bbox_fpn4": 0.008044, "loss_rpn_bbox_fpn5": 0.008745, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000976, "loss_rpn_cls_fpn3": 0.002211, "loss_rpn_cls_fpn4": 0.002802, "loss_rpn_cls_fpn5": 0.003169, "loss_rpn_cls_fpn6": 0.000233, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503683}
json_stats: {"accuracy_cls": 0.875282, "eta": "12:06:23", "iter": 3480, "loss": 0.678923, "loss_bbox": 0.183500, "loss_cls": 0.284585, "loss_mask": 0.162516, "loss_rpn_bbox_fpn2": 0.001207, "loss_rpn_bbox_fpn3": 0.004872, "loss_rpn_bbox_fpn4": 0.012441, "loss_rpn_bbox_fpn5": 0.007530, "loss_rpn_bbox_fpn6": 0.001882, "loss_rpn_cls_fpn2": 0.001956, "loss_rpn_cls_fpn3": 0.002835, "loss_rpn_cls_fpn4": 0.005138, "loss_rpn_cls_fpn5": 0.002772, "loss_rpn_cls_fpn6": 0.000789, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503741}
json_stats: {"accuracy_cls": 0.892578, "eta": "12:06:18", "iter": 3500, "loss": 0.623009, "loss_bbox": 0.175804, "loss_cls": 0.247657, "loss_mask": 0.150886, "loss_rpn_bbox_fpn2": 0.000175, "loss_rpn_bbox_fpn3": 0.002552, "loss_rpn_bbox_fpn4": 0.007144, "loss_rpn_bbox_fpn5": 0.002790, "loss_rpn_bbox_fpn6": 0.000497, "loss_rpn_cls_fpn2": 0.000725, "loss_rpn_cls_fpn3": 0.003274, "loss_rpn_cls_fpn4": 0.004015, "loss_rpn_cls_fpn5": 0.000887, "loss_rpn_cls_fpn6": 0.000186, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503793}
json_stats: {"accuracy_cls": 0.873956, "eta": "12:06:12", "iter": 3520, "loss": 0.654620, "loss_bbox": 0.179808, "loss_cls": 0.269865, "loss_mask": 0.182158, "loss_rpn_bbox_fpn2": 0.000043, "loss_rpn_bbox_fpn3": 0.004129, "loss_rpn_bbox_fpn4": 0.012028, "loss_rpn_bbox_fpn5": 0.009005, "loss_rpn_bbox_fpn6": 0.002828, "loss_rpn_cls_fpn2": 0.000662, "loss_rpn_cls_fpn3": 0.005588, "loss_rpn_cls_fpn4": 0.002158, "loss_rpn_cls_fpn5": 0.003061, "loss_rpn_cls_fpn6": 0.000305, "lr": 0.010000, "mb_qsize": 64, "mem": 7640, "time": 0.503842}
json_stats: {"accuracy_cls": 0.867131, "eta": "12:06:05", "iter": 3540, "loss": 0.771410, "loss_bbox": 0.201428, "loss_cls": 0.303982, "loss_mask": 0.167317, "loss_rpn_bbox_fpn2": 0.000568, "loss_rpn_bbox_fpn3": 0.004633, "loss_rpn_bbox_fpn4": 0.010427, "loss_rpn_bbox_fpn5": 0.005395, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000578, "loss_rpn_cls_fpn3": 0.004167, "loss_rpn_cls_fpn4": 0.002959, "loss_rpn_cls_fpn5": 0.001621, "loss_rpn_cls_fpn6": 0.000226, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503877}
json_stats: {"accuracy_cls": 0.888802, "eta": "12:05:52", "iter": 3560, "loss": 0.642882, "loss_bbox": 0.181823, "loss_cls": 0.241769, "loss_mask": 0.168692, "loss_rpn_bbox_fpn2": 0.000155, "loss_rpn_bbox_fpn3": 0.004995, "loss_rpn_bbox_fpn4": 0.006404, "loss_rpn_bbox_fpn5": 0.008332, "loss_rpn_bbox_fpn6": 0.000260, "loss_rpn_cls_fpn2": 0.000623, "loss_rpn_cls_fpn3": 0.004451, "loss_rpn_cls_fpn4": 0.002363, "loss_rpn_cls_fpn5": 0.002128, "loss_rpn_cls_fpn6": 0.000130, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503846}
json_stats: {"accuracy_cls": 0.892742, "eta": "12:05:33", "iter": 3580, "loss": 0.652294, "loss_bbox": 0.172522, "loss_cls": 0.249702, "loss_mask": 0.161569, "loss_rpn_bbox_fpn2": 0.000171, "loss_rpn_bbox_fpn3": 0.005999, "loss_rpn_bbox_fpn4": 0.008703, "loss_rpn_bbox_fpn5": 0.005724, "loss_rpn_bbox_fpn6": 0.002018, "loss_rpn_cls_fpn2": 0.000775, "loss_rpn_cls_fpn3": 0.003907, "loss_rpn_cls_fpn4": 0.003118, "loss_rpn_cls_fpn5": 0.001017, "loss_rpn_cls_fpn6": 0.000380, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503745}
json_stats: {"accuracy_cls": 0.879262, "eta": "12:05:20", "iter": 3600, "loss": 0.666668, "loss_bbox": 0.194221, "loss_cls": 0.264303, "loss_mask": 0.161751, "loss_rpn_bbox_fpn2": 0.000596, "loss_rpn_bbox_fpn3": 0.002915, "loss_rpn_bbox_fpn4": 0.008129, "loss_rpn_bbox_fpn5": 0.010587, "loss_rpn_bbox_fpn6": 0.001853, "loss_rpn_cls_fpn2": 0.001476, "loss_rpn_cls_fpn3": 0.003978, "loss_rpn_cls_fpn4": 0.006419, "loss_rpn_cls_fpn5": 0.001716, "loss_rpn_cls_fpn6": 0.000174, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503707}
json_stats: {"accuracy_cls": 0.883301, "eta": "12:05:01", "iter": 3620, "loss": 0.693528, "loss_bbox": 0.198950, "loss_cls": 0.261233, "loss_mask": 0.174533, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004087, "loss_rpn_bbox_fpn4": 0.007309, "loss_rpn_bbox_fpn5": 0.004264, "loss_rpn_bbox_fpn6": 0.000070, "loss_rpn_cls_fpn2": 0.002096, "loss_rpn_cls_fpn3": 0.003912, "loss_rpn_cls_fpn4": 0.004267, "loss_rpn_cls_fpn5": 0.001719, "loss_rpn_cls_fpn6": 0.000125, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503609}
json_stats: {"accuracy_cls": 0.902298, "eta": "12:04:53", "iter": 3640, "loss": 0.619601, "loss_bbox": 0.170410, "loss_cls": 0.223658, "loss_mask": 0.166148, "loss_rpn_bbox_fpn2": 0.000489, "loss_rpn_bbox_fpn3": 0.003792, "loss_rpn_bbox_fpn4": 0.007831, "loss_rpn_bbox_fpn5": 0.010087, "loss_rpn_bbox_fpn6": 0.001484, "loss_rpn_cls_fpn2": 0.000415, "loss_rpn_cls_fpn3": 0.002999, "loss_rpn_cls_fpn4": 0.004252, "loss_rpn_cls_fpn5": 0.004222, "loss_rpn_cls_fpn6": 0.000808, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503635}
json_stats: {"accuracy_cls": 0.876917, "eta": "12:04:51", "iter": 3660, "loss": 0.644646, "loss_bbox": 0.173923, "loss_cls": 0.268727, "loss_mask": 0.160756, "loss_rpn_bbox_fpn2": 0.001280, "loss_rpn_bbox_fpn3": 0.003818, "loss_rpn_bbox_fpn4": 0.009141, "loss_rpn_bbox_fpn5": 0.009077, "loss_rpn_bbox_fpn6": 0.000320, "loss_rpn_cls_fpn2": 0.001288, "loss_rpn_cls_fpn3": 0.005466, "loss_rpn_cls_fpn4": 0.002864, "loss_rpn_cls_fpn5": 0.001661, "loss_rpn_cls_fpn6": 0.000210, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503724}
json_stats: {"accuracy_cls": 0.864933, "eta": "12:04:50", "iter": 3680, "loss": 0.693373, "loss_bbox": 0.188246, "loss_cls": 0.311155, "loss_mask": 0.164208, "loss_rpn_bbox_fpn2": 0.000406, "loss_rpn_bbox_fpn3": 0.007093, "loss_rpn_bbox_fpn4": 0.014050, "loss_rpn_bbox_fpn5": 0.007931, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001429, "loss_rpn_cls_fpn3": 0.005242, "loss_rpn_cls_fpn4": 0.007767, "loss_rpn_cls_fpn5": 0.003707, "loss_rpn_cls_fpn6": 0.000049, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503827}
json_stats: {"accuracy_cls": 0.907362, "eta": "12:04:31", "iter": 3700, "loss": 0.548861, "loss_bbox": 0.170476, "loss_cls": 0.212146, "loss_mask": 0.140731, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002600, "loss_rpn_bbox_fpn4": 0.007695, "loss_rpn_bbox_fpn5": 0.004422, "loss_rpn_bbox_fpn6": 0.001476, "loss_rpn_cls_fpn2": 0.000659, "loss_rpn_cls_fpn3": 0.002362, "loss_rpn_cls_fpn4": 0.002761, "loss_rpn_cls_fpn5": 0.001316, "loss_rpn_cls_fpn6": 0.000230, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503728}
json_stats: {"accuracy_cls": 0.893066, "eta": "12:04:24", "iter": 3720, "loss": 0.711512, "loss_bbox": 0.198401, "loss_cls": 0.262940, "loss_mask": 0.175460, "loss_rpn_bbox_fpn2": 0.000592, "loss_rpn_bbox_fpn3": 0.003314, "loss_rpn_bbox_fpn4": 0.007492, "loss_rpn_bbox_fpn5": 0.007824, "loss_rpn_bbox_fpn6": 0.000378, "loss_rpn_cls_fpn2": 0.001228, "loss_rpn_cls_fpn3": 0.005808, "loss_rpn_cls_fpn4": 0.005152, "loss_rpn_cls_fpn5": 0.002090, "loss_rpn_cls_fpn6": 0.000110, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503757}
json_stats: {"accuracy_cls": 0.878447, "eta": "12:04:12", "iter": 3740, "loss": 0.691881, "loss_bbox": 0.194650, "loss_cls": 0.260568, "loss_mask": 0.165213, "loss_rpn_bbox_fpn2": 0.001015, "loss_rpn_bbox_fpn3": 0.005160, "loss_rpn_bbox_fpn4": 0.010033, "loss_rpn_bbox_fpn5": 0.012690, "loss_rpn_bbox_fpn6": 0.001160, "loss_rpn_cls_fpn2": 0.001923, "loss_rpn_cls_fpn3": 0.004403, "loss_rpn_cls_fpn4": 0.003343, "loss_rpn_cls_fpn5": 0.002880, "loss_rpn_cls_fpn6": 0.000359, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503736}
json_stats: {"accuracy_cls": 0.899902, "eta": "12:04:00", "iter": 3760, "loss": 0.596206, "loss_bbox": 0.172154, "loss_cls": 0.231288, "loss_mask": 0.145152, "loss_rpn_bbox_fpn2": 0.000117, "loss_rpn_bbox_fpn3": 0.002890, "loss_rpn_bbox_fpn4": 0.006877, "loss_rpn_bbox_fpn5": 0.007178, "loss_rpn_bbox_fpn6": 0.001244, "loss_rpn_cls_fpn2": 0.000309, "loss_rpn_cls_fpn3": 0.003127, "loss_rpn_cls_fpn4": 0.001658, "loss_rpn_cls_fpn5": 0.001640, "loss_rpn_cls_fpn6": 0.000156, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503715}
json_stats: {"accuracy_cls": 0.866261, "eta": "12:03:49", "iter": 3780, "loss": 0.696159, "loss_bbox": 0.197905, "loss_cls": 0.282616, "loss_mask": 0.199115, "loss_rpn_bbox_fpn2": 0.000081, "loss_rpn_bbox_fpn3": 0.001962, "loss_rpn_bbox_fpn4": 0.008864, "loss_rpn_bbox_fpn5": 0.009502, "loss_rpn_bbox_fpn6": 0.003733, "loss_rpn_cls_fpn2": 0.001301, "loss_rpn_cls_fpn3": 0.002290, "loss_rpn_cls_fpn4": 0.003844, "loss_rpn_cls_fpn5": 0.001983, "loss_rpn_cls_fpn6": 0.000378, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503710}
json_stats: {"accuracy_cls": 0.872344, "eta": "12:03:49", "iter": 3800, "loss": 0.667989, "loss_bbox": 0.185923, "loss_cls": 0.274567, "loss_mask": 0.160034, "loss_rpn_bbox_fpn2": 0.000749, "loss_rpn_bbox_fpn3": 0.003220, "loss_rpn_bbox_fpn4": 0.011098, "loss_rpn_bbox_fpn5": 0.008239, "loss_rpn_bbox_fpn6": 0.000977, "loss_rpn_cls_fpn2": 0.000823, "loss_rpn_cls_fpn3": 0.003837, "loss_rpn_cls_fpn4": 0.003291, "loss_rpn_cls_fpn5": 0.001686, "loss_rpn_cls_fpn6": 0.000273, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503826}
json_stats: {"accuracy_cls": 0.875139, "eta": "12:03:42", "iter": 3820, "loss": 0.684585, "loss_bbox": 0.181889, "loss_cls": 0.276997, "loss_mask": 0.164931, "loss_rpn_bbox_fpn2": 0.000608, "loss_rpn_bbox_fpn3": 0.005043, "loss_rpn_bbox_fpn4": 0.015879, "loss_rpn_bbox_fpn5": 0.009136, "loss_rpn_bbox_fpn6": 0.001519, "loss_rpn_cls_fpn2": 0.001393, "loss_rpn_cls_fpn3": 0.004705, "loss_rpn_cls_fpn4": 0.005117, "loss_rpn_cls_fpn5": 0.002609, "loss_rpn_cls_fpn6": 0.000365, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503858}
json_stats: {"accuracy_cls": 0.892267, "eta": "12:03:28", "iter": 3840, "loss": 0.585507, "loss_bbox": 0.166607, "loss_cls": 0.248770, "loss_mask": 0.128108, "loss_rpn_bbox_fpn2": 0.000343, "loss_rpn_bbox_fpn3": 0.004317, "loss_rpn_bbox_fpn4": 0.011191, "loss_rpn_bbox_fpn5": 0.007064, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000221, "loss_rpn_cls_fpn3": 0.003589, "loss_rpn_cls_fpn4": 0.001714, "loss_rpn_cls_fpn5": 0.001442, "loss_rpn_cls_fpn6": 0.000022, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503817}
json_stats: {"accuracy_cls": 0.890466, "eta": "12:03:11", "iter": 3860, "loss": 0.560760, "loss_bbox": 0.154476, "loss_cls": 0.245316, "loss_mask": 0.145180, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004186, "loss_rpn_bbox_fpn4": 0.008302, "loss_rpn_bbox_fpn5": 0.005358, "loss_rpn_bbox_fpn6": 0.000302, "loss_rpn_cls_fpn2": 0.000410, "loss_rpn_cls_fpn3": 0.003117, "loss_rpn_cls_fpn4": 0.001687, "loss_rpn_cls_fpn5": 0.001329, "loss_rpn_cls_fpn6": 0.000369, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503737}
json_stats: {"accuracy_cls": 0.877930, "eta": "12:03:00", "iter": 3880, "loss": 0.664674, "loss_bbox": 0.183414, "loss_cls": 0.250847, "loss_mask": 0.159307, "loss_rpn_bbox_fpn2": 0.000508, "loss_rpn_bbox_fpn3": 0.003226, "loss_rpn_bbox_fpn4": 0.005755, "loss_rpn_bbox_fpn5": 0.002962, "loss_rpn_bbox_fpn6": 0.000670, "loss_rpn_cls_fpn2": 0.000964, "loss_rpn_cls_fpn3": 0.003108, "loss_rpn_cls_fpn4": 0.002402, "loss_rpn_cls_fpn5": 0.002279, "loss_rpn_cls_fpn6": 0.000122, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503721}
json_stats: {"accuracy_cls": 0.875281, "eta": "12:02:53", "iter": 3900, "loss": 0.678283, "loss_bbox": 0.172416, "loss_cls": 0.271806, "loss_mask": 0.176766, "loss_rpn_bbox_fpn2": 0.000463, "loss_rpn_bbox_fpn3": 0.003217, "loss_rpn_bbox_fpn4": 0.008231, "loss_rpn_bbox_fpn5": 0.009778, "loss_rpn_bbox_fpn6": 0.002063, "loss_rpn_cls_fpn2": 0.000844, "loss_rpn_cls_fpn3": 0.004328, "loss_rpn_cls_fpn4": 0.001823, "loss_rpn_cls_fpn5": 0.001294, "loss_rpn_cls_fpn6": 0.000505, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503762}
json_stats: {"accuracy_cls": 0.892090, "eta": "12:02:41", "iter": 3920, "loss": 0.657788, "loss_bbox": 0.167951, "loss_cls": 0.241959, "loss_mask": 0.149401, "loss_rpn_bbox_fpn2": 0.000071, "loss_rpn_bbox_fpn3": 0.004923, "loss_rpn_bbox_fpn4": 0.009289, "loss_rpn_bbox_fpn5": 0.006024, "loss_rpn_bbox_fpn6": 0.000582, "loss_rpn_cls_fpn2": 0.001142, "loss_rpn_cls_fpn3": 0.004845, "loss_rpn_cls_fpn4": 0.003621, "loss_rpn_cls_fpn5": 0.002204, "loss_rpn_cls_fpn6": 0.000080, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503736}
json_stats: {"accuracy_cls": 0.882746, "eta": "12:02:33", "iter": 3940, "loss": 0.673414, "loss_bbox": 0.179659, "loss_cls": 0.268798, "loss_mask": 0.142350, "loss_rpn_bbox_fpn2": 0.000363, "loss_rpn_bbox_fpn3": 0.005009, "loss_rpn_bbox_fpn4": 0.006618, "loss_rpn_bbox_fpn5": 0.011446, "loss_rpn_bbox_fpn6": 0.000019, "loss_rpn_cls_fpn2": 0.000602, "loss_rpn_cls_fpn3": 0.005185, "loss_rpn_cls_fpn4": 0.004305, "loss_rpn_cls_fpn5": 0.002742, "loss_rpn_cls_fpn6": 0.000586, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503761}
json_stats: {"accuracy_cls": 0.878118, "eta": "12:02:30", "iter": 3960, "loss": 0.695844, "loss_bbox": 0.193347, "loss_cls": 0.262341, "loss_mask": 0.161657, "loss_rpn_bbox_fpn2": 0.001107, "loss_rpn_bbox_fpn3": 0.005937, "loss_rpn_bbox_fpn4": 0.011744, "loss_rpn_bbox_fpn5": 0.006286, "loss_rpn_bbox_fpn6": 0.000396, "loss_rpn_cls_fpn2": 0.000678, "loss_rpn_cls_fpn3": 0.004027, "loss_rpn_cls_fpn4": 0.003718, "loss_rpn_cls_fpn5": 0.001286, "loss_rpn_cls_fpn6": 0.000036, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503838}
json_stats: {"accuracy_cls": 0.883275, "eta": "12:02:16", "iter": 3980, "loss": 0.620426, "loss_bbox": 0.173400, "loss_cls": 0.258008, "loss_mask": 0.166176, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003496, "loss_rpn_bbox_fpn4": 0.008748, "loss_rpn_bbox_fpn5": 0.004236, "loss_rpn_bbox_fpn6": 0.000431, "loss_rpn_cls_fpn2": 0.001580, "loss_rpn_cls_fpn3": 0.002458, "loss_rpn_cls_fpn4": 0.002707, "loss_rpn_cls_fpn5": 0.002074, "loss_rpn_cls_fpn6": 0.000143, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503797}
json_stats: {"accuracy_cls": 0.893555, "eta": "12:02:05", "iter": 4000, "loss": 0.594673, "loss_bbox": 0.183351, "loss_cls": 0.228521, "loss_mask": 0.159256, "loss_rpn_bbox_fpn2": 0.000039, "loss_rpn_bbox_fpn3": 0.003031, "loss_rpn_bbox_fpn4": 0.009358, "loss_rpn_bbox_fpn5": 0.004998, "loss_rpn_bbox_fpn6": 0.001909, "loss_rpn_cls_fpn2": 0.000569, "loss_rpn_cls_fpn3": 0.005145, "loss_rpn_cls_fpn4": 0.004219, "loss_rpn_cls_fpn5": 0.001736, "loss_rpn_cls_fpn6": 0.000475, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503788}
json_stats: {"accuracy_cls": 0.893066, "eta": "12:01:47", "iter": 4020, "loss": 0.600872, "loss_bbox": 0.163623, "loss_cls": 0.232066, "loss_mask": 0.169899, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003180, "loss_rpn_bbox_fpn4": 0.009855, "loss_rpn_bbox_fpn5": 0.004984, "loss_rpn_bbox_fpn6": 0.000516, "loss_rpn_cls_fpn2": 0.000332, "loss_rpn_cls_fpn3": 0.002643, "loss_rpn_cls_fpn4": 0.003708, "loss_rpn_cls_fpn5": 0.001834, "loss_rpn_cls_fpn6": 0.000065, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503697}
json_stats: {"accuracy_cls": 0.886230, "eta": "12:01:43", "iter": 4040, "loss": 0.594927, "loss_bbox": 0.158259, "loss_cls": 0.251702, "loss_mask": 0.133898, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002598, "loss_rpn_bbox_fpn4": 0.007746, "loss_rpn_bbox_fpn5": 0.007521, "loss_rpn_bbox_fpn6": 0.000797, "loss_rpn_cls_fpn2": 0.000459, "loss_rpn_cls_fpn3": 0.001546, "loss_rpn_cls_fpn4": 0.003239, "loss_rpn_cls_fpn5": 0.002022, "loss_rpn_cls_fpn6": 0.000210, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503766}
json_stats: {"accuracy_cls": 0.890625, "eta": "12:01:29", "iter": 4060, "loss": 0.641875, "loss_bbox": 0.184336, "loss_cls": 0.245986, "loss_mask": 0.157368, "loss_rpn_bbox_fpn2": 0.000597, "loss_rpn_bbox_fpn3": 0.002388, "loss_rpn_bbox_fpn4": 0.006701, "loss_rpn_bbox_fpn5": 0.004195, "loss_rpn_bbox_fpn6": 0.002153, "loss_rpn_cls_fpn2": 0.000770, "loss_rpn_cls_fpn3": 0.002532, "loss_rpn_cls_fpn4": 0.002815, "loss_rpn_cls_fpn5": 0.001987, "loss_rpn_cls_fpn6": 0.001150, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503715}
json_stats: {"accuracy_cls": 0.875000, "eta": "12:01:20", "iter": 4080, "loss": 0.665351, "loss_bbox": 0.174965, "loss_cls": 0.263783, "loss_mask": 0.157231, "loss_rpn_bbox_fpn2": 0.000447, "loss_rpn_bbox_fpn3": 0.003514, "loss_rpn_bbox_fpn4": 0.009809, "loss_rpn_bbox_fpn5": 0.011442, "loss_rpn_bbox_fpn6": 0.000238, "loss_rpn_cls_fpn2": 0.001921, "loss_rpn_cls_fpn3": 0.003430, "loss_rpn_cls_fpn4": 0.003640, "loss_rpn_cls_fpn5": 0.002174, "loss_rpn_cls_fpn6": 0.000454, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503732}
json_stats: {"accuracy_cls": 0.874023, "eta": "12:01:21", "iter": 4100, "loss": 0.675132, "loss_bbox": 0.178332, "loss_cls": 0.266446, "loss_mask": 0.157615, "loss_rpn_bbox_fpn2": 0.001544, "loss_rpn_bbox_fpn3": 0.003486, "loss_rpn_bbox_fpn4": 0.009877, "loss_rpn_bbox_fpn5": 0.009701, "loss_rpn_bbox_fpn6": 0.002578, "loss_rpn_cls_fpn2": 0.001205, "loss_rpn_cls_fpn3": 0.001757, "loss_rpn_cls_fpn4": 0.003842, "loss_rpn_cls_fpn5": 0.002132, "loss_rpn_cls_fpn6": 0.000564, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503857}
json_stats: {"accuracy_cls": 0.890203, "eta": "12:01:05", "iter": 4120, "loss": 0.657567, "loss_bbox": 0.192433, "loss_cls": 0.251341, "loss_mask": 0.167640, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.003556, "loss_rpn_bbox_fpn4": 0.006937, "loss_rpn_bbox_fpn5": 0.003962, "loss_rpn_bbox_fpn6": 0.001547, "loss_rpn_cls_fpn2": 0.000936, "loss_rpn_cls_fpn3": 0.002590, "loss_rpn_cls_fpn4": 0.002910, "loss_rpn_cls_fpn5": 0.002654, "loss_rpn_cls_fpn6": 0.000421, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503791}
json_stats: {"accuracy_cls": 0.880371, "eta": "12:00:57", "iter": 4140, "loss": 0.706508, "loss_bbox": 0.193322, "loss_cls": 0.274277, "loss_mask": 0.164569, "loss_rpn_bbox_fpn2": 0.000748, "loss_rpn_bbox_fpn3": 0.002445, "loss_rpn_bbox_fpn4": 0.008253, "loss_rpn_bbox_fpn5": 0.005268, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000873, "loss_rpn_cls_fpn3": 0.001865, "loss_rpn_cls_fpn4": 0.002180, "loss_rpn_cls_fpn5": 0.002290, "loss_rpn_cls_fpn6": 0.000047, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503815}
json_stats: {"accuracy_cls": 0.876096, "eta": "12:00:51", "iter": 4160, "loss": 0.680416, "loss_bbox": 0.194692, "loss_cls": 0.270716, "loss_mask": 0.156771, "loss_rpn_bbox_fpn2": 0.002156, "loss_rpn_bbox_fpn3": 0.006211, "loss_rpn_bbox_fpn4": 0.010323, "loss_rpn_bbox_fpn5": 0.010114, "loss_rpn_bbox_fpn6": 0.000655, "loss_rpn_cls_fpn2": 0.002738, "loss_rpn_cls_fpn3": 0.004847, "loss_rpn_cls_fpn4": 0.006333, "loss_rpn_cls_fpn5": 0.002247, "loss_rpn_cls_fpn6": 0.000308, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503858}
json_stats: {"accuracy_cls": 0.891602, "eta": "12:00:40", "iter": 4180, "loss": 0.621019, "loss_bbox": 0.163642, "loss_cls": 0.253710, "loss_mask": 0.136122, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.002705, "loss_rpn_bbox_fpn4": 0.009486, "loss_rpn_bbox_fpn5": 0.004517, "loss_rpn_bbox_fpn6": 0.002299, "loss_rpn_cls_fpn2": 0.000287, "loss_rpn_cls_fpn3": 0.003177, "loss_rpn_cls_fpn4": 0.002845, "loss_rpn_cls_fpn5": 0.001189, "loss_rpn_cls_fpn6": 0.000727, "lr": 0.010000, "mb_qsize": 64, "mem": 7641, "time": 0.503852}
json_stats: {"accuracy_cls": 0.868331, "eta": "12:00:23", "iter": 4200, "loss": 0.705019, "loss_bbox": 0.200911, "loss_cls": 0.278646, "loss_mask": 0.163260, "loss_rpn_bbox_fpn2": 0.000556, "loss_rpn_bbox_fpn3": 0.005304, "loss_rpn_bbox_fpn4": 0.011367, "loss_rpn_bbox_fpn5": 0.003833, "loss_rpn_bbox_fpn6": 0.000473, "loss_rpn_cls_fpn2": 0.000850, "loss_rpn_cls_fpn3": 0.005328, "loss_rpn_cls_fpn4": 0.004370, "loss_rpn_cls_fpn5": 0.002033, "loss_rpn_cls_fpn6": 0.000237, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503775}
json_stats: {"accuracy_cls": 0.902641, "eta": "12:00:13", "iter": 4220, "loss": 0.614438, "loss_bbox": 0.160066, "loss_cls": 0.228749, "loss_mask": 0.176985, "loss_rpn_bbox_fpn2": 0.000747, "loss_rpn_bbox_fpn3": 0.003465, "loss_rpn_bbox_fpn4": 0.006972, "loss_rpn_bbox_fpn5": 0.006086, "loss_rpn_bbox_fpn6": 0.002580, "loss_rpn_cls_fpn2": 0.000645, "loss_rpn_cls_fpn3": 0.004040, "loss_rpn_cls_fpn4": 0.003862, "loss_rpn_cls_fpn5": 0.003919, "loss_rpn_cls_fpn6": 0.000778, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503775}
json_stats: {"accuracy_cls": 0.871392, "eta": "12:00:04", "iter": 4240, "loss": 0.739913, "loss_bbox": 0.206237, "loss_cls": 0.277201, "loss_mask": 0.181403, "loss_rpn_bbox_fpn2": 0.000137, "loss_rpn_bbox_fpn3": 0.005267, "loss_rpn_bbox_fpn4": 0.008973, "loss_rpn_bbox_fpn5": 0.008172, "loss_rpn_bbox_fpn6": 0.002556, "loss_rpn_cls_fpn2": 0.000994, "loss_rpn_cls_fpn3": 0.005068, "loss_rpn_cls_fpn4": 0.002229, "loss_rpn_cls_fpn5": 0.003272, "loss_rpn_cls_fpn6": 0.000334, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503787}
json_stats: {"accuracy_cls": 0.886195, "eta": "11:59:54", "iter": 4260, "loss": 0.648427, "loss_bbox": 0.188185, "loss_cls": 0.247061, "loss_mask": 0.151458, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.005034, "loss_rpn_bbox_fpn4": 0.007911, "loss_rpn_bbox_fpn5": 0.006035, "loss_rpn_bbox_fpn6": 0.000143, "loss_rpn_cls_fpn2": 0.000222, "loss_rpn_cls_fpn3": 0.005112, "loss_rpn_cls_fpn4": 0.002373, "loss_rpn_cls_fpn5": 0.001445, "loss_rpn_cls_fpn6": 0.000039, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503783}
json_stats: {"accuracy_cls": 0.887982, "eta": "11:59:43", "iter": 4280, "loss": 0.617162, "loss_bbox": 0.176798, "loss_cls": 0.246315, "loss_mask": 0.150645, "loss_rpn_bbox_fpn2": 0.000470, "loss_rpn_bbox_fpn3": 0.003258, "loss_rpn_bbox_fpn4": 0.008605, "loss_rpn_bbox_fpn5": 0.005663, "loss_rpn_bbox_fpn6": 0.001397, "loss_rpn_cls_fpn2": 0.001223, "loss_rpn_cls_fpn3": 0.003597, "loss_rpn_cls_fpn4": 0.001985, "loss_rpn_cls_fpn5": 0.002269, "loss_rpn_cls_fpn6": 0.000290, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503779}
json_stats: {"accuracy_cls": 0.884110, "eta": "11:59:37", "iter": 4300, "loss": 0.699482, "loss_bbox": 0.183264, "loss_cls": 0.295268, "loss_mask": 0.166539, "loss_rpn_bbox_fpn2": 0.001412, "loss_rpn_bbox_fpn3": 0.004124, "loss_rpn_bbox_fpn4": 0.015925, "loss_rpn_bbox_fpn5": 0.006152, "loss_rpn_bbox_fpn6": 0.000459, "loss_rpn_cls_fpn2": 0.001422, "loss_rpn_cls_fpn3": 0.005351, "loss_rpn_cls_fpn4": 0.004344, "loss_rpn_cls_fpn5": 0.002766, "loss_rpn_cls_fpn6": 0.000290, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503825}
json_stats: {"accuracy_cls": 0.908321, "eta": "11:59:18", "iter": 4320, "loss": 0.508983, "loss_bbox": 0.143725, "loss_cls": 0.203020, "loss_mask": 0.149440, "loss_rpn_bbox_fpn2": 0.000262, "loss_rpn_bbox_fpn3": 0.002865, "loss_rpn_bbox_fpn4": 0.005153, "loss_rpn_bbox_fpn5": 0.001564, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.001001, "loss_rpn_cls_fpn3": 0.002064, "loss_rpn_cls_fpn4": 0.002526, "loss_rpn_cls_fpn5": 0.000734, "loss_rpn_cls_fpn6": 0.000014, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503719}
json_stats: {"accuracy_cls": 0.880859, "eta": "11:59:12", "iter": 4340, "loss": 0.632940, "loss_bbox": 0.196091, "loss_cls": 0.251940, "loss_mask": 0.139127, "loss_rpn_bbox_fpn2": 0.000679, "loss_rpn_bbox_fpn3": 0.003890, "loss_rpn_bbox_fpn4": 0.009734, "loss_rpn_bbox_fpn5": 0.008874, "loss_rpn_bbox_fpn6": 0.000710, "loss_rpn_cls_fpn2": 0.000434, "loss_rpn_cls_fpn3": 0.003185, "loss_rpn_cls_fpn4": 0.002216, "loss_rpn_cls_fpn5": 0.002216, "loss_rpn_cls_fpn6": 0.000103, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503762}
json_stats: {"accuracy_cls": 0.896484, "eta": "11:59:04", "iter": 4360, "loss": 0.634873, "loss_bbox": 0.189999, "loss_cls": 0.243649, "loss_mask": 0.148594, "loss_rpn_bbox_fpn2": 0.000688, "loss_rpn_bbox_fpn3": 0.005814, "loss_rpn_bbox_fpn4": 0.007904, "loss_rpn_bbox_fpn5": 0.005489, "loss_rpn_bbox_fpn6": 0.001144, "loss_rpn_cls_fpn2": 0.000996, "loss_rpn_cls_fpn3": 0.002702, "loss_rpn_cls_fpn4": 0.002183, "loss_rpn_cls_fpn5": 0.001326, "loss_rpn_cls_fpn6": 0.000163, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503792}
json_stats: {"accuracy_cls": 0.888672, "eta": "11:58:57", "iter": 4380, "loss": 0.643274, "loss_bbox": 0.174283, "loss_cls": 0.251130, "loss_mask": 0.175536, "loss_rpn_bbox_fpn2": 0.000072, "loss_rpn_bbox_fpn3": 0.002914, "loss_rpn_bbox_fpn4": 0.011353, "loss_rpn_bbox_fpn5": 0.012048, "loss_rpn_bbox_fpn6": 0.002071, "loss_rpn_cls_fpn2": 0.000602, "loss_rpn_cls_fpn3": 0.002629, "loss_rpn_cls_fpn4": 0.002431, "loss_rpn_cls_fpn5": 0.001770, "loss_rpn_cls_fpn6": 0.000571, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503830}
json_stats: {"accuracy_cls": 0.908203, "eta": "11:58:42", "iter": 4400, "loss": 0.568930, "loss_bbox": 0.164338, "loss_cls": 0.207013, "loss_mask": 0.130584, "loss_rpn_bbox_fpn2": 0.000303, "loss_rpn_bbox_fpn3": 0.002687, "loss_rpn_bbox_fpn4": 0.004898, "loss_rpn_bbox_fpn5": 0.004054, "loss_rpn_bbox_fpn6": 0.003963, "loss_rpn_cls_fpn2": 0.000322, "loss_rpn_cls_fpn3": 0.002107, "loss_rpn_cls_fpn4": 0.001879, "loss_rpn_cls_fpn5": 0.002220, "loss_rpn_cls_fpn6": 0.001567, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503768}
json_stats: {"accuracy_cls": 0.902785, "eta": "11:58:27", "iter": 4420, "loss": 0.599369, "loss_bbox": 0.169665, "loss_cls": 0.203956, "loss_mask": 0.156628, "loss_rpn_bbox_fpn2": 0.000100, "loss_rpn_bbox_fpn3": 0.003377, "loss_rpn_bbox_fpn4": 0.009095, "loss_rpn_bbox_fpn5": 0.005783, "loss_rpn_bbox_fpn6": 0.001766, "loss_rpn_cls_fpn2": 0.001860, "loss_rpn_cls_fpn3": 0.002424, "loss_rpn_cls_fpn4": 0.002475, "loss_rpn_cls_fpn5": 0.001783, "loss_rpn_cls_fpn6": 0.000293, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503711}
json_stats: {"accuracy_cls": 0.892075, "eta": "11:58:15", "iter": 4440, "loss": 0.605345, "loss_bbox": 0.176426, "loss_cls": 0.242905, "loss_mask": 0.146386, "loss_rpn_bbox_fpn2": 0.000334, "loss_rpn_bbox_fpn3": 0.003588, "loss_rpn_bbox_fpn4": 0.007156, "loss_rpn_bbox_fpn5": 0.009028, "loss_rpn_bbox_fpn6": 0.001161, "loss_rpn_cls_fpn2": 0.000542, "loss_rpn_cls_fpn3": 0.002629, "loss_rpn_cls_fpn4": 0.002439, "loss_rpn_cls_fpn5": 0.001673, "loss_rpn_cls_fpn6": 0.000367, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503692}
json_stats: {"accuracy_cls": 0.893555, "eta": "11:58:05", "iter": 4460, "loss": 0.595759, "loss_bbox": 0.173263, "loss_cls": 0.243234, "loss_mask": 0.144009, "loss_rpn_bbox_fpn2": 0.000368, "loss_rpn_bbox_fpn3": 0.002820, "loss_rpn_bbox_fpn4": 0.007869, "loss_rpn_bbox_fpn5": 0.009457, "loss_rpn_bbox_fpn6": 0.000931, "loss_rpn_cls_fpn2": 0.000716, "loss_rpn_cls_fpn3": 0.002946, "loss_rpn_cls_fpn4": 0.002446, "loss_rpn_cls_fpn5": 0.001971, "loss_rpn_cls_fpn6": 0.000251, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503685}
json_stats: {"accuracy_cls": 0.877333, "eta": "11:57:57", "iter": 4480, "loss": 0.650826, "loss_bbox": 0.192321, "loss_cls": 0.263362, "loss_mask": 0.162848, "loss_rpn_bbox_fpn2": 0.000152, "loss_rpn_bbox_fpn3": 0.006834, "loss_rpn_bbox_fpn4": 0.014061, "loss_rpn_bbox_fpn5": 0.006725, "loss_rpn_bbox_fpn6": 0.000215, "loss_rpn_cls_fpn2": 0.000295, "loss_rpn_cls_fpn3": 0.003576, "loss_rpn_cls_fpn4": 0.002413, "loss_rpn_cls_fpn5": 0.003114, "loss_rpn_cls_fpn6": 0.000279, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503712}
json_stats: {"accuracy_cls": 0.883448, "eta": "11:57:44", "iter": 4500, "loss": 0.626216, "loss_bbox": 0.183521, "loss_cls": 0.256834, "loss_mask": 0.160820, "loss_rpn_bbox_fpn2": 0.000520, "loss_rpn_bbox_fpn3": 0.002812, "loss_rpn_bbox_fpn4": 0.008874, "loss_rpn_bbox_fpn5": 0.006103, "loss_rpn_bbox_fpn6": 0.000075, "loss_rpn_cls_fpn2": 0.000739, "loss_rpn_cls_fpn3": 0.001406, "loss_rpn_cls_fpn4": 0.001965, "loss_rpn_cls_fpn5": 0.001486, "loss_rpn_cls_fpn6": 0.000062, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503676}
json_stats: {"accuracy_cls": 0.898192, "eta": "11:57:34", "iter": 4520, "loss": 0.586837, "loss_bbox": 0.174622, "loss_cls": 0.229835, "loss_mask": 0.151345, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.004664, "loss_rpn_bbox_fpn4": 0.005215, "loss_rpn_bbox_fpn5": 0.004863, "loss_rpn_bbox_fpn6": 0.001133, "loss_rpn_cls_fpn2": 0.000260, "loss_rpn_cls_fpn3": 0.002710, "loss_rpn_cls_fpn4": 0.002682, "loss_rpn_cls_fpn5": 0.001567, "loss_rpn_cls_fpn6": 0.000683, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503680}
json_stats: {"accuracy_cls": 0.921968, "eta": "11:57:16", "iter": 4540, "loss": 0.497414, "loss_bbox": 0.149855, "loss_cls": 0.178782, "loss_mask": 0.158472, "loss_rpn_bbox_fpn2": 0.000000, "loss_rpn_bbox_fpn3": 0.001606, "loss_rpn_bbox_fpn4": 0.004585, "loss_rpn_bbox_fpn5": 0.006035, "loss_rpn_bbox_fpn6": 0.001908, "loss_rpn_cls_fpn2": 0.000647, "loss_rpn_cls_fpn3": 0.002519, "loss_rpn_cls_fpn4": 0.001565, "loss_rpn_cls_fpn5": 0.002173, "loss_rpn_cls_fpn6": 0.000460, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503592}
json_stats: {"accuracy_cls": 0.886297, "eta": "11:57:10", "iter": 4560, "loss": 0.674476, "loss_bbox": 0.183334, "loss_cls": 0.260451, "loss_mask": 0.170847, "loss_rpn_bbox_fpn2": 0.000630, "loss_rpn_bbox_fpn3": 0.003604, "loss_rpn_bbox_fpn4": 0.010287, "loss_rpn_bbox_fpn5": 0.010254, "loss_rpn_bbox_fpn6": 0.000653, "loss_rpn_cls_fpn2": 0.001581, "loss_rpn_cls_fpn3": 0.003532, "loss_rpn_cls_fpn4": 0.003228, "loss_rpn_cls_fpn5": 0.002779, "loss_rpn_cls_fpn6": 0.000507, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503636}
json_stats: {"accuracy_cls": 0.893066, "eta": "11:56:58", "iter": 4580, "loss": 0.605064, "loss_bbox": 0.166443, "loss_cls": 0.242250, "loss_mask": 0.137673, "loss_rpn_bbox_fpn2": 0.000482, "loss_rpn_bbox_fpn3": 0.002656, "loss_rpn_bbox_fpn4": 0.009705, "loss_rpn_bbox_fpn5": 0.003584, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000801, "loss_rpn_cls_fpn3": 0.002525, "loss_rpn_cls_fpn4": 0.005135, "loss_rpn_cls_fpn5": 0.000641, "loss_rpn_cls_fpn6": 0.000042, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503607}
json_stats: {"accuracy_cls": 0.879160, "eta": "11:56:49", "iter": 4600, "loss": 0.642805, "loss_bbox": 0.185334, "loss_cls": 0.265483, "loss_mask": 0.150987, "loss_rpn_bbox_fpn2": 0.000922, "loss_rpn_bbox_fpn3": 0.004113, "loss_rpn_bbox_fpn4": 0.013127, "loss_rpn_bbox_fpn5": 0.006173, "loss_rpn_bbox_fpn6": 0.000009, "loss_rpn_cls_fpn2": 0.000496, "loss_rpn_cls_fpn3": 0.005901, "loss_rpn_cls_fpn4": 0.003217, "loss_rpn_cls_fpn5": 0.002356, "loss_rpn_cls_fpn6": 0.000012, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503620}
json_stats: {"accuracy_cls": 0.889097, "eta": "11:56:34", "iter": 4620, "loss": 0.613822, "loss_bbox": 0.173316, "loss_cls": 0.246275, "loss_mask": 0.141106, "loss_rpn_bbox_fpn2": 0.000331, "loss_rpn_bbox_fpn3": 0.003919, "loss_rpn_bbox_fpn4": 0.006964, "loss_rpn_bbox_fpn5": 0.002426, "loss_rpn_bbox_fpn6": 0.000000, "loss_rpn_cls_fpn2": 0.000563, "loss_rpn_cls_fpn3": 0.004941, "loss_rpn_cls_fpn4": 0.003368, "loss_rpn_cls_fpn5": 0.000731, "loss_rpn_cls_fpn6": 0.000000, "lr": 0.010000, "mb_qsize": 64, "mem": 7642, "time": 0.503562}
